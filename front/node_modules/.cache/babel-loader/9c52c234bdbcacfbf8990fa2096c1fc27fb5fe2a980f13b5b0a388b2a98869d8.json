{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      comments: [],\n      isEditingPost: false,\n      editContent: '',\n      commentText: ''\n    };\n  },\n  props: {\n    board_id: String,\n    user_name: String\n  },\n  mounted() {\n    this.commentList();\n  },\n  methods: {\n    // 댓글 목록 가져오기\n    async commentList() {\n      try {\n        const response = await axios.get(`${this.$BackURL}/commentList`, {\n          params: {\n            board_id: this.board_id\n          }\n        });\n        if (response.data.status === 'success') {\n          this.comments = response.data.res.map(comment => ({\n            ...comment,\n            isEditing: false,\n            editContent: ''\n          }));\n        } else {\n          console.error('Failed to fetch comments:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    },\n    // 댓글 편집\n    commentEdit(index) {\n      this.comments[index].isEditing = !this.comments[index].isEditing;\n      if (this.comments[index].isEditing) {\n        this.comments[index].editContent = this.comments[index].content;\n      }\n    },\n    // 편집 취소\n    cancelEdit(index) {\n      this.comments[index].isEditing = false;\n    },\n    // 댓글 수정\n    async saveCommentEdit(index, comment_id) {\n      if (confirm(\"수정하시겠습니까?\")) {\n        const editedComment = this.comments[index].editContent;\n        try {\n          const response = await axios.post('http://127.0.0.1:3000/saveCommentEdit', {\n            comment_id: comment_id,\n            content: editedComment\n          });\n          if (response.data.status === 'success') {\n            this.comments[index].content = editedComment;\n            this.comments[index].isEditing = false;\n          } else {\n            console.error('Failed to edit comment');\n          }\n        } catch (error) {\n          console.error('Error editing comment:', error);\n        }\n      }\n    },\n    // 댓글 삭제\n    async commentDelete(index, comment_id) {\n      if (confirm(\"삭제하시겠습니까?\")) {\n        try {\n          const response = await axios.post(`${this.$BackURL}/commentDelete`, {\n            comment_id: comment_id\n          });\n          if (response.data.status === 'success') {\n            this.comments.splice(index, 1); // 배열에서 해당 댓글을 완전히 제거합니다.\n            this.commentCount -= 1; // 댓글 수를 하나 줄입니다.\n          } else {\n            console.error('Failed to delete comment');\n          }\n        } catch (error) {\n          console.error('Error deleting comment:', error);\n        }\n      }\n    },\n    updateComment(event) {\n      this.commentText = event.target.innerText;\n    },\n    async commentAdd(board_id) {\n      try {\n        const user_id = sessionStorage.getItem('user_id');\n        const comment = this.commentText;\n        const response = await axios.get(`${this.$BackURL}/commentAdd`, {\n          params: {\n            board_id: board_id,\n            user_id: user_id,\n            comment: comment\n          }\n        });\n        if (response.data.status === 'success') {\n          this.commentList();\n          this.commentText = '';\n          this.$refs.editableContent.innerText = '';\n          this.commentCount = this.commentCount + 1;\n          alert('댓글이 등록되었습니다.');\n        } else {\n          console.log('댓글 등록 실패');\n        }\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    },\n    // 날짜 선정\n    sendformatDate(create_date) {\n      this.$emit('formatDate', create_date);\n    }\n  }\n};","map":{"version":3,"names":["axios","data","comments","isEditingPost","editContent","commentText","props","board_id","String","user_name","mounted","commentList","methods","response","get","$BackURL","params","status","res","map","comment","isEditing","console","error","message","commentEdit","index","content","cancelEdit","saveCommentEdit","comment_id","confirm","editedComment","post","commentDelete","splice","commentCount","updateComment","event","target","innerText","commentAdd","user_id","sessionStorage","getItem","$refs","editableContent","alert","log","sendformatDate","create_date","$emit"],"sources":["/var/www/front/src/components/Board/BoardComment.vue"],"sourcesContent":["<template>\n    <div class=\"card bg-light m-2\" style=\"max-width: 100%;\">\n        <div class=\"card-header\">댓글</div>\n        <div v-if=\"comments.length > 0\" class=\"d-flex p-3 pb-0 \" style=\"flex-direction: column;\">\n            <div v-for=\"(commentdata, index) in comments\" :key=\"index\" class=\"card border-light mb-3\" style=\"max-width: 100%;\">\n                <div class=\"card-body align-items-center d-flex\" style=\"flex-direction: row;\">\n                    <!-- 이미지 -->\n                    <img :src=\"require(`../../assets/img/${commentdata.img}`)\" style=\"width: 50px;border-radius: 50%;\">\n                    <!-- 댓글 -->\n                    <div class=\"w-100 ps-4\">\n                        <!-- 이름, 편집, 삭제 -->\n                        <div class=\"d-flex\" style=\"align-items: center; justify-content: space-between;\">\n                            <p style=\"font-weight: bold; margin:0;\">{{ commentdata.name }}</p>\n                            <div class=\"d-flex\" v-if=\"commentdata.name === user_name\">\n                                <div type=\"button\" class=\"m-0\" style=\"font-size: 16px;\" @click=\"commentEdit(index)\"><i class=\"bi bi-pencil-square\"></i></div>\n                                <div type=\"button\" class=\"m-0 ms-1\" style=\"font-size: 16px;\" @click=\"commentDelete(index, commentdata.id)\"><i class=\"bi bi-trash\"></i></div>\n                            </div>\n                        </div>\n                        <!-- 댓글 편집 -->\n                        <div v-if=\"commentdata.isEditing\">\n                            <textarea class=\"form-control\" v-model=\"commentdata.editContent\" rows=\"2\"></textarea>\n                            <div class=\"d-flex mt-2 mb-2\" style=\"justify-content: flex-end;\">\n                                <button class=\"btn btn-primary btn-sm \" @click=\"saveCommentEdit(index, commentdata.id)\">수정</button>\n                                <button class=\"btn btn-secondary btn-sm  ms-2\" @click=\"cancelEdit(index)\">취소</button>\n                            </div>\n                        </div>\n                        <!-- 댓글 view -->\n                        <p v-else class=\"card-text m-0\">{{ commentdata.content }}</p>\n                        <p class=\"text-body-tertiary m-0\" style=\"text-align: end; font-size: 13px;\">{{ sendformatDate(commentdata.create_date) }}</p>\n                    </div>\n                </div>\n            </div>\n            <hr style=\"margin-bottom:0\"/>\n        </div>\n        <div class=\"card-body d-flex pb-0\">\n            <div class=\"d-flex\" style=\"align-items: flex-start\">\n                <img :src=\"require(`../../assets/img/${user_img}`)\" style=\"width: 50px;border-radius: 50%;\">\n            </div>\n            <div class=\"form-control ms-2\" id=\"comment\" style=\"height: auto; min-height: 80px;\">\n                <div contenteditable=\"false\" style=\"font-weight: bold;\">{{ user_name }}</div>\n                <div contenteditable=\"true\" ref=\"editableContent\" @input=\"updateComment\" style=\"outline: none; border: 2px solid transparent;\"></div>\n            </div>\n        </div>\n        <div class=\"d-flex justify-content-end\">\n            <button type=\"button\" class=\"btn btn-outline-primary m-3\" @click=\"commentAdd(selectBoard.board_id)\">등록</button> \n        </div>\n    </div>\n\n</template>\n<script>\nimport axios from 'axios';\n\nexport default {\n    data(){\n        return{\n            comments:[],\n            isEditingPost: false,\n            editContent: '',\n            commentText: '',\n        }\n    },\n    props:{\n        board_id: String,\n        user_name: String,\n    },\n    mounted() {\n        this.commentList();\n    },\n    methods: {\n        // 댓글 목록 가져오기\n        async commentList() {\n            try {\n                const response = await axios.get(`${this.$BackURL}/commentList`, {\n                    params: {\n                        board_id: this.board_id\n                    }\n                });\n                if (response.data.status === 'success') {\n                    this.comments = response.data.res.map(comment => ({\n                        ...comment,\n                        isEditing: false,\n                        editContent: ''\n                    }));\n                } else {\n                    console.error('Failed to fetch comments:', response.data.message);\n                }\n            } catch (error) {\n                console.error('Error fetching comments:', error);\n            }\n        },\n        // 댓글 편집\n        commentEdit(index) {\n            this.comments[index].isEditing = !this.comments[index].isEditing;\n            if (this.comments[index].isEditing) {\n                this.comments[index].editContent = this.comments[index].content;\n            }\n        },\n        // 편집 취소\n        cancelEdit(index) {\n            this.comments[index].isEditing = false;\n        },\n        // 댓글 수정\n        async saveCommentEdit(index, comment_id) {\n            if (confirm(\"수정하시겠습니까?\")) {\n                const editedComment = this.comments[index].editContent;\n                try {\n                    const response = await axios.post('http://127.0.0.1:3000/saveCommentEdit', {\n                        comment_id: comment_id,\n                        content: editedComment\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments[index].content = editedComment;\n                        this.comments[index].isEditing = false;\n                    } else {\n                        console.error('Failed to edit comment');\n                    }\n                } catch (error) {\n                    console.error('Error editing comment:', error);\n                }\n            }\n        },\n        // 댓글 삭제\n        async commentDelete(index, comment_id) {\n            if (confirm(\"삭제하시겠습니까?\")) {\n                try {\n                    const response = await axios.post(`${this.$BackURL}/commentDelete`, {\n                        comment_id: comment_id\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments.splice(index, 1); // 배열에서 해당 댓글을 완전히 제거합니다.\n                        this.commentCount -= 1;         // 댓글 수를 하나 줄입니다.\n                    } else {\n                        console.error('Failed to delete comment');\n                    }\n                } catch (error) {\n                    console.error('Error deleting comment:', error);\n                }\n            }\n        },\n        updateComment(event) {\n            this.commentText = event.target.innerText;\n        },\n        async commentAdd(board_id) {\n            try {\n                const user_id = sessionStorage.getItem('user_id');\n                const comment = this.commentText;\n                const response = await axios.get(`${this.$BackURL}/commentAdd`, {\n                    params: {\n                        board_id: board_id,\n                        user_id: user_id,\n                        comment: comment\n                    }\n                });\n                if (response.data.status === 'success') {\n                    this.commentList();\n                    this.commentText = '';\n                    this.$refs.editableContent.innerText = '';\n                    this.commentCount = this.commentCount + 1;\n                    alert('댓글이 등록되었습니다.');\n                } else {\n                    console.log('댓글 등록 실패');\n                }\n            } catch (error) {\n                console.error('Error fetching posts:', error);\n            }\n        },\n        // 날짜 선정\n        sendformatDate(create_date){\n            this.$emit('formatDate', create_date);\n        },\n    }\n}\n</script>\n<style>\n\n</style>"],"mappings":"AAkDA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACXC,IAAIA,CAAA,EAAE;IACF,OAAM;MACFC,QAAQ,EAAC,EAAE;MACXC,aAAa,EAAE,KAAK;MACpBC,WAAW,EAAE,EAAE;MACfC,WAAW,EAAE;IACjB;EACJ,CAAC;EACDC,KAAK,EAAC;IACFC,QAAQ,EAAEC,MAAM;IAChBC,SAAS,EAAED;EACf,CAAC;EACDE,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,WAAW,CAAC,CAAC;EACtB,CAAC;EACDC,OAAO,EAAE;IACL;IACA,MAAMD,WAAWA,CAAA,EAAG;MAChB,IAAI;QACA,MAAME,QAAO,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAC,GAAG,IAAI,CAACC,QAAQ,cAAc,EAAE;UAC7DC,MAAM,EAAE;YACJT,QAAQ,EAAE,IAAI,CAACA;UACnB;QACJ,CAAC,CAAC;QACF,IAAIM,QAAQ,CAACZ,IAAI,CAACgB,MAAK,KAAM,SAAS,EAAE;UACpC,IAAI,CAACf,QAAO,GAAIW,QAAQ,CAACZ,IAAI,CAACiB,GAAG,CAACC,GAAG,CAACC,OAAM,KAAM;YAC9C,GAAGA,OAAO;YACVC,SAAS,EAAE,KAAK;YAChBjB,WAAW,EAAE;UACjB,CAAC,CAAC,CAAC;QACP,OAAO;UACHkB,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEV,QAAQ,CAACZ,IAAI,CAACuB,OAAO,CAAC;QACrE;MACJ,EAAE,OAAOD,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IACJ,CAAC;IACD;IACAE,WAAWA,CAACC,KAAK,EAAE;MACf,IAAI,CAACxB,QAAQ,CAACwB,KAAK,CAAC,CAACL,SAAQ,GAAI,CAAC,IAAI,CAACnB,QAAQ,CAACwB,KAAK,CAAC,CAACL,SAAS;MAChE,IAAI,IAAI,CAACnB,QAAQ,CAACwB,KAAK,CAAC,CAACL,SAAS,EAAE;QAChC,IAAI,CAACnB,QAAQ,CAACwB,KAAK,CAAC,CAACtB,WAAU,GAAI,IAAI,CAACF,QAAQ,CAACwB,KAAK,CAAC,CAACC,OAAO;MACnE;IACJ,CAAC;IACD;IACAC,UAAUA,CAACF,KAAK,EAAE;MACd,IAAI,CAACxB,QAAQ,CAACwB,KAAK,CAAC,CAACL,SAAQ,GAAI,KAAK;IAC1C,CAAC;IACD;IACA,MAAMQ,eAAeA,CAACH,KAAK,EAAEI,UAAU,EAAE;MACrC,IAAIC,OAAO,CAAC,WAAW,CAAC,EAAE;QACtB,MAAMC,aAAY,GAAI,IAAI,CAAC9B,QAAQ,CAACwB,KAAK,CAAC,CAACtB,WAAW;QACtD,IAAI;UACA,MAAMS,QAAO,GAAI,MAAMb,KAAK,CAACiC,IAAI,CAAC,uCAAuC,EAAE;YACvEH,UAAU,EAAEA,UAAU;YACtBH,OAAO,EAAEK;UACb,CAAC,CAAC;UACF,IAAInB,QAAQ,CAACZ,IAAI,CAACgB,MAAK,KAAM,SAAS,EAAE;YACpC,IAAI,CAACf,QAAQ,CAACwB,KAAK,CAAC,CAACC,OAAM,GAAIK,aAAa;YAC5C,IAAI,CAAC9B,QAAQ,CAACwB,KAAK,CAAC,CAACL,SAAQ,GAAI,KAAK;UAC1C,OAAO;YACHC,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;UAC3C;QACJ,EAAE,OAAOA,KAAK,EAAE;UACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAClD;MACJ;IACJ,CAAC;IACD;IACA,MAAMW,aAAaA,CAACR,KAAK,EAAEI,UAAU,EAAE;MACnC,IAAIC,OAAO,CAAC,WAAW,CAAC,EAAE;QACtB,IAAI;UACA,MAAMlB,QAAO,GAAI,MAAMb,KAAK,CAACiC,IAAI,CAAC,GAAG,IAAI,CAAClB,QAAQ,gBAAgB,EAAE;YAChEe,UAAU,EAAEA;UAChB,CAAC,CAAC;UACF,IAAIjB,QAAQ,CAACZ,IAAI,CAACgB,MAAK,KAAM,SAAS,EAAE;YACpC,IAAI,CAACf,QAAQ,CAACiC,MAAM,CAACT,KAAK,EAAE,CAAC,CAAC,EAAE;YAChC,IAAI,CAACU,YAAW,IAAK,CAAC,EAAU;UACpC,OAAO;YACHd,OAAO,CAACC,KAAK,CAAC,0BAA0B,CAAC;UAC7C;QACJ,EAAE,OAAOA,KAAK,EAAE;UACZD,OAAO,CAACC,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACnD;MACJ;IACJ,CAAC;IACDc,aAAaA,CAACC,KAAK,EAAE;MACjB,IAAI,CAACjC,WAAU,GAAIiC,KAAK,CAACC,MAAM,CAACC,SAAS;IAC7C,CAAC;IACD,MAAMC,UAAUA,CAAClC,QAAQ,EAAE;MACvB,IAAI;QACA,MAAMmC,OAAM,GAAIC,cAAc,CAACC,OAAO,CAAC,SAAS,CAAC;QACjD,MAAMxB,OAAM,GAAI,IAAI,CAACf,WAAW;QAChC,MAAMQ,QAAO,GAAI,MAAMb,KAAK,CAACc,GAAG,CAAC,GAAG,IAAI,CAACC,QAAQ,aAAa,EAAE;UAC5DC,MAAM,EAAE;YACJT,QAAQ,EAAEA,QAAQ;YAClBmC,OAAO,EAAEA,OAAO;YAChBtB,OAAO,EAAEA;UACb;QACJ,CAAC,CAAC;QACF,IAAIP,QAAQ,CAACZ,IAAI,CAACgB,MAAK,KAAM,SAAS,EAAE;UACpC,IAAI,CAACN,WAAW,CAAC,CAAC;UAClB,IAAI,CAACN,WAAU,GAAI,EAAE;UACrB,IAAI,CAACwC,KAAK,CAACC,eAAe,CAACN,SAAQ,GAAI,EAAE;UACzC,IAAI,CAACJ,YAAW,GAAI,IAAI,CAACA,YAAW,GAAI,CAAC;UACzCW,KAAK,CAAC,cAAc,CAAC;QACzB,OAAO;UACHzB,OAAO,CAAC0B,GAAG,CAAC,UAAU,CAAC;QAC3B;MACJ,EAAE,OAAOzB,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MACjD;IACJ,CAAC;IACD;IACA0B,cAAcA,CAACC,WAAW,EAAC;MACvB,IAAI,CAACC,KAAK,CAAC,YAAY,EAAED,WAAW,CAAC;IACzC;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}