{"ast":null,"code":"import { Node, mergeAttributes, Mark, getMarkAttributes, wrappingInputRule } from '@tiptap/core';\n\n/**\n * This extension allows you to create list items.\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nconst ListItem = Node.create({\n  name: 'listItem',\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      bulletListTypeName: 'bulletList',\n      orderedListTypeName: 'orderedList'\n    };\n  },\n  content: 'paragraph block*',\n  defining: true,\n  parseHTML() {\n    return [{\n      tag: 'li'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name)\n    };\n  }\n});\n\n/**\n * This extension allows you to create text styles. It is required by default\n * for the `textColor` and `backgroundColor` extensions.\n * @see https://www.tiptap.dev/api/marks/text-style\n */\nconst TextStyle = Mark.create({\n  name: 'textStyle',\n  priority: 101,\n  addOptions() {\n    return {\n      HTMLAttributes: {}\n    };\n  },\n  parseHTML() {\n    return [{\n      tag: 'span',\n      getAttrs: element => {\n        const hasStyles = element.hasAttribute('style');\n        if (!hasStyles) {\n          return false;\n        }\n        return {};\n      }\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({\n        state,\n        commands\n      }) => {\n        const attributes = getMarkAttributes(state, this.type);\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value);\n        if (hasStyles) {\n          return true;\n        }\n        return commands.unsetMark(this.name);\n      }\n    };\n  }\n});\n\n/**\n * Matches a bullet list to a dash or asterisk.\n */\nconst inputRegex = /^\\s*([-+*])\\s$/;\n/**\n * This extension allows you to create bullet lists.\n * This requires the ListItem extension\n * @see https://tiptap.dev/api/nodes/bullet-list\n * @see https://tiptap.dev/api/nodes/list-item.\n */\nconst BulletList = Node.create({\n  name: 'bulletList',\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false\n    };\n  },\n  group: 'block list',\n  content() {\n    return `${this.options.itemTypeName}+`;\n  },\n  parseHTML() {\n    return [{\n      tag: 'ul'\n    }];\n  },\n  renderHTML({\n    HTMLAttributes\n  }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];\n  },\n  addCommands() {\n    return {\n      toggleBulletList: () => ({\n        commands,\n        chain\n      }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList()\n    };\n  },\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type\n    });\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => {\n          return this.editor.getAttributes(TextStyle.name);\n        },\n        editor: this.editor\n      });\n    }\n    return [inputRule];\n  }\n});\nexport { BulletList, BulletList as default, inputRegex };","map":{"version":3,"names":["ListItem","Node","create","name","addOptions","HTMLAttributes","bulletListTypeName","orderedListTypeName","content","defining","parseHTML","tag","renderHTML","mergeAttributes","options","addKeyboardShortcuts","Enter","editor","commands","splitListItem","Tab","sinkListItem","Shift-Tab","liftListItem","TextStyle","Mark","priority","getAttrs","element","hasStyles","hasAttribute","addCommands","removeEmptyTextStyle","state","attributes","getMarkAttributes","type","Object","entries","some","value","unsetMark","inputRegex","BulletList","itemTypeName","keepMarks","keepAttributes","group","toggleBulletList","chain","toggleList","updateAttributes","getAttributes","run","Mod-Shift-8","addInputRules","inputRule","wrappingInputRule","find"],"sources":["../../extension-list-item/src/list-item.ts","../../extension-text-style/src/text-style.ts","../src/bullet-list.ts"],"sourcesContent":["import { mergeAttributes, Node } from '@tiptap/core'\n\nexport interface ListItemOptions {\n  /**\n   * The HTML attributes for a list item node.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n\n  /**\n   * The node type for bulletList nodes\n   * @default 'bulletList'\n   * @example 'myCustomBulletList'\n   */\n  bulletListTypeName: string\n\n  /**\n   * The node type for orderedList nodes\n   * @default 'orderedList'\n   * @example 'myCustomOrderedList'\n   */\n  orderedListTypeName: string\n}\n\n/**\n * This extension allows you to create list items.\n * @see https://www.tiptap.dev/api/nodes/list-item\n */\nexport const ListItem = Node.create<ListItemOptions>({\n  name: 'listItem',\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n      bulletListTypeName: 'bulletList',\n      orderedListTypeName: 'orderedList',\n    }\n  },\n\n  content: 'paragraph block*',\n\n  defining: true,\n\n  parseHTML() {\n    return [\n      {\n        tag: 'li',\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => this.editor.commands.splitListItem(this.name),\n      Tab: () => this.editor.commands.sinkListItem(this.name),\n      'Shift-Tab': () => this.editor.commands.liftListItem(this.name),\n    }\n  },\n})\n","import {\n  getMarkAttributes,\n  Mark,\n  mergeAttributes,\n} from '@tiptap/core'\n\nexport interface TextStyleOptions {\n  /**\n   * HTML attributes to add to the span element.\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textStyle: {\n      /**\n       * Remove spans without inline style attributes.\n       * @example editor.commands.removeEmptyTextStyle()\n       */\n      removeEmptyTextStyle: () => ReturnType,\n    }\n  }\n}\n\n/**\n * This extension allows you to create text styles. It is required by default\n * for the `textColor` and `backgroundColor` extensions.\n * @see https://www.tiptap.dev/api/marks/text-style\n */\nexport const TextStyle = Mark.create<TextStyleOptions>({\n  name: 'textStyle',\n\n  priority: 101,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    }\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: 'span',\n        getAttrs: element => {\n          const hasStyles = (element as HTMLElement).hasAttribute('style')\n\n          if (!hasStyles) {\n            return false\n          }\n\n          return {}\n        },\n      },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      removeEmptyTextStyle: () => ({ state, commands }) => {\n        const attributes = getMarkAttributes(state, this.type)\n        const hasStyles = Object.entries(attributes).some(([, value]) => !!value)\n\n        if (hasStyles) {\n          return true\n        }\n\n        return commands.unsetMark(this.name)\n      },\n    }\n  },\n\n})\n","import { mergeAttributes, Node, wrappingInputRule } from '@tiptap/core'\n\nimport ListItem from '../../extension-list-item/src/index.js'\nimport TextStyle from '../../extension-text-style/src/index.js'\n\nexport interface BulletListOptions {\n  /**\n   * The node name for the list items\n   * @default 'listItem'\n   * @example 'paragraph'\n   */\n  itemTypeName: string,\n\n  /**\n   * HTML attributes to add to the bullet list element\n   * @default {}\n   * @example { class: 'foo' }\n   */\n  HTMLAttributes: Record<string, any>,\n\n  /**\n   * Keep the marks when splitting the list\n   * @default false\n   * @example true\n   */\n  keepMarks: boolean,\n\n  /**\n   * Keep the attributes when splitting the list\n   * @default false\n   * @example true\n   */\n  keepAttributes: boolean,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    bulletList: {\n      /**\n       * Toggle a bullet list\n       */\n      toggleBulletList: () => ReturnType,\n    }\n  }\n}\n\n/**\n * Matches a bullet list to a dash or asterisk.\n */\nexport const inputRegex = /^\\s*([-+*])\\s$/\n\n/**\n * This extension allows you to create bullet lists.\n * This requires the ListItem extension\n * @see https://tiptap.dev/api/nodes/bullet-list\n * @see https://tiptap.dev/api/nodes/list-item.\n */\nexport const BulletList = Node.create<BulletListOptions>({\n  name: 'bulletList',\n\n  addOptions() {\n    return {\n      itemTypeName: 'listItem',\n      HTMLAttributes: {},\n      keepMarks: false,\n      keepAttributes: false,\n    }\n  },\n\n  group: 'block list',\n\n  content() {\n    return `${this.options.itemTypeName}+`\n  },\n\n  parseHTML() {\n    return [\n      { tag: 'ul' },\n    ]\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0]\n  },\n\n  addCommands() {\n    return {\n      toggleBulletList: () => ({ commands, chain }) => {\n        if (this.options.keepAttributes) {\n          return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run()\n        }\n        return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),\n    }\n  },\n\n  addInputRules() {\n    let inputRule = wrappingInputRule({\n      find: inputRegex,\n      type: this.type,\n    })\n\n    if (this.options.keepMarks || this.options.keepAttributes) {\n      inputRule = wrappingInputRule({\n        find: inputRegex,\n        type: this.type,\n        keepMarks: this.options.keepMarks,\n        keepAttributes: this.options.keepAttributes,\n        getAttributes: () => { return this.editor.getAttributes(TextStyle.name) },\n        editor: this.editor,\n      })\n    }\n    return [\n      inputRule,\n    ]\n  },\n})\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}