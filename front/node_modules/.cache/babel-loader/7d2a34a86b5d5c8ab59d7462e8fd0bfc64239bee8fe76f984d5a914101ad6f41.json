{"ast":null,"code":"import axios from 'axios';\nexport default {\n  props: {\n    board_id: String,\n    user_name: String\n  },\n  data() {\n    return {\n      comments: [],\n      isEditingPost: false,\n      editContent: ''\n    };\n  },\n  mounted() {\n    this.commentList();\n  },\n  methods: {\n    // 댓글 목록 가져오기\n    async commentList() {\n      try {\n        const response = await axios.get(`${this.$BackURL}/commentList`, {\n          params: {\n            board_id: this.board_id\n          }\n        });\n        if (response.data.status === 'success') {\n          this.comments = response.data.res.map(comment => ({\n            ...comment,\n            isEditing: false,\n            editContent: ''\n          }));\n        } else {\n          console.error('Failed to fetch comments:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    },\n    // 댓글 편집\n    commentEdit(index) {\n      this.comments[index].isEditing = !this.comments[index].isEditing;\n      if (this.comments[index].isEditing) {\n        this.comments[index].editContent = this.comments[index].content;\n      }\n    },\n    // 댓글 수정\n    async saveCommentEdit(index, comment_id) {\n      if (confirm(\"수정하시겠습니까?\")) {\n        const editedComment = this.comments[index].editContent;\n        try {\n          const response = await axios.post('http://127.0.0.1:3000/commentEdit', {\n            comment_id: comment_id,\n            content: editedComment\n          });\n          if (response.data.status === 'success') {\n            this.comments[index].content = editedComment;\n            this.comments[index].isEditing = false;\n          } else {\n            console.error('Failed to edit comment');\n          }\n        } catch (error) {\n          console.error('Error editing comment:', error);\n        }\n      }\n    },\n    // 댓글 삭제\n    async commentDelete(index, comment_id) {\n      if (confirm(\"삭제하시겠습니까?\")) {\n        try {\n          const response = await axios.post(`${this.$BackURL}/commentDelete`, {\n            comment_id: comment_id\n          });\n          if (response.data.status === 'success') {\n            this.comments.splice(index, 1); // 배열에서 해당 댓글을 완전히 제거합니다.\n            this.commentCount -= 1; // 댓글 수를 하나 줄입니다.\n          } else {\n            console.error('Failed to delete comment');\n          }\n        } catch (error) {\n          console.error('Error deleting comment:', error);\n        }\n      }\n    },\n    // 날짜 선정\n    sendformatDate(create_date) {\n      this.$emit('formatDate', create_date);\n    },\n    // 편집 취소\n    cancelEdit(index) {\n      this.comments[index].isEditing = false;\n    }\n  }\n};","map":{"version":3,"names":["axios","props","board_id","String","user_name","data","comments","isEditingPost","editContent","mounted","commentList","methods","response","get","$BackURL","params","status","res","map","comment","isEditing","console","error","message","commentEdit","index","content","saveCommentEdit","comment_id","confirm","editedComment","post","commentDelete","splice","commentCount","sendformatDate","create_date","$emit","cancelEdit"],"sources":["/var/www/front/src/components/Board/BoardComment.vue"],"sourcesContent":["<template>\n    <div class=\"card bg-light m-2\" style=\"max-width: 100%;\">\n        <div class=\"card-header\">댓글</div>\n        <div v-if=\"comments.length > 0\" class=\"d-flex p-3 pb-0 \" style=\"flex-direction: column;\">\n            <div v-for=\"(commentdata, index) in comments\" :key=\"index\" class=\"card border-light mb-3\" style=\"max-width: 100%;\">\n                <div class=\"card-body align-items-center d-flex\" style=\"flex-direction: row;\">\n                    <!-- 이미지 -->\n                    <img :src=\"require(`../../assets/img/${commentdata.img}`)\" style=\"width: 50px;border-radius: 50%;\">\n                    <!-- 댓글 -->\n                    <div class=\"w-100 ps-4\">\n                        <!-- 이름, 편집, 삭제 -->\n                        <div class=\"d-flex\" style=\"align-items: center; justify-content: space-between;\">\n                            <p style=\"font-weight: bold; margin:0;\">{{ commentdata.name }}</p>\n                            <div class=\"d-flex\" v-if=\"commentdata.name === user_name\">\n                                <div type=\"button\" class=\"m-0\" style=\"font-size: 16px;\" @click=\"commentEdit(index)\"><i class=\"bi bi-pencil-square\"></i></div>\n                                <div type=\"button\" class=\"m-0 ms-1\" style=\"font-size: 16px;\" @click=\"commentDelete(index, commentdata.id)\"><i class=\"bi bi-trash\"></i></div>\n                            </div>\n                        </div>\n                        <!-- 댓글 편집 -->\n                        <div v-if=\"commentdata.isEditing\">\n                            <textarea class=\"form-control\" v-model=\"commentdata.editContent\" rows=\"2\"></textarea>\n                            <div class=\"d-flex mt-2 mb-2\" style=\"justify-content: flex-end;\">\n                                <button class=\"btn btn-primary btn-sm \" @click=\"saveCommentEdit(index, commentdata.id)\">수정</button>\n                                <button class=\"btn btn-secondary btn-sm  ms-2\" @click=\"cancelEdit(index)\">취소</button>\n                            </div>\n                        </div>\n                        <!-- 댓글 view -->\n                        <p v-else class=\"card-text m-0\">{{ commentdata.content }}</p>\n                        <p class=\"text-body-tertiary m-0\" style=\"text-align: end; font-size: 13px;\">{{ sendformatDate(commentdata.create_date) }}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n</template>\n<script>\nimport axios from 'axios';\n\nexport default {\n    props:{\n        board_id: String,\n        user_name: String,\n    },\n    data(){\n        return{\n            comments:[],\n            isEditingPost: false,\n            editContent: '',\n        }\n    },\n    mounted() {\n        this.commentList();\n    },\n    methods: {\n        // 댓글 목록 가져오기\n        async commentList() {\n            try {\n                const response = await axios.get(`${this.$BackURL}/commentList`, {\n                    params: {\n                        board_id: this.board_id\n                    }\n                });\n                if (response.data.status === 'success') {\n                    this.comments = response.data.res.map(comment => ({\n                        ...comment,\n                        isEditing: false,\n                        editContent: ''\n                    }));\n                } else {\n                    console.error('Failed to fetch comments:', response.data.message);\n                }\n            } catch (error) {\n                console.error('Error fetching comments:', error);\n            }\n        },\n        // 댓글 편집\n        commentEdit(index) {\n            this.comments[index].isEditing = !this.comments[index].isEditing;\n            if (this.comments[index].isEditing) {\n                this.comments[index].editContent = this.comments[index].content;\n            }\n        },\n        // 댓글 수정\n        async saveCommentEdit(index, comment_id) {\n            if (confirm(\"수정하시겠습니까?\")) {\n                const editedComment = this.comments[index].editContent;\n                try {\n                    const response = await axios.post('http://127.0.0.1:3000/commentEdit', {\n                        comment_id: comment_id,\n                        content: editedComment\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments[index].content = editedComment;\n                        this.comments[index].isEditing = false;\n                    } else {\n                        console.error('Failed to edit comment');\n                    }\n                } catch (error) {\n                    console.error('Error editing comment:', error);\n                }\n            }\n        },\n        // 댓글 삭제\n        async commentDelete(index, comment_id) {\n            if (confirm(\"삭제하시겠습니까?\")) {\n                try {\n                    const response = await axios.post(`${this.$BackURL}/commentDelete`, {\n                        comment_id: comment_id\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments.splice(index, 1); // 배열에서 해당 댓글을 완전히 제거합니다.\n                        this.commentCount -= 1;         // 댓글 수를 하나 줄입니다.\n                    } else {\n                        console.error('Failed to delete comment');\n                    }\n                } catch (error) {\n                    console.error('Error deleting comment:', error);\n                }\n            }\n        },\n        // 날짜 선정\n        sendformatDate(create_date){\n            this.$emit('formatDate', create_date);\n        },\n        // 편집 취소\n        cancelEdit(index) {\n            this.comments[index].isEditing = false;\n        },\n\n        \n    }\n}\n</script>\n<style>\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}