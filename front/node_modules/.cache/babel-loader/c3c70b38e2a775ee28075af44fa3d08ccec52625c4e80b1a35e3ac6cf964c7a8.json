{"ast":null,"code":"import { Extension } from '@tiptap/core';\n\n/**\n * This extension allows you to align text.\n * @see https://www.tiptap.dev/api/extensions/text-align\n */\nconst TextAlign = Extension.create({\n  name: 'textAlign',\n  addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: 'left'\n    };\n  },\n  addGlobalAttributes() {\n    return [{\n      types: this.options.types,\n      attributes: {\n        textAlign: {\n          default: this.options.defaultAlignment,\n          parseHTML: element => {\n            const alignment = element.style.textAlign || this.options.defaultAlignment;\n            return this.options.alignments.includes(alignment) ? alignment : this.options.defaultAlignment;\n          },\n          renderHTML: attributes => {\n            if (attributes.textAlign === this.options.defaultAlignment) {\n              return {};\n            }\n            return {\n              style: `text-align: ${attributes.textAlign}`\n            };\n          }\n        }\n      }\n    }];\n  },\n  addCommands() {\n    return {\n      setTextAlign: alignment => ({\n        commands\n      }) => {\n        if (!this.options.alignments.includes(alignment)) {\n          return false;\n        }\n        return this.options.types.map(type => commands.updateAttributes(type, {\n          textAlign: alignment\n        })).every(response => response);\n      },\n      unsetTextAlign: () => ({\n        commands\n      }) => {\n        return this.options.types.map(type => commands.resetAttributes(type, 'textAlign')).every(response => response);\n      }\n    };\n  },\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-l': () => this.editor.commands.setTextAlign('left'),\n      'Mod-Shift-e': () => this.editor.commands.setTextAlign('center'),\n      'Mod-Shift-r': () => this.editor.commands.setTextAlign('right'),\n      'Mod-Shift-j': () => this.editor.commands.setTextAlign('justify')\n    };\n  }\n});\nexport { TextAlign, TextAlign as default };","map":{"version":3,"names":["TextAlign","Extension","create","name","addOptions","types","alignments","defaultAlignment","addGlobalAttributes","options","attributes","textAlign","default","parseHTML","element","alignment","style","includes","renderHTML","addCommands","setTextAlign","commands","map","type","updateAttributes","every","response","unsetTextAlign","resetAttributes","addKeyboardShortcuts","Mod-Shift-l","editor","Mod-Shift-e","Mod-Shift-r","Mod-Shift-j"],"sources":["../src/text-align.ts"],"sourcesContent":["import { Extension } from '@tiptap/core'\n\nexport interface TextAlignOptions {\n  /**\n   * The types where the text align attribute can be applied.\n   * @default []\n   * @example ['heading', 'paragraph']\n   */\n  types: string[],\n\n  /**\n   * The alignments which are allowed.\n   * @default ['left', 'center', 'right', 'justify']\n   * @example ['left', 'right']\n   */\n  alignments: string[],\n\n  /**\n   * The default alignment.\n   * @default 'left'\n   * @example 'center'\n   */\n  defaultAlignment: string,\n}\n\ndeclare module '@tiptap/core' {\n  interface Commands<ReturnType> {\n    textAlign: {\n      /**\n       * Set the text align attribute\n       * @param alignment The alignment\n       * @example editor.commands.setTextAlign('left')\n       */\n      setTextAlign: (alignment: string) => ReturnType,\n      /**\n       * Unset the text align attribute\n       * @example editor.commands.unsetTextAlign()\n       */\n      unsetTextAlign: () => ReturnType,\n    }\n  }\n}\n\n/**\n * This extension allows you to align text.\n * @see https://www.tiptap.dev/api/extensions/text-align\n */\nexport const TextAlign = Extension.create<TextAlignOptions>({\n  name: 'textAlign',\n\n  addOptions() {\n    return {\n      types: [],\n      alignments: ['left', 'center', 'right', 'justify'],\n      defaultAlignment: 'left',\n    }\n  },\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          textAlign: {\n            default: this.options.defaultAlignment,\n            parseHTML: element => {\n              const alignment = element.style.textAlign || this.options.defaultAlignment\n\n              return this.options.alignments.includes(alignment) ? alignment : this.options.defaultAlignment\n            },\n            renderHTML: attributes => {\n              if (attributes.textAlign === this.options.defaultAlignment) {\n                return {}\n              }\n\n              return { style: `text-align: ${attributes.textAlign}` }\n            },\n          },\n        },\n      },\n    ]\n  },\n\n  addCommands() {\n    return {\n      setTextAlign: (alignment: string) => ({ commands }) => {\n        if (!this.options.alignments.includes(alignment)) {\n          return false\n        }\n\n        return this.options.types\n          .map(type => commands.updateAttributes(type, { textAlign: alignment }))\n          .every(response => response)\n      },\n\n      unsetTextAlign: () => ({ commands }) => {\n        return this.options.types\n          .map(type => commands.resetAttributes(type, 'textAlign'))\n          .every(response => response)\n      },\n    }\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      'Mod-Shift-l': () => this.editor.commands.setTextAlign('left'),\n      'Mod-Shift-e': () => this.editor.commands.setTextAlign('center'),\n      'Mod-Shift-r': () => this.editor.commands.setTextAlign('right'),\n      'Mod-Shift-j': () => this.editor.commands.setTextAlign('justify'),\n    }\n  },\n})\n"],"mappings":";;AA2CA;;;AAGG;AACU,MAAAA,SAAS,GAAGC,SAAS,CAACC,MAAM,CAAmB;EAC1DC,IAAI,EAAE,WAAW;EAEjBC,UAAUA,CAAA;IACR,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC;MAClDC,gBAAgB,EAAE;KACnB;GACF;EAEDC,mBAAmBA,CAAA;IACjB,OAAO,CACL;MACEH,KAAK,EAAE,IAAI,CAACI,OAAO,CAACJ,KAAK;MACzBK,UAAU,EAAE;QACVC,SAAS,EAAE;UACTC,OAAO,EAAE,IAAI,CAACH,OAAO,CAACF,gBAAgB;UACtCM,SAAS,EAAEC,OAAO,IAAG;YACnB,MAAMC,SAAS,GAAGD,OAAO,CAACE,KAAK,CAACL,SAAS,IAAI,IAAI,CAACF,OAAO,CAACF,gBAAgB;YAE1E,OAAO,IAAI,CAACE,OAAO,CAACH,UAAU,CAACW,QAAQ,CAACF,SAAS,CAAC,GAAGA,SAAS,GAAG,IAAI,CAACN,OAAO,CAACF,gBAAgB;WAC/F;UACDW,UAAU,EAAER,UAAU,IAAG;YACvB,IAAIA,UAAU,CAACC,SAAS,KAAK,IAAI,CAACF,OAAO,CAACF,gBAAgB,EAAE;cAC1D,OAAO,EAAE;;YAGX,OAAO;cAAES,KAAK,EAAE,eAAeN,UAAU,CAACC,SAAS;YAAE,CAAE;;QAE1D;MACF;IACF,EACF;GACF;EAEDQ,WAAWA,CAAA;IACT,OAAO;MACLC,YAAY,EAAGL,SAAiB,IAAK,CAAC;QAAEM;MAAQ,CAAE,KAAI;QACpD,IAAI,CAAC,IAAI,CAACZ,OAAO,CAACH,UAAU,CAACW,QAAQ,CAACF,SAAS,CAAC,EAAE;UAChD,OAAO,KAAK;;QAGd,OAAO,IAAI,CAACN,OAAO,CAACJ,KAAK,CACtBiB,GAAG,CAACC,IAAI,IAAIF,QAAQ,CAACG,gBAAgB,CAACD,IAAI,EAAE;UAAEZ,SAAS,EAAEI;QAAS,CAAE,CAAC,CAAC,CACtEU,KAAK,CAACC,QAAQ,IAAIA,QAAQ,CAAC;OAC/B;MAEDC,cAAc,EAAEA,CAAA,KAAM,CAAC;QAAEN;MAAQ,CAAE,KAAI;QACrC,OAAO,IAAI,CAACZ,OAAO,CAACJ,KAAK,CACtBiB,GAAG,CAACC,IAAI,IAAIF,QAAQ,CAACO,eAAe,CAACL,IAAI,EAAE,WAAW,CAAC,CAAC,CACxDE,KAAK,CAACC,QAAQ,IAAIA,QAAQ,CAAC;;KAEjC;GACF;EAEDG,oBAAoBA,CAAA;IAClB,OAAO;MACL,aAAa,EAAEC,CAAA,KAAM,IAAI,CAACC,MAAM,CAACV,QAAQ,CAACD,YAAY,CAAC,MAAM,CAAC;MAC9D,aAAa,EAAEY,CAAA,KAAM,IAAI,CAACD,MAAM,CAACV,QAAQ,CAACD,YAAY,CAAC,QAAQ,CAAC;MAChE,aAAa,EAAEa,CAAA,KAAM,IAAI,CAACF,MAAM,CAACV,QAAQ,CAACD,YAAY,CAAC,OAAO,CAAC;MAC/D,aAAa,EAAEc,CAAA,KAAM,IAAI,CAACH,MAAM,CAACV,QAAQ,CAACD,YAAY,CAAC,SAAS;KACjE;;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}