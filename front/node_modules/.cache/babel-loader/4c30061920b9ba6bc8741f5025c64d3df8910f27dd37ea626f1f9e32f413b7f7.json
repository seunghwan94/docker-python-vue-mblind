{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4abee8a4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"d-flex\",\n  style: {\n    \"flex-direction\": \"column\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"category-buttons\"\n};\nconst _hoisted_3 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BoardList = _resolveComponent(\"BoardList\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.categories, (value, key) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      type: \"button\",\n      class: _normalizeClass([\"btn btn-outline-primary m-2\", {\n        active: $data.selectedCategory === key\n      }]),\n      key: key,\n      onClick: $event => $options.selectCategory(key)\n    }, _toDisplayString(value), 11 /* TEXT, CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), _createVNode(_component_BoardList, {\n    posts: $data.posts,\n    selectedCategory: $data.selectedCategory,\n    totalPosts: $data.totalPosts,\n    currentPage: $data.currentPage,\n    perPage: $data.perPage,\n    onUpdatePage: $options.updatePage,\n    onUpdateStatus: $options.setActiveTab\n  }, null, 8 /* PROPS */, [\"posts\", \"selectedCategory\", \"totalPosts\", \"currentPage\", \"perPage\", \"onUpdatePage\", \"onUpdateStatus\"])]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","categories","value","key","type","_normalizeClass","active","selectedCategory","onClick","$event","$options","selectCategory","_hoisted_3","_createVNode","_component_BoardList","posts","totalPosts","currentPage","perPage","onUpdatePage","updatePage","onUpdateStatus","setActiveTab"],"sources":["/var/www/front/src/components/Board/MainBoard.vue"],"sourcesContent":["<template>\n    <div class=\"d-flex\" style=\"flex-direction: column;\">\n      <div class=\"category-buttons\">\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-primary m-2\"\n          :class=\"{ active: selectedCategory === key }\"\n          v-for=\"(value, key) in categories\"\n          :key=\"key\"\n          @click=\"selectCategory(key)\">\n          {{ value }}\n        </button>\n      </div>\n      \n      <BoardList \n        :posts=\"posts\"\n        :selectedCategory=\"selectedCategory\"\n        :totalPosts=\"totalPosts\"\n        :currentPage=\"currentPage\"\n        :perPage=\"perPage\"\n        @updatePage=\"updatePage\"\n        @updateStatus=\"setActiveTab\"\n      />\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import BoardList from './BoardList.vue';\n  \n  export default {\n    data() {\n      return {\n        selectedCategory: '1',\n        categories: {},\n        posts: [],\n        totalPosts: 0,\n        currentPage: 1,\n        perPage: 10,\n      }\n    },\n    created() {\n      this.fetchCategories();\n      this.fetchPosts();\n    },\n    methods: {\n      async fetchCategories() {\n        try {\n          const response = await axios.get(`${this.$BackURL}/category`);\n          if (response.data.status === 'success') {\n            this.categories = response.data.res.reduce((acc, category) => {\n              acc[category.id] = category.name;\n              return acc;\n            }, {});\n          } else {\n            console.error('Failed to fetch categories:', response.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching categories:', error);\n        }\n      },\n      async fetchPosts(page = this.currentPage) {\n        try {\n          const response = await axios.get(`${this.$BackURL}/boardList`, {\n            params: {\n              category_id: this.selectedCategory,\n              page: page,\n              per_page: this.perPage\n            }\n          });\n          if (response.data.status === 'success') {\n            this.posts = response.data.posts;\n            this.totalPosts = response.data.total_posts;\n          } else {\n            console.error('Failed to fetch posts:', response.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching posts:', error);\n        }\n      },\n      selectCategory(key) {\n        this.selectedCategory = key;\n        this.currentPage = 1; // Reset to the first page when category changes\n        this.fetchPosts();\n      },\n      updatePage(page) {\n        this.currentPage = page;\n        this.fetchPosts(page);\n      },\n      setActiveTab(tab) {\n        // Implement tab switching logic if needed\n        console.log('Tab switched to:', tab);\n      }\n    },\n    components: {\n      BoardList\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .container {\n    padding: 20px;\n  }\n  .category-buttons {\n    margin-bottom: 20px;\n  }\n  </style>\n  "],"mappings":";;;EACSA,KAAK,EAAC,QAAQ;EAACC,KAA+B,EAA/B;IAAA;EAAA;;;EACbD,KAAK,EAAC;AAAkB;mBAFnC;;;uBACIE,mBAAA,CAsBM,OAtBNC,UAsBM,GArBJC,mBAAA,CAUM,OAVNC,UAUM,I,kBATJH,mBAAA,CAQSI,SAAA,QAXjBC,WAAA,CAOiCC,KAAA,CAAAC,UAAU,EAP3C,CAOkBC,KAAK,EAAEC,GAAG;yBAJpBT,mBAAA,CAQS;MAPPU,IAAI,EAAC,QAAQ;MACbZ,KAAK,EALfa,eAAA,EAKgB,6BAA6B;QAAAC,MAAA,EACjBN,KAAA,CAAAO,gBAAgB,KAAKJ;MAAG;MAEzCA,GAAG,EAAEA,GAAG;MACRK,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACR,GAAG;wBACvBD,KAAK,gCAVlBU,UAAA;oCAcMC,YAAA,CAQEC,oBAAA;IAPCC,KAAK,EAAEf,KAAA,CAAAe,KAAK;IACZR,gBAAgB,EAAEP,KAAA,CAAAO,gBAAgB;IAClCS,UAAU,EAAEhB,KAAA,CAAAgB,UAAU;IACtBC,WAAW,EAAEjB,KAAA,CAAAiB,WAAW;IACxBC,OAAO,EAAElB,KAAA,CAAAkB,OAAO;IAChBC,YAAU,EAAET,QAAA,CAAAU,UAAU;IACtBC,cAAY,EAAEX,QAAA,CAAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}