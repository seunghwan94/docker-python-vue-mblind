{"ast":null,"code":"export default {\n  props: {\n    selectBoard: Object\n  }\n};","map":{"version":3,"names":["props","selectBoard","Object"],"sources":["/var/www/front/src/components/Board/BoardView.vue"],"sourcesContent":["<!-- <template>\n    <div class=\"card border-success mb-3\" style=\"max-width: 100%\">\n        <div class=\"card-header d-flex\" style=\"justify-content: space-between;\">\n            {{ selectBoard.category_name }}\n            <p class=\"card-text\">{{ selectBoard.user_username }}</p>\n        </div>\n        <div class=\"card-body\">\n            <div class=\"d-flex justify-content-between\">\n                <h4 class=\"card-title mt-3 mb-3\" v-if=\"!isEditingPost\">{{ selectBoard.title }}</h4>\n                <input v-else v-model=\"editTitle\" class=\"form-control mt-3 mb-3\" />\n                <div class=\"dropdown\">\n                    <div type=\"button\" @click=\"toggleDropdown\" style=\"cursor: pointer;\">\n                        <i class=\"bi bi-three-dots-vertical\"></i>\n                    </div>\n                    <div v-if=\"dropdownVisible\" class=\"dropdown-menu show\">\n                        <button class=\"dropdown-item\" @click=\"editPost(selectBoard.post_id)\">수정</button>\n                        <button class=\"dropdown-item\" @click=\"deletePost\">삭제</button>\n                    </div>\n                </div>\n            </div>\n            <div v-if=\"!isEditingPost\">{{ stripHtml(selectBoard.content) }}</div>\n            <textarea v-else v-model=\"editContent\" class=\"form-control mb-3\" rows=\"5\"></textarea>\n            <div v-if=\"isEditingPost\" class=\"d-flex justify-content-end mb-3\">\n                <button class=\"btn btn-primary btn-sm\" @click=\"savePostEdit\">저장</button>\n                <button class=\"btn btn-secondary btn-sm ms-2\" @click=\"cancelPostEdit\">취소</button>\n            </div>\n            <div class=\"d-flex mt-5\" style=\"justify-content: space-between;\">\n                <p class=\"text-body-tertiary pe-2 m-0\">{{ formatDate(selectBoard.create_date) }}</p>\n                <div class=\"d-flex justify-content-end\">\n                    <p class=\"text-body-tertiary pe-2 m-0\"><i class=\"bi bi-eye\"></i> {{ selectBoard.view_count }}</p>\n                    <p class=\"text-body-tertiary pe-2 m-0\"><i class=\"bi bi-chat-dots\"></i> {{ commentCount }}</p>\n                </div>\n            </div>\n        </div>\n        <div class=\"card bg-light m-2\" style=\"max-width: 100%;\">\n            <div class=\"card-header\">댓글</div>\n            <div v-if=\"comments.length > 0\" class=\"d-flex p-3 pb-0 \" style=\"display:flex; flex-direction: column;\">\n                <div v-for=\"(commentdata, index) in comments\" :key=\"index\" class=\"card border-light mb-3\" style=\"max-width: 100%;\">\n                    <div class=\"card-body align-items-center\" style=\"display:flex;flex-direction: row;\">\n                        <img :src=\"require(`../assets/img/${commentdata.img}`)\" style=\"width: 50px;border-radius: 50%;\">\n                        <div class=\"w-100 ps-4\">\n                            <div class=\"d-flex\" style=\"align-items: center;justify-content: space-between;\">\n                                <p style=\"font-weight: bold; margin:0;\">{{ commentdata.name }}</p>\n                                <div class=\"d-flex\" v-if=\"commentdata.name === user_name\">\n                                    <div type=\"button\" class=\"m-0\" style=\"font-size: 16px;\" @click=\"toggleEdit(index)\"><i class=\"bi bi-pencil-square\"></i></div>\n                                    <div type=\"button\" class=\"m-0 ms-1\" style=\"font-size: 16px;\" @click=\"commentDelete(index, commentdata.id)\"><i class=\"bi bi-trash\"></i></div>\n                                </div>\n                            </div>\n\n                            <div v-if=\"commentdata.isEditing\">\n                                <textarea v-model=\"commentdata.editContent\" class=\"form-control\" rows=\"2\"></textarea>\n                                <div class=\"d-flex mt-2 mb-2\" style=\"justify-content: flex-end;\">\n                                    <button class=\"btn btn-primary btn-sm \" @click=\"saveEdit(index, commentdata.id)\">수정</button>\n                                    <button class=\"btn btn-secondary btn-sm  ms-2\" @click=\"cancelEdit(index)\">취소</button>\n                                </div>\n                            </div>\n\n                            <p v-else class=\"card-text m-0\">{{ commentdata.content }}</p>\n\n                            <p class=\"text-body-tertiary m-0\" style=\"text-align: end; font-size: 13px;\">{{ formatDate(commentdata.create_date) }}</p>\n                        </div>\n                    </div>\n                </div>\n                <hr style=\"margin-bottom:0\"/>\n            </div>\n            <div class=\"card-body d-flex pb-0\">\n                <div class=\"d-flex\" style=\"align-items: flex-start\">\n                    <img :src=\"require(`../assets/img/${user_img}`)\" style=\"width: 50px;border-radius: 50%;\">\n                </div>\n                <div class=\"form-control ms-2\" id=\"comment\" style=\"height: auto; min-height: 80px;\">\n                    <div contenteditable=\"false\" style=\"font-weight: bold;\">{{ user_name }}</div>\n                    <div contenteditable=\"true\" ref=\"editableContent\" @input=\"updateComment\" style=\"outline: none; border: 2px solid transparent;\"></div>\n                </div>\n            </div>\n            <div class=\"d-flex justify-content-end\">\n                <button type=\"button\" class=\"btn btn-outline-primary m-3\" @click=\"commentAdd(selectBoard.post_id)\">등록</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            comments: [],\n            user_img: sessionStorage.getItem('user_img'),\n            user_name: sessionStorage.getItem('user_name'),\n            commentText: '',\n            commentCount: this.selectBoard.comment_count,\n            dropdownVisible: false,\n            isEditingPost: false,\n            editTitle: '',\n            editContent: ''\n        };\n    },\n    props: {\n        selectBoard: Object\n    },\n    mounted() {\n        this.commentList();\n    },\n    methods: {\n        toggleDropdown() {\n            this.dropdownVisible = !this.dropdownVisible;\n        },\n        editPost(post_id) {\n            this.editTitle = this.selectBoard.title;\n            this.editContent = this.stripHtml(this.selectBoard.content);\n            this.isEditingPost = true;\n            this.dropdownVisible = false;\n            this.$emit('updateStatusEdit',post_id)\n        },\n        cancelPostEdit() {\n            this.isEditingPost = false;\n        },\n        async savePostEdit() {\n            try {\n                const response = await axios.post('http://127.0.0.1:3000/postedit', {\n                    post_id: this.selectBoard.post_id,\n                    title: this.editTitle,\n                    content: this.editContent\n                });\n                if (response.data.status === 'success') {\n                    // this.selectBoard.title = this.editTitle;\n                    // this.selectBoard.content = this.editContent;\n                    this.isEditingPost = false;\n                } else {\n                    console.error('Failed to edit post');\n                }\n            } catch (error) {\n                console.error('Error editing post:', error);\n            }\n        },\n        async deletePost() {\n            if (confirm(\"삭제하시겠습니까?\")) {\n                try {\n                    const response = await axios.post('http://127.0.0.1:3000/postdelete', {\n                        post_id: this.selectBoard.post_id\n                    });\n                    if (response.data.status === 'success') {\n                        alert('게시글이 삭제되었습니다.');\n                        this.$emit('postDeleted', this.selectBoard.post_id);\n                    } else {\n                        console.error('Failed to delete post');\n                    }\n                } catch (error) {\n                    console.error('Error deleting post:', error);\n                }\n            }\n        },\n        toggleEdit(index) {\n            this.comments[index].isEditing = !this.comments[index].isEditing;\n            if (this.comments[index].isEditing) {\n                this.comments[index].editContent = this.comments[index].content;\n            }\n        },\n        cancelEdit(index) {\n            this.comments[index].isEditing = false;\n        },\n        async saveEdit(index, comment_id) {\n            if (confirm(\"수정하시겠습니까?\")) {\n                const editedComment = this.comments[index].editContent;\n                try {\n                    const response = await axios.post('http://127.0.0.1:3000/commentedit', {\n                        comment_id: comment_id,\n                        content: editedComment\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments[index].content = editedComment;\n                        this.comments[index].isEditing = false;\n                    } else {\n                        console.error('Failed to edit comment');\n                    }\n                } catch (error) {\n                    console.error('Error editing comment:', error);\n                }\n            }\n        },\n        async commentDelete(index, comment_id) {\n            if (confirm(\"삭제하시겠습니까?\")) {\n                try {\n                    const response = await axios.post('http://127.0.0.1:3000/commentdelete', {\n                        comment_id: comment_id\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments.splice(index, 1); // 배열에서 해당 댓글을 완전히 제거합니다.\n                        this.commentCount -= 1;         // 댓글 수를 하나 줄입니다.\n                    } else {\n                        console.error('Failed to delete comment');\n                    }\n                } catch (error) {\n                    console.error('Error deleting comment:', error);\n                }\n            }\n        },\n        updateComment(event) {\n            this.commentText = event.target.innerText;\n        },\n        formatDate(dateString) {\n            let date = new Date(dateString);\n            let year = date.getFullYear();\n            let month = ('0' + (date.getMonth() + 1)).slice(-2);\n            let day = ('0' + date.getDate()).slice(-2);\n            let hours = ('0' + date.getHours()).slice(-2);\n            let minutes = ('0' + date.getMinutes()).slice(-2);\n            return `${year}-${month}-${day} ${hours}:${minutes}`;\n        },\n        stripHtml(html) {\n            let doc = new DOMParser().parseFromString(html, 'text/html');\n            let text = doc.body.textContent || \"\";\n            return text;\n        },\n        async commentAdd(post_id) {\n            try {\n                const user_id = sessionStorage.getItem('user_id');\n                const comment = this.commentText;\n                const response = await axios.get(`http://127.0.0.1:3000/commentadd`, {\n                    params: {\n                        post_id: post_id,\n                        user_id: user_id,\n                        comment: comment\n                    }\n                });\n                if (response.data.status === 'success') {\n                    this.commentList();\n                    this.commentText = '';\n                    this.$refs.editableContent.innerText = '';\n                    this.commentCount = this.commentCount + 1;\n                    alert('댓글이 등록되었습니다.');\n                } else {\n                    console.log('댓글 등록 실패');\n                }\n            } catch (error) {\n                console.error('Error fetching posts:', error);\n            }\n        },\n        async commentList() {\n            try {\n                const response = await axios.get(`http://127.0.0.1:3000/commentlist`, {\n                    params: {\n                        post_id: this.selectBoard.post_id\n                    }\n                });\n                if (response.data.status === 'success') {\n                    this.comments = response.data.res.map(comment => ({\n                        ...comment,\n                        isEditing: false,\n                        editContent: ''\n                    }));\n                } else {\n                    console.error('Failed to fetch comments:', response.data.message);\n                }\n            } catch (error) {\n                console.error('Error fetching comments:', error);\n            }\n        }\n    }\n};\n</script>\n\n<style>\ndiv[contenteditable=\"true\"]:focus {\n    border-color: #5FC8A5;\n}\n</style> -->\n<template>\n    {{ selectBoard }}\n    <div class=\"card border-success mb-3\" style=\"max-width: 100%\">\n        <div class=\"card-header d-flex\" style=\"justify-content: space-between;\">\n            {{ selectBoard.category_name }}\n            <p class=\"card-text\">{{ selectBoard.user_username }}</p>\n        </div>\n        test\n    </div>\n</template>\n<script>\nexport default {\n    props: {\n        selectBoard:Object,\n    }\n}\n\n</script>"],"mappings":"AAuRA,eAAe;EACXA,KAAK,EAAE;IACHC,WAAW,EAACC;EAChB;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}