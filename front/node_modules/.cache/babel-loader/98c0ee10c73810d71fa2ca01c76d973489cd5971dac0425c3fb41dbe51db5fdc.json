{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  id: \"loading\"\n}, \"Loading...\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HeaderView = _resolveComponent(\"HeaderView\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_HeaderView, {\n    onUpdateMainMenu: $options.updateMainMenu,\n    MainMenu: $data.MainMenu\n  }, null, 8 /* PROPS */, [\"onUpdateMainMenu\", \"MainMenu\"])]);\n}","map":{"version":3,"names":["id","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_HeaderView","onUpdateMainMenu","$options","updateMainMenu","MainMenu","$data"],"sources":["/var/www/front/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div id=\"loading\">Loading...</div>\n    <HeaderView @updateMainMenu=\"updateMainMenu\" :MainMenu=\"MainMenu\"/>\n  </div>\n</template>\n\n<script>\nimport HeaderView from './components/HeaderView.vue';\n\nexport default {\n  name: \"App\",\n  data() {\n    return{\n      MainMenu: 'home'\n    }\n  },\n  mounted() {\n    this.loadTheme();\n  },\n  methods: {\n    async loadTheme() {\n      try {\n        const response = await fetch(\"http://localhost:3000/Theme\");\n        const data = await response.json();\n\n        if (data.status === 'success') {\n          this.updateTheme(data.res[0].url);\n        } else {\n          console.error('Failed to load theme:', data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching theme:', error);\n      }\n    },\n    updateTheme(url) {\n      const linkTag = document.querySelector(\"link[rel=stylesheet]\");\n      if (linkTag) {\n        linkTag.href = url;\n      } else {\n        const newLinkTag = document.createElement(\"link\");\n        newLinkTag.rel = \"stylesheet\";\n        newLinkTag.href = url;\n        document.head.appendChild(newLinkTag);\n      }\n\n      // Hide loading screen after theme is applied\n      setTimeout(() => {\n        document.getElementById('loading').style.display = 'none';  \n      }, 500);\n      \n    },\n    updateMainMenu(newMainMenu) {\n      this.MainMenu = newMainMenu;\n    },\n  },\n  components: {\n    HeaderView,\n  }\n};\n</script>\n\n<style>\n/* 데스크탑 스타일 */\n@media (min-width: 1024px) {\n  .header, .body, .footer {\n    padding: 0 200px;\n  }\n}\n\n/* 태블릿 스타일 */\n@media (min-width: 768px) and (max-width: 1023px) {\n  .header, .body, .footer {\n    padding: 0 50px;\n  }\n}\n\n/* 모바일 스타일 */\n@media (max-width: 767px) {\n  .header, .body, .footer {\n    padding: 0 20px;\n  }\n\n  .modal-dialog {\n    max-width: 90%;\n  }\n  \n  .d-flex {\n    flex-direction: column;\n  }\n}\n\n#loading {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: white;\n  color: black;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  z-index: 1000;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;gCACXC,mBAAA,CAAkC;EAA7BD,EAAE,EAAC;AAAS,GAAC,YAAU;;;uBAD9BE,mBAAA,CAGM,OAHNC,UAGM,GAFJC,UAAkC,EAClCC,YAAA,CAAmEC,qBAAA;IAAtDC,gBAAc,EAAEC,QAAA,CAAAC,cAAc;IAAGC,QAAQ,EAAEC,KAAA,CAAAD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}