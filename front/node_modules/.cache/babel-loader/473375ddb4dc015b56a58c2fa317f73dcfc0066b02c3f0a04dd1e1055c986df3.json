{"ast":null,"code":"import { toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"d-flex flex-column\"\n};\nconst _hoisted_2 = {\n  class: \"category-buttons\",\n  style: {\n    \"margin\": \"10px\"\n  }\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  class: \"d-flex justify-content-end\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BoardList = _resolveComponent(\"BoardList\");\n  const _component_Pagintion = _resolveComponent(\"Pagintion\");\n  const _component_BoardView = _resolveComponent(\"BoardView\");\n  const _component_BoardWrite = _resolveComponent(\"BoardWrite\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createTextVNode(_toDisplayString($data.selectBoard) + \" \", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.categories, (value, key) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      type: \"button\",\n      class: _normalizeClass([\"btn btn-outline-primary m-2\", {\n        active: $data.selectedCategory === key\n      }]),\n      key: key,\n      onClick: $event => $options.selectCategory(key)\n    }, _toDisplayString(value), 11 /* TEXT, CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 게시판 목록 \"), $data.status == 'BoardList' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createVNode(_component_BoardList, {\n    posts: $data.posts,\n    selectedCategory: $data.selectedCategory,\n    onSelectPost: $options.SelectPost\n  }, null, 8 /* PROPS */, [\"posts\", \"selectedCategory\", \"onSelectPost\"]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-outline-primary m-2\",\n    onClick: _cache[0] || (_cache[0] = $event => $options.changeStatus('BoardWrite'))\n  }, \"글쓰기\")]), _createVNode(_component_Pagintion, {\n    totalPosts: $data.totalPosts,\n    currentPage: $data.currentPage,\n    perPage: $data.perPage,\n    onUpdatePage: $options.updatePage\n  }, null, 8 /* PROPS */, [\"totalPosts\", \"currentPage\", \"perPage\", \"onUpdatePage\"])])) : $data.status == 'BoardView' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 1\n  }, [_createCommentVNode(\" 게시판 보기 \"), _createVNode(_component_BoardView, {\n    selectBoard: $data.selectBoard,\n    onChangeStatus: $options.changeStatus\n  }, null, 8 /* PROPS */, [\"selectBoard\", \"onChangeStatus\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : $data.status == 'BoardWrite' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 글쓰기 \"), _createVNode(_component_BoardWrite, {\n    categories: $data.categories,\n    BackURL: $data.BackURL,\n    SelectBoardPost: _ctx.SelectBoardPost\n  }, null, 8 /* PROPS */, [\"categories\", \"BackURL\", \"SelectBoardPost\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","style","key","_createElementBlock","_Fragment","_createTextVNode","_toDisplayString","$data","selectBoard","_createElementVNode","_hoisted_1","_hoisted_2","_renderList","categories","value","type","_normalizeClass","active","selectedCategory","onClick","$event","$options","selectCategory","_hoisted_3","_createCommentVNode","status","_hoisted_4","_createVNode","_component_BoardList","posts","onSelectPost","SelectPost","_hoisted_5","_cache","changeStatus","_component_Pagintion","totalPosts","currentPage","perPage","onUpdatePage","updatePage","_component_BoardView","onChangeStatus","_component_BoardWrite","BackURL","SelectBoardPost","_ctx"],"sources":["/var/www/front/src/components/Board/MainBoard.vue"],"sourcesContent":["<template>{{ selectBoard }}\n    <div class=\"d-flex flex-column\">\n      <div class=\"category-buttons\" style=\"margin:10px\">\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-primary m-2\"\n          :class=\"{ active: selectedCategory === key }\"\n          v-for=\"(value, key) in categories\"\n          :key=\"key\"\n          @click=\"selectCategory(key)\"\n          >\n          {{ value }}\n        </button>\n      </div>\n      <!-- 게시판 목록 -->\n      <div v-if=\"status == 'BoardList'\"> \n        <BoardList :posts=\"posts\" :selectedCategory=\"selectedCategory\" @SelectPost=\"SelectPost\"/>\n        <div class=\"d-flex justify-content-end\">\n          <button type=\"button\" class=\"btn btn-outline-primary m-2\" @click=\"changeStatus('BoardWrite')\">글쓰기</button>\n        </div>\n        <Pagintion :totalPosts=\"totalPosts\" :currentPage=\"currentPage\" :perPage=\"perPage\" @updatePage=\"updatePage\"/>\n      </div>\n      <!-- 게시판 보기 -->\n      <BoardView v-else-if=\"status == 'BoardView'\" :selectBoard=\"selectBoard\" @changeStatus=\"changeStatus\"/> \n      <!-- 글쓰기 -->\n      <BoardWrite v-else-if=\"status == 'BoardWrite'\" :categories=\"categories\" :BackURL=\"BackURL\" :SelectBoardPost=\"SelectBoardPost\"/>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import BoardList from './BoardList.vue';\n  import BoardView from './BoardView.vue';\n  import BoardWrite from './BoardWrite.vue';\n  import Pagintion from '../Pagintion.vue';\n  \n  export default {\n    data() {\n      return {\n        // 카테고리 목록 및 선택\n        categories: {},\n        selectedCategory: '1',\n        // 게시글\n        posts: [],\n        // 페이징\n        totalPosts: 0,\n        currentPage: 1,\n        perPage: 10,\n        // 상태관리\n        status: 'BoardList',\n        // 글쓰기할때 setup 사용( this 작동 안함 )\n        BackURL: this.$BackURL,\n        selectBoard: '',\n      }\n    },\n    created() {\n      this.fetchCategories();\n      this.fetchPosts();\n    },\n    watch: {\n        // Watcher for selectedCategory\n        selectedCategory(newCategory, oldCategory) {\n            if (newCategory !== oldCategory) {\n                this.currentPage = 1; // Reset to the first page when category changes\n                this.posts = [],\n                this.fetchPosts(); // Fetch posts for the new category\n            }\n        }\n    },\n    methods: {\n      async fetchCategories() {\n        try {\n          const response = await axios.get(`${this.$BackURL}/category`);\n          if (response.data.status === 'success') {\n            this.categories = response.data.res.reduce((acc, category) => {\n              acc[category.id] = category.name;\n              return acc;\n            }, {});\n          } else {\n            console.error('Failed to fetch categories:', response.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching categories:', error);\n        }\n      },\n      async fetchPosts(page = this.currentPage) {\n        try {\n          // api 요청 \n          const postsResponse = await axios.get(`${this.$BackURL}/boardList`, {\n            params: {\n              category_id: this.selectedCategory,\n              page: page,\n              per_page: this.perPage\n            }\n          });\n          // response\n          if (postsResponse.data.status === 'success') {\n            this.posts = postsResponse.data.res;\n          } else {\n            console.error('Failed to fetch posts:', postsResponse.data.message);\n          }\n  \n          // total posts\n          const totalPostsResponse = await axios.get(`${this.$BackURL}/boardListPage`, {\n            params: {\n              category_id: this.selectedCategory\n            }\n          });\n          // response\n          if (totalPostsResponse.data.status === 'success') {\n            if (totalPostsResponse.data.res[0].total_posts == 0){\n              // 데이터가 없는경우\n              this.totalPosts = 1; \n            }else{\n              this.totalPosts = totalPostsResponse.data.res[0].total_posts;\n            }\n          } else {\n            console.error('Failed to fetch total posts:', totalPostsResponse.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching posts or total posts:', error);\n        }\n      },\n      selectCategory(key) {\n        this.selectedCategory = key;\n        this.currentPage = 1; // Reset to the first page when category changes\n        this.status = 'BoardList';\n        this.fetchPosts();\n      },\n      updatePage(page) {\n        this.currentPage = page;\n        this.fetchPosts(page);\n      },\n      SelectPost(board_id,edit=false){\n        const SelectBoardPost = this.posts.find(board => board.board_id === board_id);\n        this.selectBoard = SelectBoardPost;\n        \n        if (edit){\n          this.changeStatus('BoardWrite');\n        }else{\n          this.changeStatus('BoardView');\n        }\n      },\n      changeStatus(target){\n        this.status = target;\n      },\n    },\n    components: {\n      BoardList,\n      BoardView,\n      BoardWrite,\n      Pagintion,\n    }\n  }\n  </script>\n  \n  <style>\n  .container {\n    padding: 20px;\n  }\n  .category-buttons {\n    margin-bottom: 20px;\n  }\n  /* 기본 카드 스타일 */\n  .card.border-primary {\n    transition: background-color 0.3s, box-shadow 0.3s, color 0.3s; /* 배경색, 그림자, 글자색에 대해 transition 설정 */\n  }\n  /* 카드에 마우스 오버 시 효과 */\n  .card.border-primary:hover {\n    background-color: #78C2AD; /* 배경색 변경 */\n    color: white; /* 텍스트 색상 변경 */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* 카드에 그림자 추가 */\n  }\n  </style>\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAoB;;EACxBA,KAAK,EAAC,kBAAkB;EAACC,KAAmB,EAAnB;IAAA;EAAA;;mBAFpC;;EAAAC,GAAA;AAAA;;EAiBaF,KAAK,EAAC;AAA4B;;;;;;uBAjB/CG,mBAAA,CAAAC,SAAA,SAAAC,gBAAA,CAAAC,gBAAA,CAAaC,KAAA,CAAAC,WAAW,IAAG,GACvB,iBAAAC,mBAAA,CAyBM,OAzBNC,UAyBM,GAxBJD,mBAAA,CAWM,OAXNE,UAWM,I,kBAVJR,mBAAA,CASSC,SAAA,QAZjBQ,WAAA,CAOiCL,KAAA,CAAAM,UAAU,EAP3C,CAOkBC,KAAK,EAAEZ,GAAG;yBAJpBC,mBAAA,CASS;MARPY,IAAI,EAAC,QAAQ;MACbf,KAAK,EALfgB,eAAA,EAKgB,6BAA6B;QAAAC,MAAA,EACjBV,KAAA,CAAAW,gBAAgB,KAAKhB;MAAG;MAEzCA,GAAG,EAAEA,GAAG;MACRiB,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACpB,GAAG;wBAEvBY,KAAK,gCAXlBS,UAAA;oCAcMC,mBAAA,YAAe,EACJjB,KAAA,CAAAkB,MAAM,mB,cAAjBtB,mBAAA,CAMM,OArBZuB,UAAA,GAgBQC,YAAA,CAAyFC,oBAAA;IAA7EC,KAAK,EAAEtB,KAAA,CAAAsB,KAAK;IAAGX,gBAAgB,EAAEX,KAAA,CAAAW,gBAAgB;IAAGY,YAAU,EAAET,QAAA,CAAAU;0EAC5EtB,mBAAA,CAEM,OAFNuB,UAEM,GADJvB,mBAAA,CAA0G;IAAlGM,IAAI,EAAC,QAAQ;IAACf,KAAK,EAAC,6BAA6B;IAAEmB,OAAK,EAAAc,MAAA,QAAAA,MAAA,MAAAb,MAAA,IAAEC,QAAA,CAAAa,YAAY;KAAgB,KAAG,E,GAEnGP,YAAA,CAA4GQ,oBAAA;IAAhGC,UAAU,EAAE7B,KAAA,CAAA6B,UAAU;IAAGC,WAAW,EAAE9B,KAAA,CAAA8B,WAAW;IAAGC,OAAO,EAAE/B,KAAA,CAAA+B,OAAO;IAAGC,YAAU,EAAElB,QAAA,CAAAmB;yFAG3EjC,KAAA,CAAAkB,MAAM,mB,cAA5BtB,mBAAA,CAAsGC,SAAA;IAvB5GF,GAAA;EAAA,IAsBMsB,mBAAA,YAAe,EACfG,YAAA,CAAsGc,oBAAA;IAAxDjC,WAAW,EAAED,KAAA,CAAAC,WAAW;IAAGkC,cAAY,EAAErB,QAAA,CAAAa;iHAEhE3B,KAAA,CAAAkB,MAAM,oB,cAA7BtB,mBAAA,CAA+HC,SAAA;IAzBrIF,GAAA;EAAA,IAwBMsB,mBAAA,SAAY,EACZG,YAAA,CAA+HgB,qBAAA;IAA/E9B,UAAU,EAAEN,KAAA,CAAAM,UAAU;IAAG+B,OAAO,EAAErC,KAAA,CAAAqC,OAAO;IAAGC,eAAe,EAAEC,IAAA,CAAAD;4HAzBnHrB,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}