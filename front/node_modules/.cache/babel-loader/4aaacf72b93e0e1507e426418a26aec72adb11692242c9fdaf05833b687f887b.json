{"ast":null,"code":"import axios from 'axios';\nimport BoardList from './BoardList.vue';\nexport default {\n  data() {\n    return {\n      selectedCategory: '1',\n      categories: {},\n      posts: [],\n      totalPosts: 0,\n      currentPage: 1,\n      perPage: 10\n    };\n  },\n  created() {\n    this.fetchCategories();\n    this.fetchPosts();\n  },\n  methods: {\n    async fetchCategories() {\n      try {\n        console.log(`${this.$BackURL}/category`);\n        const response = await axios.get(`${this.$BackURL}/category`);\n        if (response.data.status === 'success') {\n          this.categories = response.data.res.reduce((acc, category) => {\n            acc[category.id] = category.name;\n            return acc;\n          }, {});\n        } else {\n          console.error('Failed to fetch categories:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    },\n    async fetchPosts(page = this.currentPage) {\n      try {\n        // Fetch posts\n        const postsResponse = await axios.get(`${this.$BackURL}/boardList`, {\n          params: {\n            category_id: this.selectedCategory,\n            page: page,\n            per_page: this.perPage\n          }\n        });\n        if (postsResponse.data.status === 'success') {\n          this.posts = postsResponse.data.res;\n        } else {\n          console.error('Failed to fetch posts:', postsResponse.data.message);\n        }\n\n        // Fetch total posts\n        const totalPostsResponse = await axios.get(`${this.$BackURL}/boardListPage`, {\n          params: {\n            category_id: this.selectedCategory\n          }\n        });\n        console.log(totalPostsResponse.data);\n        if (totalPostsResponse.data.status === 'success') {\n          this.totalPosts = totalPostsResponse.data.res.total_posts;\n        } else {\n          console.error('Failed to fetch total posts:', totalPostsResponse.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching posts or total posts:', error);\n      }\n    },\n    selectCategory(key) {\n      this.selectedCategory = key;\n      this.currentPage = 1; // Reset to the first page when category changes\n      this.fetchPosts();\n    },\n    updatePage(page) {\n      this.currentPage = page;\n      this.fetchPosts(page);\n    },\n    setActiveTab(tab) {\n      // Implement tab switching logic if needed\n      console.log('Tab switched to:', tab);\n    }\n  },\n  components: {\n    BoardList\n  }\n};","map":{"version":3,"names":["axios","BoardList","data","selectedCategory","categories","posts","totalPosts","currentPage","perPage","created","fetchCategories","fetchPosts","methods","console","log","$BackURL","response","get","status","res","reduce","acc","category","id","name","error","message","page","postsResponse","params","category_id","per_page","totalPostsResponse","total_posts","selectCategory","key","updatePage","setActiveTab","tab","components"],"sources":["/var/www/front/src/components/Board/MainBoard.vue"],"sourcesContent":["<template>{{posts}}\n    <div class=\"d-flex flex-column\">\n      <div class=\"category-buttons\">\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-primary m-2\"\n          :class=\"{ active: selectedCategory === key }\"\n          v-for=\"(value, key) in categories\"\n          :key=\"key\"\n          @click=\"selectCategory(key)\">\n          {{ value }}\n        </button>\n      </div>\n      \n      <BoardList \n        :posts=\"posts\"\n        :selectedCategory=\"selectedCategory\"\n        :totalPosts=\"totalPosts\"\n        :currentPage=\"currentPage\"\n        :perPage=\"perPage\"\n        @updatePage=\"updatePage\"\n        @updateStatus=\"setActiveTab\"\n      />\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import BoardList from './BoardList.vue';\n  \n  export default {\n    data() {\n      return {\n        selectedCategory: '1',\n        categories: {},\n        posts: [],\n        totalPosts: 0,\n        currentPage: 1,\n        perPage: 10,\n      }\n    },\n    created() {\n      this.fetchCategories();\n      this.fetchPosts();\n    },\n    methods: {\n      async fetchCategories() {\n        try {\n          console.log(`${this.$BackURL}/category`);\n          const response = await axios.get(`${this.$BackURL}/category`);\n          if (response.data.status === 'success') {\n            this.categories = response.data.res.reduce((acc, category) => {\n              acc[category.id] = category.name;\n              return acc;\n            }, {});\n          } else {\n            console.error('Failed to fetch categories:', response.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching categories:', error);\n        }\n      },\n      async fetchPosts(page = this.currentPage) {\n        try {\n          // Fetch posts\n          const postsResponse = await axios.get(`${this.$BackURL}/boardList`, {\n            params: {\n              category_id: this.selectedCategory,\n              page: page,\n              per_page: this.perPage\n            }\n          });\n          if (postsResponse.data.status === 'success') {\n            this.posts = postsResponse.data.res;\n          } else {\n            console.error('Failed to fetch posts:', postsResponse.data.message);\n          }\n  \n          // Fetch total posts\n          const totalPostsResponse = await axios.get(`${this.$BackURL}/boardListPage`, {\n            params: {\n              category_id: this.selectedCategory\n            }\n          });\n          console.log(totalPostsResponse.data)\n          if (totalPostsResponse.data.status === 'success') {\n            this.totalPosts = totalPostsResponse.data.res.total_posts;\n          } else {\n            console.error('Failed to fetch total posts:', totalPostsResponse.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching posts or total posts:', error);\n        }\n      },\n      selectCategory(key) {\n        this.selectedCategory = key;\n        this.currentPage = 1; // Reset to the first page when category changes\n        this.fetchPosts();\n      },\n      updatePage(page) {\n        this.currentPage = page;\n        this.fetchPosts(page);\n      },\n      setActiveTab(tab) {\n        // Implement tab switching logic if needed\n        console.log('Tab switched to:', tab);\n      }\n    },\n    components: {\n      BoardList\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .container {\n    padding: 20px;\n  }\n  .category-buttons {\n    margin-bottom: 20px;\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}