{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"d-flex\",\n  style: {\n    \"flex-direction\": \"row\"\n  }\n};\nconst _hoisted_2 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BoardList = _resolveComponent(\"BoardList\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.categories, (value, key) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      type: \"button\",\n      class: _normalizeClass([\"btn btn-outline-primary m-2\", {\n        active: $data.selectedCategory === key\n      }]),\n      key: key,\n      onClick: $event => $options.selectCategory(key)\n    }, _toDisplayString(value), 11 /* TEXT, CLASS, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */)), _createVNode(_component_BoardList)]);\n}","map":{"version":3,"names":["class","style","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","categories","value","key","type","_normalizeClass","active","selectedCategory","onClick","$event","$options","selectCategory","_hoisted_2","_createVNode","_component_BoardList"],"sources":["/var/www/front/src/components/Board/MainBoard.vue"],"sourcesContent":["<template>\n    <div class=\"d-flex\" style=\"flex-direction: row;\">\n        <button\n            type=\"button\"\n            class=\"btn btn-outline-primary m-2\"\n            :class=\"{ active: selectedCategory === key }\"\n            v-for=\"(value, key) in categories\"\n            :key=\"key\"\n            @click=\"selectCategory(key)\">\n            {{ value }}\n        </button>\n        <BoardList />\n    </div>\n</template>\n\n<script>\nimport axios  from 'axios';\nimport BoardList from './BoardList.vue';\n\nexport default {\n    data() {\n        return {\n            selectedCategory: '1',\n            categories: {},\n            posts: [],        // 게시글 데이터를 저장할 배열\n            totalPosts: 0,    // 전체 게시글 수\n            currentPage: 1,   // 현재 페이지\n            perPage: 10,      // 페이지당 게시글 수\n        }\n    },\n    created() {\n        this.fetchCategories(); // 카테고리 목록 가져오기\n        this.fetchboard(1,this.currentPage);\n    },\n    methods: {\n        selectCategory(key) {\n            this.selectedCategory = key;\n        },\n        async fetchCategories() {\n            try {\n                const response = await axios.get(`${this.$BackURl}/category`);\n                if (response.data.status === 'success') {\n                    const categories = response.data.res.reduce((acc, category) => {\n                        acc[category.id] = category.name;\n                        return acc;\n                    }, {});\n                    this.categories = categories;\n                } else {\n                    console.error('Failed to fetch categories:', response.data.message);\n                }\n            } catch (error) {\n                console.error('Error fetching categories:', error);\n            }\n        },\n        async fetchboard(categoryId, page) {\n            try {\n                const response = await axios.get(`${this.$BackURl}/boardList`, {\n                params: {\n                    category_id: categoryId,\n                    page: page,\n                    per_page: this.perPage\n                }\n                });\n                console.log(response.data);\n                if (response.data.status === 'success') {\n                    console.log(response.data);\n                    // this.posts = response.data.posts;\n                    // this.totalPosts = response.data.total_posts;\n                    // this.currentPage = response.data.page;\n                } else {\n                    this.posts = [];\n                }\n            } catch (error) {\n                console.error('Error fetching posts:', error);\n            }\n        }\n    },\n    components:{\n        BoardList,\n    }\n}\n</script>\n\n<style>\n\n</style>"],"mappings":";;EACSA,KAAK,EAAC,QAAQ;EAACC,KAA4B,EAA5B;IAAA;EAAA;;mBADxB;;;uBACIC,mBAAA,CAWM,OAXNC,UAWM,I,kBAVFD,mBAAA,CAQSE,SAAA,QAVjBC,WAAA,CAMmCC,KAAA,CAAAC,UAAU,EAN7C,CAMoBC,KAAK,EAAEC,GAAG;yBAJtBP,mBAAA,CAQS;MAPLQ,IAAI,EAAC,QAAQ;MACbV,KAAK,EAJjBW,eAAA,EAIkB,6BAA6B;QAAAC,MAAA,EACjBN,KAAA,CAAAO,gBAAgB,KAAKJ;MAAG;MAEzCA,GAAG,EAAEA,GAAG;MACRK,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACR,GAAG;wBACvBD,KAAK,gCATpBU,UAAA;kCAWQC,YAAA,CAAaC,oBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}