{"ast":null,"code":"import axios from 'axios';\nimport BoardList from './BoardList.vue';\nimport BoardWrite from './BoardWrite.vue';\nimport BoardView from './BoardView.vue';\nimport Pagintion from '../Pagintion.vue';\nexport default {\n  data() {\n    return {\n      selectedCategory: '1',\n      categories: {},\n      posts: [],\n      totalPosts: 0,\n      currentPage: 1,\n      perPage: 10,\n      status: 'BoardList',\n      BackURL: this.$BackURL,\n      selectBoard: ''\n    };\n  },\n  created() {\n    this.fetchCategories();\n    this.fetchPosts();\n  },\n  watch: {\n    // Watcher for selectedCategory\n    selectedCategory(newCategory, oldCategory) {\n      if (newCategory !== oldCategory) {\n        this.currentPage = 1; // Reset to the first page when category changes\n        this.posts = [], this.fetchPosts(); // Fetch posts for the new category\n      }\n    }\n  },\n  methods: {\n    async fetchCategories() {\n      try {\n        const response = await axios.get(`${this.$BackURL}/category`);\n        if (response.data.status === 'success') {\n          this.categories = response.data.res.reduce((acc, category) => {\n            acc[category.id] = category.name;\n            return acc;\n          }, {});\n        } else {\n          console.error('Failed to fetch categories:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    },\n    async fetchPosts(page = this.currentPage) {\n      try {\n        // api 요청 \n        const postsResponse = await axios.get(`${this.$BackURL}/boardList`, {\n          params: {\n            category_id: this.selectedCategory,\n            page: page,\n            per_page: this.perPage\n          }\n        });\n        // response\n        if (postsResponse.data.status === 'success') {\n          this.posts = postsResponse.data.res;\n        } else {\n          console.error('Failed to fetch posts:', postsResponse.data.message);\n        }\n\n        // total posts\n        const totalPostsResponse = await axios.get(`${this.$BackURL}/boardListPage`, {\n          params: {\n            category_id: this.selectedCategory\n          }\n        });\n        // response\n        if (totalPostsResponse.data.status === 'success') {\n          if (totalPostsResponse.data.res[0].total_posts == 0) {\n            // 데이터가 없는경우\n            this.totalPosts = 1;\n          } else {\n            this.totalPosts = totalPostsResponse.data.res[0].total_posts;\n          }\n        } else {\n          console.error('Failed to fetch total posts:', totalPostsResponse.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching posts or total posts:', error);\n      }\n    },\n    selectCategory(key) {\n      this.selectedCategory = key;\n      this.currentPage = 1; // Reset to the first page when category changes\n      this.status = 'BoardList';\n      this.fetchPosts();\n    },\n    updatePage(page) {\n      this.currentPage = page;\n      this.fetchPosts(page);\n    },\n    setActiveTab(tab) {\n      // Implement tab switching logic if needed\n      console.log('Tab switched to:', tab);\n    },\n    SelectPost(board_id) {\n      const SelectBoardPost = this.posts.find(board => board.board_id === board_id);\n      this.selectBoard = SelectBoardPost;\n      this.changeStatus('BoardView');\n    },\n    changeStatus(target) {\n      this.status = target;\n    }\n  },\n  components: {\n    BoardList,\n    BoardWrite,\n    Pagintion,\n    BoardView\n  }\n};","map":{"version":3,"names":["axios","BoardList","BoardWrite","BoardView","Pagintion","data","selectedCategory","categories","posts","totalPosts","currentPage","perPage","status","BackURL","$BackURL","selectBoard","created","fetchCategories","fetchPosts","watch","newCategory","oldCategory","methods","response","get","res","reduce","acc","category","id","name","console","error","message","page","postsResponse","params","category_id","per_page","totalPostsResponse","total_posts","selectCategory","key","updatePage","setActiveTab","tab","log","SelectPost","board_id","SelectBoardPost","find","board","changeStatus","target","components"],"sources":["/var/www/front/src/components/Board/MainBoard.vue"],"sourcesContent":["<template>\n    <div class=\"d-flex flex-column\">\n      <div class=\"category-buttons\" style=\"margin:10px\">\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-primary m-2\"\n          :class=\"{ active: selectedCategory === key }\"\n          v-for=\"(value, key) in categories\"\n          :key=\"key\"\n          @click=\"selectCategory(key)\"\n          >\n          {{ value }}\n        </button>\n      </div>\n      <div v-if=\"status == 'BoardList'\"> \n        <!-- 게시판 목록 -->\n        <BoardList :posts=\"posts\" :selectedCategory=\"selectedCategory\" @SelectPost=\"SelectPost\"/>\n        <div class=\"d-flex justify-content-end\">\n          <button type=\"button\" class=\"btn btn-outline-primary m-2\" @click=\"changeStatus('BoardWrite')\">글쓰기</button>\n        </div>\n        <!-- 페이징 -->\n        <Pagintion :totalPosts=\"totalPosts\" :currentPage=\"currentPage\" :perPage=\"perPage\" @updatePage=\"updatePage\"/>\n      </div>\n      <BoardView v-else-if=\"status == 'BoardView'\" :selectBoard=\"selectBoard\"/> \n      <!-- 글쓰기 -->\n      <BoardWrite v-else-if=\"status == 'BoardWrite'\" :categories=\"categories\" :BackURL=\"BackURL\"/>\n\n            \n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import BoardList from './BoardList.vue';\n  import BoardWrite from './BoardWrite.vue';\n  import BoardView from './BoardView.vue';\n  import Pagintion from '../Pagintion.vue';\n  \n  export default {\n    data() {\n      return {\n        selectedCategory: '1',\n        categories: {},\n        posts: [],\n        totalPosts: 0,\n        currentPage: 1,\n        perPage: 10,\n        status: 'BoardList',\n        BackURL: this.$BackURL,\n        selectBoard: '',\n      }\n    },\n    created() {\n      this.fetchCategories();\n      this.fetchPosts();\n    },\n    watch: {\n        // Watcher for selectedCategory\n        selectedCategory(newCategory, oldCategory) {\n            if (newCategory !== oldCategory) {\n                this.currentPage = 1; // Reset to the first page when category changes\n                this.posts = [],\n                this.fetchPosts(); // Fetch posts for the new category\n            }\n        }\n    },\n    methods: {\n      async fetchCategories() {\n        try {\n          const response = await axios.get(`${this.$BackURL}/category`);\n          if (response.data.status === 'success') {\n            this.categories = response.data.res.reduce((acc, category) => {\n              acc[category.id] = category.name;\n              return acc;\n            }, {});\n          } else {\n            console.error('Failed to fetch categories:', response.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching categories:', error);\n        }\n      },\n      async fetchPosts(page = this.currentPage) {\n        try {\n          // api 요청 \n          const postsResponse = await axios.get(`${this.$BackURL}/boardList`, {\n            params: {\n              category_id: this.selectedCategory,\n              page: page,\n              per_page: this.perPage\n            }\n          });\n          // response\n          if (postsResponse.data.status === 'success') {\n            this.posts = postsResponse.data.res;\n          } else {\n            console.error('Failed to fetch posts:', postsResponse.data.message);\n          }\n  \n          // total posts\n          const totalPostsResponse = await axios.get(`${this.$BackURL}/boardListPage`, {\n            params: {\n              category_id: this.selectedCategory\n            }\n          });\n          // response\n          if (totalPostsResponse.data.status === 'success') {\n            if (totalPostsResponse.data.res[0].total_posts == 0){\n              // 데이터가 없는경우\n              this.totalPosts = 1; \n            }else{\n              this.totalPosts = totalPostsResponse.data.res[0].total_posts;\n            }\n          } else {\n            console.error('Failed to fetch total posts:', totalPostsResponse.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching posts or total posts:', error);\n        }\n      },\n      selectCategory(key) {\n        this.selectedCategory = key;\n        this.currentPage = 1; // Reset to the first page when category changes\n        this.status = 'BoardList';\n        this.fetchPosts();\n      },\n      updatePage(page) {\n        this.currentPage = page;\n        this.fetchPosts(page);\n      },\n      setActiveTab(tab) {\n        // Implement tab switching logic if needed\n        console.log('Tab switched to:', tab);\n      },\n      SelectPost(board_id){\n        const SelectBoardPost = this.posts.find(board => board.board_id === board_id);\n        this.selectBoard = SelectBoardPost;\n        this.changeStatus('BoardView');\n      },\n      changeStatus(target){\n        this.status = target;\n      },\n    },\n    components: {\n      BoardList,\n      BoardWrite,\n      Pagintion,\n      BoardView,\n    }\n  }\n  </script>\n  \n  <style>\n  .container {\n    padding: 20px;\n  }\n  .category-buttons {\n    margin-bottom: 20px;\n  }\n  /* 기본 카드 스타일 */\n  .card.border-primary {\n    transition: background-color 0.3s, box-shadow 0.3s, color 0.3s; /* 배경색, 그림자, 글자색에 대해 transition 설정 */\n  }\n  /* 카드에 마우스 오버 시 효과 */\n  .card.border-primary:hover {\n    background-color: #78C2AD; /* 배경색 변경 */\n    color: white; /* 텍스트 색상 변경 */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* 카드에 그림자 추가 */\n  }\n  </style>\n  "],"mappings":"AAgCE,OAAOA,KAAI,MAAO,OAAO;AACzB,OAAOC,SAAQ,MAAO,iBAAiB;AACvC,OAAOC,UAAS,MAAO,kBAAkB;AACzC,OAAOC,SAAQ,MAAO,iBAAiB;AACvC,OAAOC,SAAQ,MAAO,kBAAkB;AAExC,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,gBAAgB,EAAE,GAAG;MACrBC,UAAU,EAAE,CAAC,CAAC;MACdC,KAAK,EAAE,EAAE;MACTC,UAAU,EAAE,CAAC;MACbC,WAAW,EAAE,CAAC;MACdC,OAAO,EAAE,EAAE;MACXC,MAAM,EAAE,WAAW;MACnBC,OAAO,EAAE,IAAI,CAACC,QAAQ;MACtBC,WAAW,EAAE;IACf;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,eAAe,CAAC,CAAC;IACtB,IAAI,CAACC,UAAU,CAAC,CAAC;EACnB,CAAC;EACDC,KAAK,EAAE;IACH;IACAb,gBAAgBA,CAACc,WAAW,EAAEC,WAAW,EAAE;MACvC,IAAID,WAAU,KAAMC,WAAW,EAAE;QAC7B,IAAI,CAACX,WAAU,GAAI,CAAC,EAAE;QACtB,IAAI,CAACF,KAAI,GAAI,EAAE,EACf,IAAI,CAACU,UAAU,CAAC,CAAC,EAAE;MACvB;IACJ;EACJ,CAAC;EACDI,OAAO,EAAE;IACP,MAAML,eAAeA,CAAA,EAAG;MACtB,IAAI;QACF,MAAMM,QAAO,GAAI,MAAMvB,KAAK,CAACwB,GAAG,CAAC,GAAG,IAAI,CAACV,QAAQ,WAAW,CAAC;QAC7D,IAAIS,QAAQ,CAAClB,IAAI,CAACO,MAAK,KAAM,SAAS,EAAE;UACtC,IAAI,CAACL,UAAS,GAAIgB,QAAQ,CAAClB,IAAI,CAACoB,GAAG,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,QAAQ,KAAK;YAC5DD,GAAG,CAACC,QAAQ,CAACC,EAAE,IAAID,QAAQ,CAACE,IAAI;YAChC,OAAOH,GAAG;UACZ,CAAC,EAAE,CAAC,CAAC,CAAC;QACR,OAAO;UACLI,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAET,QAAQ,CAAClB,IAAI,CAAC4B,OAAO,CAAC;QACrE;MACF,EAAE,OAAOD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IACD,MAAMd,UAAUA,CAACgB,IAAG,GAAI,IAAI,CAACxB,WAAW,EAAE;MACxC,IAAI;QACF;QACA,MAAMyB,aAAY,GAAI,MAAMnC,KAAK,CAACwB,GAAG,CAAC,GAAG,IAAI,CAACV,QAAQ,YAAY,EAAE;UAClEsB,MAAM,EAAE;YACNC,WAAW,EAAE,IAAI,CAAC/B,gBAAgB;YAClC4B,IAAI,EAAEA,IAAI;YACVI,QAAQ,EAAE,IAAI,CAAC3B;UACjB;QACF,CAAC,CAAC;QACF;QACA,IAAIwB,aAAa,CAAC9B,IAAI,CAACO,MAAK,KAAM,SAAS,EAAE;UAC3C,IAAI,CAACJ,KAAI,GAAI2B,aAAa,CAAC9B,IAAI,CAACoB,GAAG;QACrC,OAAO;UACLM,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEG,aAAa,CAAC9B,IAAI,CAAC4B,OAAO,CAAC;QACrE;;QAEA;QACA,MAAMM,kBAAiB,GAAI,MAAMvC,KAAK,CAACwB,GAAG,CAAC,GAAG,IAAI,CAACV,QAAQ,gBAAgB,EAAE;UAC3EsB,MAAM,EAAE;YACNC,WAAW,EAAE,IAAI,CAAC/B;UACpB;QACF,CAAC,CAAC;QACF;QACA,IAAIiC,kBAAkB,CAAClC,IAAI,CAACO,MAAK,KAAM,SAAS,EAAE;UAChD,IAAI2B,kBAAkB,CAAClC,IAAI,CAACoB,GAAG,CAAC,CAAC,CAAC,CAACe,WAAU,IAAK,CAAC,EAAC;YAClD;YACA,IAAI,CAAC/B,UAAS,GAAI,CAAC;UACrB,CAAC,MAAI;YACH,IAAI,CAACA,UAAS,GAAI8B,kBAAkB,CAAClC,IAAI,CAACoB,GAAG,CAAC,CAAC,CAAC,CAACe,WAAW;UAC9D;QACF,OAAO;UACLT,OAAO,CAACC,KAAK,CAAC,8BAA8B,EAAEO,kBAAkB,CAAClC,IAAI,CAAC4B,OAAO,CAAC;QAChF;MACF,EAAE,OAAOD,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF,CAAC;IACDS,cAAcA,CAACC,GAAG,EAAE;MAClB,IAAI,CAACpC,gBAAe,GAAIoC,GAAG;MAC3B,IAAI,CAAChC,WAAU,GAAI,CAAC,EAAE;MACtB,IAAI,CAACE,MAAK,GAAI,WAAW;MACzB,IAAI,CAACM,UAAU,CAAC,CAAC;IACnB,CAAC;IACDyB,UAAUA,CAACT,IAAI,EAAE;MACf,IAAI,CAACxB,WAAU,GAAIwB,IAAI;MACvB,IAAI,CAAChB,UAAU,CAACgB,IAAI,CAAC;IACvB,CAAC;IACDU,YAAYA,CAACC,GAAG,EAAE;MAChB;MACAd,OAAO,CAACe,GAAG,CAAC,kBAAkB,EAAED,GAAG,CAAC;IACtC,CAAC;IACDE,UAAUA,CAACC,QAAQ,EAAC;MAClB,MAAMC,eAAc,GAAI,IAAI,CAACzC,KAAK,CAAC0C,IAAI,CAACC,KAAI,IAAKA,KAAK,CAACH,QAAO,KAAMA,QAAQ,CAAC;MAC7E,IAAI,CAACjC,WAAU,GAAIkC,eAAe;MAClC,IAAI,CAACG,YAAY,CAAC,WAAW,CAAC;IAChC,CAAC;IACDA,YAAYA,CAACC,MAAM,EAAC;MAClB,IAAI,CAACzC,MAAK,GAAIyC,MAAM;IACtB;EACF,CAAC;EACDC,UAAU,EAAE;IACVrD,SAAS;IACTC,UAAU;IACVE,SAAS;IACTD;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}