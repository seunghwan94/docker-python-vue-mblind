{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, vModelText as _vModelText, withDirectives as _withDirectives } from \"vue\";\nconst _hoisted_1 = {\n  class: \"card bg-light m-2\",\n  style: {\n    \"max-width\": \"100%\"\n  }\n};\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"card-header\"\n}, \"댓글\", -1 /* HOISTED */);\nconst _hoisted_3 = {\n  key: 0,\n  class: \"d-flex p-3 pb-0\",\n  style: {\n    \"flex-direction\": \"column\"\n  }\n};\nconst _hoisted_4 = {\n  class: \"card-body align-items-center d-flex\",\n  style: {\n    \"flex-direction\": \"row\"\n  }\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  class: \"w-100 ps-4\"\n};\nconst _hoisted_7 = {\n  class: \"d-flex\",\n  style: {\n    \"align-items\": \"center\",\n    \"justify-content\": \"space-between\"\n  }\n};\nconst _hoisted_8 = {\n  style: {\n    \"font-weight\": \"bold\",\n    \"margin\": \"0\"\n  }\n};\nconst _hoisted_9 = {\n  key: 0,\n  class: \"d-flex\"\n};\nconst _hoisted_10 = [\"onClick\"];\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"bi bi-pencil-square\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_12 = [_hoisted_11];\nconst _hoisted_13 = [\"onClick\"];\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"bi bi-trash\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_15 = [_hoisted_14];\nconst _hoisted_16 = {\n  key: 0\n};\nconst _hoisted_17 = [\"onUpdate:modelValue\"];\nconst _hoisted_18 = {\n  class: \"d-flex mt-2 mb-2\",\n  style: {\n    \"justify-content\": \"flex-end\"\n  }\n};\nconst _hoisted_19 = [\"onClick\"];\nconst _hoisted_20 = [\"onClick\"];\nconst _hoisted_21 = {\n  class: \"card-text m-0\"\n};\nconst _hoisted_22 = {\n  class: \"text-body-tertiary m-0\",\n  style: {\n    \"text-align\": \"end\",\n    \"font-size\": \"13px\"\n  }\n};\nconst _hoisted_23 = /*#__PURE__*/_createElementVNode(\"hr\", {\n  style: {\n    \"margin-bottom\": \"0\"\n  }\n}, null, -1 /* HOISTED */);\nconst _hoisted_24 = {\n  class: \"card-body d-flex pb-0\"\n};\nconst _hoisted_25 = {\n  class: \"d-flex\",\n  style: {\n    \"align-items\": \"flex-start\"\n  }\n};\nconst _hoisted_26 = [\"src\"];\nconst _hoisted_27 = {\n  class: \"form-control ms-2\",\n  id: \"comment\",\n  style: {\n    \"height\": \"auto\",\n    \"min-height\": \"80px\"\n  }\n};\nconst _hoisted_28 = {\n  contenteditable: \"false\",\n  style: {\n    \"font-weight\": \"bold\"\n  }\n};\nconst _hoisted_29 = {\n  class: \"d-flex justify-content-end\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, $data.comments.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.comments, (commentdata, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"card border-light mb-3\",\n      style: {\n        \"max-width\": \"100%\"\n      }\n    }, [_createElementVNode(\"div\", _hoisted_4, [_createCommentVNode(\" 이미지 \"), _createElementVNode(\"img\", {\n      src: require(`../../assets/img/${commentdata.img}`),\n      style: {\n        \"width\": \"50px\",\n        \"border-radius\": \"50%\"\n      }\n    }, null, 8 /* PROPS */, _hoisted_5), _createCommentVNode(\" 댓글 \"), _createElementVNode(\"div\", _hoisted_6, [_createCommentVNode(\" 이름, 편집, 삭제 \"), _createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"p\", _hoisted_8, _toDisplayString(commentdata.name), 1 /* TEXT */), commentdata.name === $props.user_name ? (_openBlock(), _createElementBlock(\"div\", _hoisted_9, [_createElementVNode(\"div\", {\n      type: \"button\",\n      class: \"m-0\",\n      style: {\n        \"font-size\": \"16px\"\n      },\n      onClick: $event => $options.commentEdit(index)\n    }, [..._hoisted_12], 8 /* PROPS */, _hoisted_10), _createElementVNode(\"div\", {\n      type: \"button\",\n      class: \"m-0 ms-1\",\n      style: {\n        \"font-size\": \"16px\"\n      },\n      onClick: $event => $options.commentDelete(index, commentdata.id)\n    }, [..._hoisted_15], 8 /* PROPS */, _hoisted_13)])) : _createCommentVNode(\"v-if\", true)]), _createCommentVNode(\" 댓글 편집 \"), commentdata.isEditing ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [_withDirectives(_createElementVNode(\"textarea\", {\n      class: \"form-control\",\n      \"onUpdate:modelValue\": $event => commentdata.editContent = $event,\n      rows: \"2\"\n    }, null, 8 /* PROPS */, _hoisted_17), [[_vModelText, commentdata.editContent]]), _createElementVNode(\"div\", _hoisted_18, [_createElementVNode(\"button\", {\n      class: \"btn btn-primary btn-sm\",\n      onClick: $event => $options.saveCommentEdit(index, commentdata.id)\n    }, \"수정\", 8 /* PROPS */, _hoisted_19), _createElementVNode(\"button\", {\n      class: \"btn btn-secondary btn-sm ms-2\",\n      onClick: $event => $options.cancelEdit(index)\n    }, \"취소\", 8 /* PROPS */, _hoisted_20)])])) : (_openBlock(), _createElementBlock(_Fragment, {\n      key: 1\n    }, [_createCommentVNode(\" 댓글 view \"), _createElementVNode(\"p\", _hoisted_21, _toDisplayString(commentdata.content), 1 /* TEXT */)], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)), _createElementVNode(\"p\", _hoisted_22, _toDisplayString($options.sendformatDate(commentdata.create_date)), 1 /* TEXT */)])])]);\n  }), 128 /* KEYED_FRAGMENT */)), _hoisted_23])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_24, [_createElementVNode(\"div\", _hoisted_25, [_createElementVNode(\"img\", {\n    src: require(`../../assets/img/${_ctx.user_img}`),\n    style: {\n      \"width\": \"50px\",\n      \"border-radius\": \"50%\"\n    }\n  }, null, 8 /* PROPS */, _hoisted_26)]), _createElementVNode(\"div\", _hoisted_27, [_createElementVNode(\"div\", _hoisted_28, _toDisplayString($props.user_name), 1 /* TEXT */), _createElementVNode(\"div\", {\n    contenteditable: \"true\",\n    ref: \"editableContent\",\n    onInput: _cache[0] || (_cache[0] = (...args) => $options.updateComment && $options.updateComment(...args)),\n    style: {\n      \"outline\": \"none\",\n      \"border\": \"2px solid transparent\"\n    }\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */)])]), _createElementVNode(\"div\", _hoisted_29, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-outline-primary m-3\",\n    onClick: _cache[1] || (_cache[1] = $event => $options.commentAdd(_ctx.selectBoard.board_id))\n  }, \"등록\")])]);\n}","map":{"version":3,"names":["class","style","_createElementVNode","key","_hoisted_11","_hoisted_14","id","contenteditable","_createElementBlock","_hoisted_1","_hoisted_2","$data","comments","length","_hoisted_3","_Fragment","_renderList","commentdata","index","_hoisted_4","_createCommentVNode","src","require","img","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_toDisplayString","name","$props","user_name","_hoisted_9","type","onClick","$event","$options","commentEdit","_hoisted_12","_hoisted_10","commentDelete","_hoisted_15","_hoisted_13","isEditing","_hoisted_16","editContent","rows","_hoisted_17","_hoisted_18","saveCommentEdit","_hoisted_19","cancelEdit","_hoisted_20","_hoisted_21","content","_hoisted_22","sendformatDate","create_date","_hoisted_23","_hoisted_24","_hoisted_25","_ctx","user_img","_hoisted_26","_hoisted_27","_hoisted_28","ref","onInput","_cache","args","updateComment","_hoisted_29","commentAdd","selectBoard","board_id"],"sources":["/var/www/front/src/components/Board/BoardComment.vue"],"sourcesContent":["<template>\n    <div class=\"card bg-light m-2\" style=\"max-width: 100%;\">\n        <div class=\"card-header\">댓글</div>\n        <div v-if=\"comments.length > 0\" class=\"d-flex p-3 pb-0 \" style=\"flex-direction: column;\">\n            <div v-for=\"(commentdata, index) in comments\" :key=\"index\" class=\"card border-light mb-3\" style=\"max-width: 100%;\">\n                <div class=\"card-body align-items-center d-flex\" style=\"flex-direction: row;\">\n                    <!-- 이미지 -->\n                    <img :src=\"require(`../../assets/img/${commentdata.img}`)\" style=\"width: 50px;border-radius: 50%;\">\n                    <!-- 댓글 -->\n                    <div class=\"w-100 ps-4\">\n                        <!-- 이름, 편집, 삭제 -->\n                        <div class=\"d-flex\" style=\"align-items: center; justify-content: space-between;\">\n                            <p style=\"font-weight: bold; margin:0;\">{{ commentdata.name }}</p>\n                            <div class=\"d-flex\" v-if=\"commentdata.name === user_name\">\n                                <div type=\"button\" class=\"m-0\" style=\"font-size: 16px;\" @click=\"commentEdit(index)\"><i class=\"bi bi-pencil-square\"></i></div>\n                                <div type=\"button\" class=\"m-0 ms-1\" style=\"font-size: 16px;\" @click=\"commentDelete(index, commentdata.id)\"><i class=\"bi bi-trash\"></i></div>\n                            </div>\n                        </div>\n                        <!-- 댓글 편집 -->\n                        <div v-if=\"commentdata.isEditing\">\n                            <textarea class=\"form-control\" v-model=\"commentdata.editContent\" rows=\"2\"></textarea>\n                            <div class=\"d-flex mt-2 mb-2\" style=\"justify-content: flex-end;\">\n                                <button class=\"btn btn-primary btn-sm \" @click=\"saveCommentEdit(index, commentdata.id)\">수정</button>\n                                <button class=\"btn btn-secondary btn-sm  ms-2\" @click=\"cancelEdit(index)\">취소</button>\n                            </div>\n                        </div>\n                        <!-- 댓글 view -->\n                        <p v-else class=\"card-text m-0\">{{ commentdata.content }}</p>\n                        <p class=\"text-body-tertiary m-0\" style=\"text-align: end; font-size: 13px;\">{{ sendformatDate(commentdata.create_date) }}</p>\n                    </div>\n                </div>\n            </div>\n            <hr style=\"margin-bottom:0\"/>\n        </div>\n        <div class=\"card-body d-flex pb-0\">\n            <div class=\"d-flex\" style=\"align-items: flex-start\">\n                <img :src=\"require(`../../assets/img/${user_img}`)\" style=\"width: 50px;border-radius: 50%;\">\n            </div>\n            <div class=\"form-control ms-2\" id=\"comment\" style=\"height: auto; min-height: 80px;\">\n                <div contenteditable=\"false\" style=\"font-weight: bold;\">{{ user_name }}</div>\n                <div contenteditable=\"true\" ref=\"editableContent\" @input=\"updateComment\" style=\"outline: none; border: 2px solid transparent;\"></div>\n            </div>\n        </div>\n        <div class=\"d-flex justify-content-end\">\n            <button type=\"button\" class=\"btn btn-outline-primary m-3\" @click=\"commentAdd(selectBoard.board_id)\">등록</button> \n        </div>\n    </div>\n\n</template>\n<script>\nimport axios from 'axios';\n\nexport default {\n    data(){\n        return{\n            comments:[],\n            isEditingPost: false,\n            editContent: '',\n            commentText: '',\n        }\n    },\n    props:{\n        board_id: String,\n        user_name: String,\n    },\n    mounted() {\n        this.commentList();\n    },\n    methods: {\n        // 댓글 목록 가져오기\n        async commentList() {\n            try {\n                const response = await axios.get(`${this.$BackURL}/commentList`, {\n                    params: {\n                        board_id: this.board_id\n                    }\n                });\n                if (response.data.status === 'success') {\n                    this.comments = response.data.res.map(comment => ({\n                        ...comment,\n                        isEditing: false,\n                        editContent: ''\n                    }));\n                } else {\n                    console.error('Failed to fetch comments:', response.data.message);\n                }\n            } catch (error) {\n                console.error('Error fetching comments:', error);\n            }\n        },\n        // 댓글 편집\n        commentEdit(index) {\n            this.comments[index].isEditing = !this.comments[index].isEditing;\n            if (this.comments[index].isEditing) {\n                this.comments[index].editContent = this.comments[index].content;\n            }\n        },\n        // 편집 취소\n        cancelEdit(index) {\n            this.comments[index].isEditing = false;\n        },\n        // 댓글 수정\n        async saveCommentEdit(index, comment_id) {\n            if (confirm(\"수정하시겠습니까?\")) {\n                const editedComment = this.comments[index].editContent;\n                try {\n                    const response = await axios.post('http://127.0.0.1:3000/saveCommentEdit', {\n                        comment_id: comment_id,\n                        content: editedComment\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments[index].content = editedComment;\n                        this.comments[index].isEditing = false;\n                    } else {\n                        console.error('Failed to edit comment');\n                    }\n                } catch (error) {\n                    console.error('Error editing comment:', error);\n                }\n            }\n        },\n        // 댓글 삭제\n        async commentDelete(index, comment_id) {\n            if (confirm(\"삭제하시겠습니까?\")) {\n                try {\n                    const response = await axios.post(`${this.$BackURL}/commentDelete`, {\n                        comment_id: comment_id\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments.splice(index, 1); // 배열에서 해당 댓글을 완전히 제거합니다.\n                        this.commentCount -= 1;         // 댓글 수를 하나 줄입니다.\n                    } else {\n                        console.error('Failed to delete comment');\n                    }\n                } catch (error) {\n                    console.error('Error deleting comment:', error);\n                }\n            }\n        },\n        async commentAdd(board_id) {\n            try {\n                const user_id = sessionStorage.getItem('user_id');\n                const comment = this.commentText;\n                const response = await axios.get(`${this.$BackURL}/commentAdd`, {\n                    params: {\n                        board_id: board_id,\n                        user_id: user_id,\n                        comment: comment\n                    }\n                });\n                if (response.data.status === 'success') {\n                    this.commentList();\n                    this.commentText = '';\n                    this.$refs.editableContent.innerText = '';\n                    this.commentCount = this.commentCount + 1;\n                    alert('댓글이 등록되었습니다.');\n                } else {\n                    console.log('댓글 등록 실패');\n                }\n            } catch (error) {\n                console.error('Error fetching posts:', error);\n            }\n        },\n        // 날짜 선정\n        sendformatDate(create_date){\n            this.$emit('formatDate', create_date);\n        },\n        updateComment(event) {\n            this.commentText = event.target.innerText;\n        },\n    }\n}\n</script>\n<style>\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}