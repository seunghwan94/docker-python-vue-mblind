{"ast":null,"code":"import axios from \"axios\";\nimport { ref, onMounted, onBeforeUnmount, computed } from \"vue\";\nimport { Editor } from \"@tiptap/vue-3\";\nimport StarterKit from \"@tiptap/starter-kit\";\nimport Underline from \"@tiptap/extension-underline\";\nimport TextAlign from \"@tiptap/extension-text-align\";\nimport Link from \"@tiptap/extension-link\";\nimport Image from \"@tiptap/extension-image\";\nimport BoardWriteBar from \"./BoardWriteBar.vue\";\nexport default {\n  components: {\n    BoardWriteBar\n  },\n  computed: {\n    filteredCategories() {\n      return Object.entries(this.categories).reduce((acc, [key, value]) => {\n        if (key !== '0') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n    }\n  },\n  setup(props) {\n    const editor = ref(null);\n    const editorElement = ref(null);\n    const title = ref(props.selectBoard?.title || \"\");\n    const category = ref(props.selectBoard?.category_id || \"\");\n    const user_id = ref(sessionStorage.getItem(\"user_id\"));\n    const isEditMode = computed(() => !!props.selectBoard); // 편집 모드인지 확인\n    const content = computed(() => props.selectBoard?.content || \"<p>여기에 내용을 입력하세요.</p>\");\n    onMounted(() => {\n      editor.value = new Editor({\n        element: editorElement.value,\n        extensions: [StarterKit, Underline, TextAlign, Link, Image],\n        content: content.value\n      });\n    });\n    onBeforeUnmount(() => {\n      if (editor.value) {\n        editor.value.destroy();\n      }\n    });\n    const handleSubmit = () => {\n      const postContent = editor.value.getHTML();\n      if (!title.value || !category.value || !postContent) {\n        return alert(\"모든 필드를 입력해주세요.\");\n      }\n      const payload = {\n        title: title.value,\n        content: postContent,\n        category: category.value,\n        user_id: user_id.value\n      };\n      const apiURL = isEditMode.value ? `${props.BackURL}/boardPosttingEdit` : `${props.BackURL}/boardPostting`;\n\n      // 편집 시 board_id 포함\n      if (isEditMode.value) {\n        payload.board_id = props.selectBoard.board_id;\n      }\n      axios.post(apiURL, payload).then(res => {\n        if (res.data.status === \"success\") {\n          alert(isEditMode.value ? \"게시글이 수정되었습니다.\" : \"게시글이 작성되었습니다.\");\n          window.location.reload();\n        } else {\n          alert(\"처리 중 오류가 발생했습니다.\");\n        }\n      }).catch(() => alert(\"서버 오류가 발생했습니다.\"));\n    };\n    return {\n      editor,\n      editorElement,\n      title,\n      category,\n      handleSubmit\n    };\n  },\n  props: {\n    categories: Object,\n    BackURL: String,\n    selectBoard: Object\n  }\n};","map":{"version":3,"names":["axios","ref","onMounted","onBeforeUnmount","computed","Editor","StarterKit","Underline","TextAlign","Link","Image","BoardWriteBar","components","filteredCategories","Object","entries","categories","reduce","acc","key","value","setup","props","editor","editorElement","title","selectBoard","category","category_id","user_id","sessionStorage","getItem","isEditMode","content","element","extensions","destroy","handleSubmit","postContent","getHTML","alert","payload","apiURL","BackURL","board_id","post","then","res","data","status","window","location","reload","catch","String"],"sources":["/var/www/front/src/components/Board/BoardWrite.vue"],"sourcesContent":["<template>\n  <div class=\"editor mt-3\">\n    <BoardWriteBar v-if=\"editor\" :editor=\"editor\" />\n    <div class=\"d-flex mt-2 mb-3\">\n      <select v-model=\"category\" class=\"form-select w-25 me-1\" id=\"Category\">\n        <option value=\"\" disabled>카테고리</option>\n        <option v-for=\"(value, key) in filteredCategories\" :key=\"key\" :value=\"key\">{{ value }}</option>\n      </select>\n      <input v-model=\"title\" class=\"form-control\" placeholder=\"제목을 입력하세요\">\n    </div>\n    <div ref=\"editorElement\" class=\"editor-content\"></div>\n  </div>\n  <div class=\"d-flex justify-content-end\">\n    <button type=\"button\" class=\"btn btn-primary mt-3 mb-3\" @click=\"handleSubmit\">\n      {{ selectBoard ? '편집' : '게시' }}\n    </button>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport { ref, onMounted, onBeforeUnmount, computed } from \"vue\";\nimport { Editor } from \"@tiptap/vue-3\";\nimport StarterKit from \"@tiptap/starter-kit\";\nimport Underline from \"@tiptap/extension-underline\";\nimport TextAlign from \"@tiptap/extension-text-align\";\nimport Link from \"@tiptap/extension-link\";\nimport Image from \"@tiptap/extension-image\";\nimport BoardWriteBar from \"./BoardWriteBar.vue\";\n\nexport default {\n  components: {\n    BoardWriteBar,\n  },\n  computed: {\n    filteredCategories() {\n      return Object.entries(this.categories).reduce((acc, [key, value]) => {\n        if (key !== '0') {\n          acc[key] = value;\n        }\n        return acc;\n      }, {});\n    }\n  },\n  setup(props) {\n    const editor = ref(null);\n    const editorElement = ref(null);\n    const title = ref(props.selectBoard?.title || \"\");\n    const category = ref(props.selectBoard?.category_id || \"\");\n    const user_id = ref(sessionStorage.getItem(\"user_id\"));\n    const isEditMode = computed(() => !!props.selectBoard); // 편집 모드인지 확인\n    const content = computed(() => props.selectBoard?.content || \"<p>여기에 내용을 입력하세요.</p>\");\n\n    onMounted(() => {\n      editor.value = new Editor({\n        element: editorElement.value,\n        extensions: [StarterKit, Underline, TextAlign, Link, Image],\n        content: content.value,\n      });\n    });\n\n    onBeforeUnmount(() => {\n      if (editor.value) {\n        editor.value.destroy();\n      }\n    });\n\n    const handleSubmit = () => {\n      const postContent = editor.value.getHTML();\n      if (!title.value || !category.value || !postContent) {\n        return alert(\"모든 필드를 입력해주세요.\");\n      }\n\n      const payload = {\n        title: title.value,\n        content: postContent,\n        category: category.value,\n        user_id: user_id.value,\n      };\n\n      const apiURL = isEditMode.value ? `${props.BackURL}/boardPosttingEdit` : `${props.BackURL}/boardPostting`;\n\n      // 편집 시 board_id 포함\n      if (isEditMode.value) { payload.board_id = props.selectBoard.board_id; }\n\n      axios.post(apiURL, payload)\n        .then((res) => {\n          if (res.data.status === \"success\") {\n            alert(isEditMode.value ? \"게시글이 수정되었습니다.\" : \"게시글이 작성되었습니다.\");\n            window.location.reload();\n          } else {\n            alert(\"처리 중 오류가 발생했습니다.\");\n          }\n        })\n        .catch(() => alert(\"서버 오류가 발생했습니다.\"));\n    };\n\n    return { editor, editorElement, title, category, handleSubmit };\n  },\n  props: {\n    categories: Object,\n    BackURL: String,\n    selectBoard: Object,\n  },\n};\n</script>\n\n<style scoped>\n.editor {\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  min-height: 50vh;\n  padding: 16px;\n}\n.editor-content {\n  min-height: 200px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}