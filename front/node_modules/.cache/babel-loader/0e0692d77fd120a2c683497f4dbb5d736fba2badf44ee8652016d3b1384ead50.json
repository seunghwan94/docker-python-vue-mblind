{"ast":null,"code":"import axios from 'axios';\nexport default {\n  data() {\n    return {\n      comments: [],\n      user_img: sessionStorage.getItem('user_img'),\n      user_name: sessionStorage.getItem('user_name'),\n      commentText: '',\n      commentCount: this.selectPost.comment_count,\n      dropdownVisible: false,\n      isEditingPost: false,\n      editTitle: '',\n      editContent: ''\n    };\n  },\n  props: {\n    selectPost: Object\n  },\n  mounted() {\n    this.commentList();\n  },\n  methods: {\n    toggleDropdown() {\n      this.dropdownVisible = !this.dropdownVisible;\n    },\n    editPost(post_id) {\n      this.editTitle = this.selectPost.title;\n      this.editContent = this.stripHtml(this.selectPost.content);\n      this.isEditingPost = true;\n      this.dropdownVisible = false;\n      this.$emit('updateStatusEdit', post_id);\n    },\n    cancelPostEdit() {\n      this.isEditingPost = false;\n    },\n    async savePostEdit() {\n      try {\n        const response = await axios.post('http://127.0.0.1:3000/postedit', {\n          post_id: this.selectPost.post_id,\n          title: this.editTitle,\n          content: this.editContent\n        });\n        if (response.data.status === 'success') {\n          // this.selectPost.title = this.editTitle;\n          // this.selectPost.content = this.editContent;\n          this.isEditingPost = false;\n        } else {\n          console.error('Failed to edit post');\n        }\n      } catch (error) {\n        console.error('Error editing post:', error);\n      }\n    },\n    async deletePost() {\n      if (confirm(\"삭제하시겠습니까?\")) {\n        try {\n          const response = await axios.post('http://127.0.0.1:3000/postdelete', {\n            post_id: this.selectPost.post_id\n          });\n          if (response.data.status === 'success') {\n            alert('게시글이 삭제되었습니다.');\n            this.$emit('postDeleted', this.selectPost.post_id);\n          } else {\n            console.error('Failed to delete post');\n          }\n        } catch (error) {\n          console.error('Error deleting post:', error);\n        }\n      }\n    },\n    toggleEdit(index) {\n      this.comments[index].isEditing = !this.comments[index].isEditing;\n      if (this.comments[index].isEditing) {\n        this.comments[index].editContent = this.comments[index].content;\n      }\n    },\n    cancelEdit(index) {\n      this.comments[index].isEditing = false;\n    },\n    async saveEdit(index, comment_id) {\n      if (confirm(\"수정하시겠습니까?\")) {\n        const editedComment = this.comments[index].editContent;\n        try {\n          const response = await axios.post('http://127.0.0.1:3000/commentedit', {\n            comment_id: comment_id,\n            content: editedComment\n          });\n          if (response.data.status === 'success') {\n            this.comments[index].content = editedComment;\n            this.comments[index].isEditing = false;\n          } else {\n            console.error('Failed to edit comment');\n          }\n        } catch (error) {\n          console.error('Error editing comment:', error);\n        }\n      }\n    },\n    async commentDelete(index, comment_id) {\n      if (confirm(\"삭제하시겠습니까?\")) {\n        try {\n          const response = await axios.post('http://127.0.0.1:3000/commentdelete', {\n            comment_id: comment_id\n          });\n          if (response.data.status === 'success') {\n            this.comments.splice(index, 1); // 배열에서 해당 댓글을 완전히 제거합니다.\n            this.commentCount -= 1; // 댓글 수를 하나 줄입니다.\n          } else {\n            console.error('Failed to delete comment');\n          }\n        } catch (error) {\n          console.error('Error deleting comment:', error);\n        }\n      }\n    },\n    updateComment(event) {\n      this.commentText = event.target.innerText;\n    },\n    formatDate(dateString) {\n      let date = new Date(dateString);\n      let year = date.getFullYear();\n      let month = ('0' + (date.getMonth() + 1)).slice(-2);\n      let day = ('0' + date.getDate()).slice(-2);\n      let hours = ('0' + date.getHours()).slice(-2);\n      let minutes = ('0' + date.getMinutes()).slice(-2);\n      return `${year}-${month}-${day} ${hours}:${minutes}`;\n    },\n    stripHtml(html) {\n      let doc = new DOMParser().parseFromString(html, 'text/html');\n      let text = doc.body.textContent || \"\";\n      return text;\n    },\n    async commentAdd(post_id) {\n      try {\n        const user_id = sessionStorage.getItem('user_id');\n        const comment = this.commentText;\n        const response = await axios.get(`http://127.0.0.1:3000/commentadd`, {\n          params: {\n            post_id: post_id,\n            user_id: user_id,\n            comment: comment\n          }\n        });\n        if (response.data.status === 'success') {\n          this.commentList();\n          this.commentText = '';\n          this.$refs.editableContent.innerText = '';\n          this.commentCount = this.commentCount + 1;\n          alert('댓글이 등록되었습니다.');\n        } else {\n          console.log('댓글 등록 실패');\n        }\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    },\n    async commentList() {\n      try {\n        const response = await axios.get(`http://127.0.0.1:3000/commentlist`, {\n          params: {\n            post_id: this.selectPost.post_id\n          }\n        });\n        if (response.data.status === 'success') {\n          this.comments = response.data.res.map(comment => ({\n            ...comment,\n            isEditing: false,\n            editContent: ''\n          }));\n        } else {\n          console.error('Failed to fetch comments:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","comments","user_img","sessionStorage","getItem","user_name","commentText","commentCount","selectPost","comment_count","dropdownVisible","isEditingPost","editTitle","editContent","props","Object","mounted","commentList","methods","toggleDropdown","editPost","post_id","title","stripHtml","content","$emit","cancelPostEdit","savePostEdit","response","post","status","console","error","deletePost","confirm","alert","toggleEdit","index","isEditing","cancelEdit","saveEdit","comment_id","editedComment","commentDelete","splice","updateComment","event","target","innerText","formatDate","dateString","date","Date","year","getFullYear","month","getMonth","slice","day","getDate","hours","getHours","minutes","getMinutes","html","doc","DOMParser","parseFromString","text","body","textContent","commentAdd","user_id","comment","get","params","$refs","editableContent","log","res","map","message"],"sources":["/var/www/front/src/components/Board/BoardView.vue"],"sourcesContent":["<template>\n    <div class=\"card border-success mb-3\" style=\"max-width: 100%\">\n        <div class=\"card-header d-flex\" style=\"justify-content: space-between;\">\n            {{ selectPost.category_name }}\n            <p class=\"card-text\">{{ selectPost.user_username }}</p>\n        </div>\n        <div class=\"card-body\">\n            <div class=\"d-flex justify-content-between\">\n                <h4 class=\"card-title mt-3 mb-3\" v-if=\"!isEditingPost\">{{ selectPost.title }}</h4>\n                <input v-else v-model=\"editTitle\" class=\"form-control mt-3 mb-3\" />\n                <div class=\"dropdown\">\n                    <div type=\"button\" @click=\"toggleDropdown\" style=\"cursor: pointer;\">\n                        <i class=\"bi bi-three-dots-vertical\"></i>\n                    </div>\n                    <div v-if=\"dropdownVisible\" class=\"dropdown-menu show\">\n                        <button class=\"dropdown-item\" @click=\"editPost(selectPost.post_id)\">수정</button>\n                        <button class=\"dropdown-item\" @click=\"deletePost\">삭제</button>\n                    </div>\n                </div>\n            </div>\n            <div v-if=\"!isEditingPost\">{{ stripHtml(selectPost.content) }}</div>\n            <textarea v-else v-model=\"editContent\" class=\"form-control mb-3\" rows=\"5\"></textarea>\n            <div v-if=\"isEditingPost\" class=\"d-flex justify-content-end mb-3\">\n                <button class=\"btn btn-primary btn-sm\" @click=\"savePostEdit\">저장</button>\n                <button class=\"btn btn-secondary btn-sm ms-2\" @click=\"cancelPostEdit\">취소</button>\n            </div>\n            <div class=\"d-flex mt-5\" style=\"justify-content: space-between;\">\n                <p class=\"text-body-tertiary pe-2 m-0\">{{ formatDate(selectPost.create_date) }}</p>\n                <div class=\"d-flex justify-content-end\">\n                    <p class=\"text-body-tertiary pe-2 m-0\"><i class=\"bi bi-eye\"></i> {{ selectPost.view_count }}</p>\n                    <p class=\"text-body-tertiary pe-2 m-0\"><i class=\"bi bi-chat-dots\"></i> {{ commentCount }}</p>\n                </div>\n            </div>\n        </div>\n        <div class=\"card bg-light m-2\" style=\"max-width: 100%;\">\n            <div class=\"card-header\">댓글</div>\n            <div v-if=\"comments.length > 0\" class=\"d-flex p-3 pb-0 \" style=\"display:flex; flex-direction: column;\">\n                <div v-for=\"(commentdata, index) in comments\" :key=\"index\" class=\"card border-light mb-3\" style=\"max-width: 100%;\">\n                    <div class=\"card-body align-items-center\" style=\"display:flex;flex-direction: row;\">\n                        <img :src=\"require(`../assets/img/${commentdata.img}`)\" style=\"width: 50px;border-radius: 50%;\">\n                        <div class=\"w-100 ps-4\">\n                            <div class=\"d-flex\" style=\"align-items: center;justify-content: space-between;\">\n                                <p style=\"font-weight: bold; margin:0;\">{{ commentdata.name }}</p>\n                                <div class=\"d-flex\" v-if=\"commentdata.name === user_name\">\n                                    <div type=\"button\" class=\"m-0\" style=\"font-size: 16px;\" @click=\"toggleEdit(index)\"><i class=\"bi bi-pencil-square\"></i></div>\n                                    <div type=\"button\" class=\"m-0 ms-1\" style=\"font-size: 16px;\" @click=\"commentDelete(index, commentdata.id)\"><i class=\"bi bi-trash\"></i></div>\n                                </div>\n                            </div>\n\n                            <div v-if=\"commentdata.isEditing\">\n                                <textarea v-model=\"commentdata.editContent\" class=\"form-control\" rows=\"2\"></textarea>\n                                <div class=\"d-flex mt-2 mb-2\" style=\"justify-content: flex-end;\">\n                                    <button class=\"btn btn-primary btn-sm \" @click=\"saveEdit(index, commentdata.id)\">수정</button>\n                                    <button class=\"btn btn-secondary btn-sm  ms-2\" @click=\"cancelEdit(index)\">취소</button>\n                                </div>\n                            </div>\n\n                            <p v-else class=\"card-text m-0\">{{ commentdata.content }}</p>\n\n                            <p class=\"text-body-tertiary m-0\" style=\"text-align: end; font-size: 13px;\">{{ formatDate(commentdata.create_date) }}</p>\n                        </div>\n                    </div>\n                </div>\n                <hr style=\"margin-bottom:0\"/>\n            </div>\n            <div class=\"card-body d-flex pb-0\">\n                <div class=\"d-flex\" style=\"align-items: flex-start\">\n                    <img :src=\"require(`../assets/img/${user_img}`)\" style=\"width: 50px;border-radius: 50%;\">\n                </div>\n                <div class=\"form-control ms-2\" id=\"comment\" style=\"height: auto; min-height: 80px;\">\n                    <div contenteditable=\"false\" style=\"font-weight: bold;\">{{ user_name }}</div>\n                    <div contenteditable=\"true\" ref=\"editableContent\" @input=\"updateComment\" style=\"outline: none; border: 2px solid transparent;\"></div>\n                </div>\n            </div>\n            <div class=\"d-flex justify-content-end\">\n                <button type=\"button\" class=\"btn btn-outline-primary m-3\" @click=\"commentAdd(selectPost.post_id)\">등록</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n    data() {\n        return {\n            comments: [],\n            user_img: sessionStorage.getItem('user_img'),\n            user_name: sessionStorage.getItem('user_name'),\n            commentText: '',\n            commentCount: this.selectPost.comment_count,\n            dropdownVisible: false,\n            isEditingPost: false,\n            editTitle: '',\n            editContent: ''\n        };\n    },\n    props: {\n        selectPost: Object\n    },\n    mounted() {\n        this.commentList();\n    },\n    methods: {\n        toggleDropdown() {\n            this.dropdownVisible = !this.dropdownVisible;\n        },\n        editPost(post_id) {\n            this.editTitle = this.selectPost.title;\n            this.editContent = this.stripHtml(this.selectPost.content);\n            this.isEditingPost = true;\n            this.dropdownVisible = false;\n            this.$emit('updateStatusEdit',post_id)\n        },\n        cancelPostEdit() {\n            this.isEditingPost = false;\n        },\n        async savePostEdit() {\n            try {\n                const response = await axios.post('http://127.0.0.1:3000/postedit', {\n                    post_id: this.selectPost.post_id,\n                    title: this.editTitle,\n                    content: this.editContent\n                });\n                if (response.data.status === 'success') {\n                    // this.selectPost.title = this.editTitle;\n                    // this.selectPost.content = this.editContent;\n                    this.isEditingPost = false;\n                } else {\n                    console.error('Failed to edit post');\n                }\n            } catch (error) {\n                console.error('Error editing post:', error);\n            }\n        },\n        async deletePost() {\n            if (confirm(\"삭제하시겠습니까?\")) {\n                try {\n                    const response = await axios.post('http://127.0.0.1:3000/postdelete', {\n                        post_id: this.selectPost.post_id\n                    });\n                    if (response.data.status === 'success') {\n                        alert('게시글이 삭제되었습니다.');\n                        this.$emit('postDeleted', this.selectPost.post_id);\n                    } else {\n                        console.error('Failed to delete post');\n                    }\n                } catch (error) {\n                    console.error('Error deleting post:', error);\n                }\n            }\n        },\n        toggleEdit(index) {\n            this.comments[index].isEditing = !this.comments[index].isEditing;\n            if (this.comments[index].isEditing) {\n                this.comments[index].editContent = this.comments[index].content;\n            }\n        },\n        cancelEdit(index) {\n            this.comments[index].isEditing = false;\n        },\n        async saveEdit(index, comment_id) {\n            if (confirm(\"수정하시겠습니까?\")) {\n                const editedComment = this.comments[index].editContent;\n                try {\n                    const response = await axios.post('http://127.0.0.1:3000/commentedit', {\n                        comment_id: comment_id,\n                        content: editedComment\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments[index].content = editedComment;\n                        this.comments[index].isEditing = false;\n                    } else {\n                        console.error('Failed to edit comment');\n                    }\n                } catch (error) {\n                    console.error('Error editing comment:', error);\n                }\n            }\n        },\n        async commentDelete(index, comment_id) {\n            if (confirm(\"삭제하시겠습니까?\")) {\n                try {\n                    const response = await axios.post('http://127.0.0.1:3000/commentdelete', {\n                        comment_id: comment_id\n                    });\n                    if (response.data.status === 'success') {\n                        this.comments.splice(index, 1); // 배열에서 해당 댓글을 완전히 제거합니다.\n                        this.commentCount -= 1;         // 댓글 수를 하나 줄입니다.\n                    } else {\n                        console.error('Failed to delete comment');\n                    }\n                } catch (error) {\n                    console.error('Error deleting comment:', error);\n                }\n            }\n        },\n        updateComment(event) {\n            this.commentText = event.target.innerText;\n        },\n        formatDate(dateString) {\n            let date = new Date(dateString);\n            let year = date.getFullYear();\n            let month = ('0' + (date.getMonth() + 1)).slice(-2);\n            let day = ('0' + date.getDate()).slice(-2);\n            let hours = ('0' + date.getHours()).slice(-2);\n            let minutes = ('0' + date.getMinutes()).slice(-2);\n            return `${year}-${month}-${day} ${hours}:${minutes}`;\n        },\n        stripHtml(html) {\n            let doc = new DOMParser().parseFromString(html, 'text/html');\n            let text = doc.body.textContent || \"\";\n            return text;\n        },\n        async commentAdd(post_id) {\n            try {\n                const user_id = sessionStorage.getItem('user_id');\n                const comment = this.commentText;\n                const response = await axios.get(`http://127.0.0.1:3000/commentadd`, {\n                    params: {\n                        post_id: post_id,\n                        user_id: user_id,\n                        comment: comment\n                    }\n                });\n                if (response.data.status === 'success') {\n                    this.commentList();\n                    this.commentText = '';\n                    this.$refs.editableContent.innerText = '';\n                    this.commentCount = this.commentCount + 1;\n                    alert('댓글이 등록되었습니다.');\n                } else {\n                    console.log('댓글 등록 실패');\n                }\n            } catch (error) {\n                console.error('Error fetching posts:', error);\n            }\n        },\n        async commentList() {\n            try {\n                const response = await axios.get(`http://127.0.0.1:3000/commentlist`, {\n                    params: {\n                        post_id: this.selectPost.post_id\n                    }\n                });\n                if (response.data.status === 'success') {\n                    this.comments = response.data.res.map(comment => ({\n                        ...comment,\n                        isEditing: false,\n                        editContent: ''\n                    }));\n                } else {\n                    console.error('Failed to fetch comments:', response.data.message);\n                }\n            } catch (error) {\n                console.error('Error fetching comments:', error);\n            }\n        }\n    }\n};\n</script>\n\n<style>\ndiv[contenteditable=\"true\"]:focus {\n    border-color: #5FC8A5;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}