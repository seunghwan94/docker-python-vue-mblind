{"ast":null,"code":"import axios from 'axios';\nimport BoardList from './BoardList.vue';\nimport BoardView from './BoardView.vue';\nimport BoardWrite from './BoardWrite.vue';\nimport Pagintion from '../Pagintion.vue';\nexport default {\n  data() {\n    return {\n      // 카테고리 목록 및 선택\n      categories: {},\n      selectedCategory: '1',\n      // 게시글\n      posts: [],\n      // 페이징\n      totalPosts: 0,\n      currentPage: 1,\n      perPage: 10,\n      // 상태관리\n      status: 'BoardList',\n      // 글쓰기할때 setup 사용( this 작동 안함 )\n      BackURL: this.$BackURL,\n      selectBoard: '',\n      user_id: sessionStorage.getItem('user_id')\n    };\n  },\n  created() {\n    this.fetchCategories();\n    this.fetchPosts();\n  },\n  watch: {\n    // Watcher for selectedCategory\n    selectedCategory(newCategory, oldCategory) {\n      if (newCategory !== oldCategory) {\n        this.currentPage = 1; // Reset to the first page when category changes\n        this.posts = [], this.fetchPosts(); // Fetch posts for the new category\n      }\n    }\n  },\n  methods: {\n    async fetchCategories() {\n      try {\n        const response = await axios.get(`${this.$BackURL}/category`);\n        if (response.data.status === 'success') {\n          this.categories = response.data.res.reduce((acc, category) => {\n            acc[category.id] = category.name;\n            return acc;\n          }, {});\n        } else {\n          console.error('Failed to fetch categories:', response.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching categories:', error);\n      }\n    },\n    async getBoardViewCount(board_id) {\n      try {\n        const response = await axios.get(`${this.$BackURL}/boardViewCnt`, {\n          params: {\n            user_id: this.user_id,\n            board_id: board_id\n          }\n        });\n        console.log('Response status:', response.data.status);\n      } catch (error) {\n        console.error('Error fetching board view count:', error);\n      }\n    },\n    async fetchPosts(page = this.currentPage) {\n      try {\n        // api 요청 \n        const postsResponse = await axios.get(`${this.$BackURL}/boardList`, {\n          params: {\n            category_id: this.selectedCategory,\n            page: page,\n            per_page: this.perPage\n          }\n        });\n        // response\n        if (postsResponse.data.status === 'success') {\n          this.posts = postsResponse.data.res;\n        } else {\n          console.error('Failed to fetch posts:', postsResponse.data.message);\n        }\n\n        // total posts\n        const totalPostsResponse = await axios.get(`${this.$BackURL}/boardListPage`, {\n          params: {\n            category_id: this.selectedCategory\n          }\n        });\n        // response\n        if (totalPostsResponse.data.status === 'success') {\n          if (totalPostsResponse.data.res[0].total_posts == 0) {\n            // 데이터가 없는경우\n            this.totalPosts = 1;\n          } else {\n            this.totalPosts = totalPostsResponse.data.res[0].total_posts;\n          }\n        } else {\n          console.error('Failed to fetch total posts:', totalPostsResponse.data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching posts or total posts:', error);\n      }\n    },\n    selectCategory(key) {\n      this.selectedCategory = key;\n      this.currentPage = 1; // Reset to the first page when category changes\n      this.status = 'BoardList';\n      this.fetchPosts();\n    },\n    updatePage(page) {\n      this.currentPage = page;\n      this.fetchPosts(page);\n    },\n    startWriting() {\n      this.selectBoard = ''; // selectBoard를 공백으로 초기화\n      this.changeStatus('BoardWrite'); // 상태 변경\n    },\n    SelectPost(board_id, edit = false) {\n      const SelectBoardPost = this.posts.find(board => board.board_id === board_id);\n      this.selectBoard = SelectBoardPost;\n      if (edit) {\n        this.changeStatus('BoardWrite');\n      } else {\n        this.getBoardViewCount(board_id);\n        this.changeStatus('BoardView');\n      }\n    },\n    changeStatus(target) {\n      this.status = target;\n    }\n  },\n  components: {\n    BoardList,\n    BoardView,\n    BoardWrite,\n    Pagintion\n  }\n};","map":{"version":3,"names":["axios","BoardList","BoardView","BoardWrite","Pagintion","data","categories","selectedCategory","posts","totalPosts","currentPage","perPage","status","BackURL","$BackURL","selectBoard","user_id","sessionStorage","getItem","created","fetchCategories","fetchPosts","watch","newCategory","oldCategory","methods","response","get","res","reduce","acc","category","id","name","console","error","message","getBoardViewCount","board_id","params","log","page","postsResponse","category_id","per_page","totalPostsResponse","total_posts","selectCategory","key","updatePage","startWriting","changeStatus","SelectPost","edit","SelectBoardPost","find","board","target","components"],"sources":["/var/www/front/src/components/Board/MainBoard.vue"],"sourcesContent":["<template>\n    <div class=\"d-flex flex-column\">\n      <div class=\"category-buttons\" style=\"margin:10px\">\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-primary m-2\"\n          :class=\"{ active: selectedCategory === key }\"\n          v-for=\"(value, key) in categories\"\n          :key=\"key\"\n          @click=\"selectCategory(key)\"\n          >\n          {{ value }}\n        </button>\n      </div>\n      <!-- 게시판 목록 -->\n      <div v-if=\"status == 'BoardList'\"> \n        <BoardList :posts=\"posts\" :selectedCategory=\"selectedCategory\" @SelectPost=\"SelectPost\"/>\n        <div class=\"d-flex justify-content-end\">\n          <button type=\"button\" class=\"btn btn-outline-primary m-2\" @click=\"startWriting\">글쓰기</button>\n        </div>\n        <Pagintion :totalPosts=\"totalPosts\" :currentPage=\"currentPage\" :perPage=\"perPage\" @updatePage=\"updatePage\"/>\n      </div>\n      <!-- 게시판 보기 -->\n      <BoardView v-else-if=\"status == 'BoardView'\" :selectBoard=\"selectBoard\" @SelectPost=\"SelectPost\"/> \n      <!-- 글쓰기 -->\n      <BoardWrite v-else-if=\"status == 'BoardWrite'\" :categories=\"categories\" :BackURL=\"BackURL\" :selectBoard=\"selectBoard\"/>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import BoardList from './BoardList.vue';\n  import BoardView from './BoardView.vue';\n  import BoardWrite from './BoardWrite.vue';\n  import Pagintion from '../Pagintion.vue';\n  \n  export default {\n    data() {\n      return {\n        // 카테고리 목록 및 선택\n        categories: {},\n        selectedCategory: '1',\n        // 게시글\n        posts: [],\n        // 페이징\n        totalPosts: 0,\n        currentPage: 1,\n        perPage: 10,\n        // 상태관리\n        status: 'BoardList',\n        // 글쓰기할때 setup 사용( this 작동 안함 )\n        BackURL: this.$BackURL,\n        selectBoard: '',\n        user_id: sessionStorage.getItem('user_id'),\n      }\n    },\n    created() {\n      this.fetchCategories();\n      this.fetchPosts();\n    },\n    watch: {\n        // Watcher for selectedCategory\n        selectedCategory(newCategory, oldCategory) {\n            if (newCategory !== oldCategory) {\n                this.currentPage = 1; // Reset to the first page when category changes\n                this.posts = [],\n                this.fetchPosts(); // Fetch posts for the new category\n            }\n        }\n    },\n    methods: {\n      async fetchCategories() {\n        try {\n          const response = await axios.get(`${this.$BackURL}/category`);\n          if (response.data.status === 'success') {\n            this.categories = response.data.res.reduce((acc, category) => {\n              acc[category.id] = category.name;\n              return acc;\n            }, {});\n          } else {\n            console.error('Failed to fetch categories:', response.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching categories:', error);\n        }\n      },\n      async getBoardViewCount(board_id) {\n        try {\n          const response = await axios.get(`${this.$BackURL}/boardViewCnt`, {\n            params: {\n              user_id: this.user_id,\n              board_id: board_id\n            }\n          });\n          console.log('Response status:', response.data.status);\n        } catch (error) {\n          console.error('Error fetching board view count:', error);\n        }\n      },\n      async fetchPosts(page = this.currentPage) {\n        try {\n          // api 요청 \n          const postsResponse = await axios.get(`${this.$BackURL}/boardList`, {\n            params: {\n              category_id: this.selectedCategory,\n              page: page,\n              per_page: this.perPage\n            }\n          });\n          // response\n          if (postsResponse.data.status === 'success') {\n            this.posts = postsResponse.data.res;\n          } else {\n            console.error('Failed to fetch posts:', postsResponse.data.message);\n          }\n  \n          // total posts\n          const totalPostsResponse = await axios.get(`${this.$BackURL}/boardListPage`, {\n            params: {\n              category_id: this.selectedCategory\n            }\n          });\n          // response\n          if (totalPostsResponse.data.status === 'success') {\n            if (totalPostsResponse.data.res[0].total_posts == 0){\n              // 데이터가 없는경우\n              this.totalPosts = 1; \n            }else{\n              this.totalPosts = totalPostsResponse.data.res[0].total_posts;\n            }\n          } else {\n            console.error('Failed to fetch total posts:', totalPostsResponse.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching posts or total posts:', error);\n        }\n      },\n      selectCategory(key) {\n        this.selectedCategory = key;\n        this.currentPage = 1; // Reset to the first page when category changes\n        this.status = 'BoardList';\n        this.fetchPosts();\n      },\n      updatePage(page) {\n        this.currentPage = page;\n        this.fetchPosts(page);\n      },\n      startWriting() {\n        this.selectBoard = ''; // selectBoard를 공백으로 초기화\n        this.changeStatus('BoardWrite'); // 상태 변경\n      },\n      \n      SelectPost(board_id,edit=false){\n        const SelectBoardPost = this.posts.find(board => board.board_id === board_id);\n        this.selectBoard = SelectBoardPost;\n\n        if (edit){\n          this.changeStatus('BoardWrite');\n        }else{\n          this.getBoardViewCount(board_id);\n          this.changeStatus('BoardView');\n        }\n      },\n      changeStatus(target){\n        this.status = target;\n      },\n    },\n    components: {\n      BoardList,\n      BoardView,\n      BoardWrite,\n      Pagintion,\n    }\n  }\n  </script>\n  \n  <style>\n  .container {\n    padding: 20px;\n  }\n  .category-buttons {\n    margin-bottom: 20px;\n  }\n  /* 기본 카드 스타일 */\n  .card.border-primary {\n    transition: background-color 0.3s, box-shadow 0.3s, color 0.3s; /* 배경색, 그림자, 글자색에 대해 transition 설정 */\n  }\n  /* 카드에 마우스 오버 시 효과 */\n  .card.border-primary:hover {\n    background-color: #78C2AD; /* 배경색 변경 */\n    color: white; /* 텍스트 색상 변경 */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* 카드에 그림자 추가 */\n  }\n  </style>\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}