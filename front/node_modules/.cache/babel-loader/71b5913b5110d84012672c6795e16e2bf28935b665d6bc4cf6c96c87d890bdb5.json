{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"d-flex flex-column\"\n};\nconst _hoisted_2 = {\n  class: \"category-buttons\",\n  style: {\n    \"margin\": \"10px\"\n  }\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 0\n};\nconst _hoisted_5 = {\n  class: \"d-flex justify-content-end\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BoardList = _resolveComponent(\"BoardList\");\n  const _component_Pagintion = _resolveComponent(\"Pagintion\");\n  const _component_BoardView = _resolveComponent(\"BoardView\");\n  const _component_BoardWrite = _resolveComponent(\"BoardWrite\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.categories, (value, key) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      type: \"button\",\n      class: _normalizeClass([\"btn btn-outline-primary m-2\", {\n        active: $data.selectedCategory === key\n      }]),\n      key: key,\n      onClick: $event => $options.selectCategory(key)\n    }, _toDisplayString(value), 11 /* TEXT, CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.status == 'BoardList' ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createCommentVNode(\" 게시판 목록 \"), _createVNode(_component_BoardList, {\n    posts: $data.posts,\n    selectedCategory: $data.selectedCategory\n  }, null, 8 /* PROPS */, [\"posts\", \"selectedCategory\"]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-outline-primary m-2\",\n    onClick: _cache[0] || (_cache[0] = $event => $data.status = 'BoardWrite')\n  }, \"글쓰기\")]), _createCommentVNode(\" 페이징 \"), _createVNode(_component_Pagintion, {\n    totalPosts: $data.totalPosts,\n    currentPage: $data.currentPage,\n    perPage: $data.perPage,\n    onUpdatePage: $options.updatePage\n  }, null, 8 /* PROPS */, [\"totalPosts\", \"currentPage\", \"perPage\", \"onUpdatePage\"])])) : $data.status == 'BoardList' ? (_openBlock(), _createBlock(_component_BoardView, {\n    key: 1\n  })) : $data.status == 'BoardWrite' ? (_openBlock(), _createElementBlock(_Fragment, {\n    key: 2\n  }, [_createCommentVNode(\" 글쓰기 \"), _createVNode(_component_BoardWrite, {\n    categories: $data.categories,\n    BackURL: $data.BackURL\n  }, null, 8 /* PROPS */, [\"categories\", \"BackURL\"])], 2112 /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */)) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","style","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","categories","value","type","_normalizeClass","active","selectedCategory","onClick","$event","$options","selectCategory","_hoisted_3","status","_hoisted_4","_createCommentVNode","_createVNode","_component_BoardList","posts","_hoisted_5","_cache","_component_Pagintion","totalPosts","currentPage","perPage","onUpdatePage","updatePage","_createBlock","_component_BoardView","_component_BoardWrite","BackURL"],"sources":["/var/www/front/src/components/Board/MainBoard.vue"],"sourcesContent":["<template>\n    <div class=\"d-flex flex-column\">\n      <div class=\"category-buttons\" style=\"margin:10px\">\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-primary m-2\"\n          :class=\"{ active: selectedCategory === key }\"\n          v-for=\"(value, key) in categories\"\n          :key=\"key\"\n          @click=\"selectCategory(key)\"\n          >\n          {{ value }}\n        </button>\n      </div>\n      <div v-if=\"status == 'BoardList'\"> \n        <!-- 게시판 목록 -->\n        <BoardList :posts=\"posts\" :selectedCategory=\"selectedCategory\"/>\n        <div class=\"d-flex justify-content-end\">\n          <button type=\"button\" class=\"btn btn-outline-primary m-2\" @click=\"status='BoardWrite'\">글쓰기</button>\n        </div>\n        <!-- 페이징 -->\n        <Pagintion :totalPosts=\"totalPosts\" :currentPage=\"currentPage\" :perPage=\"perPage\" @updatePage=\"updatePage\"/>\n      </div>\n      <BoardView v-else-if=\"status == 'BoardList'\"/> \n      <!-- 글쓰기 -->\n      <BoardWrite v-else-if=\"status == 'BoardWrite'\" :categories=\"categories\" :BackURL=\"BackURL\"/>\n\n            \n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import BoardList from './BoardList.vue';\n  import BoardWrite from './BoardWrite.vue';\n  import BoardView from './BoardView.vue';\n  import Pagintion from '../Pagintion.vue';\n  \n  export default {\n    data() {\n      return {\n        selectedCategory: '1',\n        categories: {},\n        posts: [],\n        totalPosts: 0,\n        currentPage: 1,\n        perPage: 10,\n        status: 'BoardList',\n        BackURL: this.$BackURL, \n      }\n    },\n    created() {\n      this.fetchCategories();\n      this.fetchPosts();\n    },\n    watch: {\n        // Watcher for selectedCategory\n        selectedCategory(newCategory, oldCategory) {\n            if (newCategory !== oldCategory) {\n                this.currentPage = 1; // Reset to the first page when category changes\n                this.posts = [],\n                this.fetchPosts(); // Fetch posts for the new category\n            }\n        }\n    },\n    methods: {\n      async fetchCategories() {\n        try {\n          const response = await axios.get(`${this.$BackURL}/category`);\n          if (response.data.status === 'success') {\n            this.categories = response.data.res.reduce((acc, category) => {\n              acc[category.id] = category.name;\n              return acc;\n            }, {});\n          } else {\n            console.error('Failed to fetch categories:', response.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching categories:', error);\n        }\n      },\n      async fetchPosts(page = this.currentPage) {\n        try {\n          // api 요청 \n          const postsResponse = await axios.get(`${this.$BackURL}/boardList`, {\n            params: {\n              category_id: this.selectedCategory,\n              page: page,\n              per_page: this.perPage\n            }\n          });\n          // response\n          if (postsResponse.data.status === 'success') {\n            this.posts = postsResponse.data.res;\n          } else {\n            console.error('Failed to fetch posts:', postsResponse.data.message);\n          }\n  \n          // total posts\n          const totalPostsResponse = await axios.get(`${this.$BackURL}/boardListPage`, {\n            params: {\n              category_id: this.selectedCategory\n            }\n          });\n          // response\n          if (totalPostsResponse.data.status === 'success') {\n            if (totalPostsResponse.data.res[0].total_posts == 0){\n              // 데이터가 없는경우\n              this.totalPosts = 1; \n            }else{\n              this.totalPosts = totalPostsResponse.data.res[0].total_posts;\n            }\n          } else {\n            console.error('Failed to fetch total posts:', totalPostsResponse.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching posts or total posts:', error);\n        }\n      },\n      selectCategory(key) {\n        this.selectedCategory = key;\n        this.currentPage = 1; // Reset to the first page when category changes\n        this.status = 'BoardList';\n        this.fetchPosts();\n      },\n      updatePage(page) {\n        this.currentPage = page;\n        this.fetchPosts(page);\n      },\n      setActiveTab(tab) {\n        // Implement tab switching logic if needed\n        console.log('Tab switched to:', tab);\n      }\n    },\n    components: {\n      BoardList,\n      BoardWrite,\n      Pagintion,\n      // BoardView,\n    }\n  }\n  </script>\n  \n  <style>\n  .container {\n    padding: 20px;\n  }\n  .category-buttons {\n    margin-bottom: 20px;\n  }\n  /* 기본 카드 스타일 */\n  .card.border-primary {\n    transition: background-color 0.3s, box-shadow 0.3s, color 0.3s; /* 배경색, 그림자, 글자색에 대해 transition 설정 */\n  }\n  /* 카드에 마우스 오버 시 효과 */\n  .card.border-primary:hover {\n    background-color: #78C2AD; /* 배경색 변경 */\n    color: white; /* 텍스트 색상 변경 */\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* 카드에 그림자 추가 */\n  }\n  </style>\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAoB;;EACxBA,KAAK,EAAC,kBAAkB;EAACC,KAAmB,EAAnB;IAAA;EAAA;;mBAFpC;;EAAAC,GAAA;AAAA;;EAiBaF,KAAK,EAAC;AAA4B;;;;;;uBAhB3CG,mBAAA,CA2BM,OA3BNC,UA2BM,GA1BJC,mBAAA,CAWM,OAXNC,UAWM,I,kBAVJH,mBAAA,CASSI,SAAA,QAZjBC,WAAA,CAOiCC,KAAA,CAAAC,UAAU,EAP3C,CAOkBC,KAAK,EAAET,GAAG;yBAJpBC,mBAAA,CASS;MARPS,IAAI,EAAC,QAAQ;MACbZ,KAAK,EALfa,eAAA,EAKgB,6BAA6B;QAAAC,MAAA,EACjBL,KAAA,CAAAM,gBAAgB,KAAKb;MAAG;MAEzCA,GAAG,EAAEA,GAAG;MACRc,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACjB,GAAG;wBAEvBS,KAAK,gCAXlBS,UAAA;oCAciBX,KAAA,CAAAY,MAAM,mB,cAAjBlB,mBAAA,CAQM,OAtBZmB,UAAA,GAeQC,mBAAA,YAAe,EACfC,YAAA,CAAgEC,oBAAA;IAApDC,KAAK,EAAEjB,KAAA,CAAAiB,KAAK;IAAGX,gBAAgB,EAAEN,KAAA,CAAAM;0DAC7CV,mBAAA,CAEM,OAFNsB,UAEM,GADJtB,mBAAA,CAAmG;IAA3FO,IAAI,EAAC,QAAQ;IAACZ,KAAK,EAAC,6BAA6B;IAAEgB,OAAK,EAAAY,MAAA,QAAAA,MAAA,MAAAX,MAAA,IAAER,KAAA,CAAAY,MAAM;KAAe,KAAG,E,GAE5FE,mBAAA,SAAY,EACZC,YAAA,CAA4GK,oBAAA;IAAhGC,UAAU,EAAErB,KAAA,CAAAqB,UAAU;IAAGC,WAAW,EAAEtB,KAAA,CAAAsB,WAAW;IAAGC,OAAO,EAAEvB,KAAA,CAAAuB,OAAO;IAAGC,YAAU,EAAEf,QAAA,CAAAgB;yFAE3EzB,KAAA,CAAAY,MAAM,mB,cAA5Bc,YAAA,CAA8CC,oBAAA;IAvBpDlC,GAAA;EAAA,MAyB6BO,KAAA,CAAAY,MAAM,oB,cAA7BlB,mBAAA,CAA4FI,SAAA;IAzBlGL,GAAA;EAAA,IAwBMqB,mBAAA,SAAY,EACZC,YAAA,CAA4Fa,qBAAA;IAA5C3B,UAAU,EAAED,KAAA,CAAAC,UAAU;IAAG4B,OAAO,EAAE7B,KAAA,CAAA6B;yGAzBxFf,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}