{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport { Plugin, PluginKey, TextSelection, Selection, NodeSelection, EditorState } from '@tiptap/pm/state';\nimport { EditorView } from '@tiptap/pm/view';\nimport { keymap } from '@tiptap/pm/keymap';\nimport { Schema, Fragment, DOMParser, DOMSerializer, Node as Node$1, Slice } from '@tiptap/pm/model';\nimport { liftTarget, ReplaceStep, ReplaceAroundStep, joinPoint, Transform, canSplit, canJoin, findWrapping } from '@tiptap/pm/transform';\nimport { createParagraphNear as createParagraphNear$1, deleteSelection as deleteSelection$1, exitCode as exitCode$1, joinUp as joinUp$1, joinDown as joinDown$1, joinBackward as joinBackward$1, joinForward as joinForward$1, joinTextblockBackward as joinTextblockBackward$1, joinTextblockForward as joinTextblockForward$1, lift as lift$1, liftEmptyBlock as liftEmptyBlock$1, newlineInCode as newlineInCode$1, selectNodeBackward as selectNodeBackward$1, selectNodeForward as selectNodeForward$1, selectParentNode as selectParentNode$1, selectTextblockEnd as selectTextblockEnd$1, selectTextblockStart as selectTextblockStart$1, setBlockType, wrapIn as wrapIn$1 } from '@tiptap/pm/commands';\nimport { liftListItem as liftListItem$1, sinkListItem as sinkListItem$1, wrapInList as wrapInList$1 } from '@tiptap/pm/schema-list';\n\n/**\n * Takes a Transaction & Editor State and turns it into a chainable state object\n * @param config The transaction and state to create the chainable state from\n * @returns A chainable Editor state object\n */\nfunction createChainableState(config) {\n  const {\n    state,\n    transaction\n  } = config;\n  let {\n    selection\n  } = transaction;\n  let {\n    doc\n  } = transaction;\n  let {\n    storedMarks\n  } = transaction;\n  return {\n    ...state,\n    apply: state.apply.bind(state),\n    applyTransaction: state.applyTransaction.bind(state),\n    plugins: state.plugins,\n    schema: state.schema,\n    reconfigure: state.reconfigure.bind(state),\n    toJSON: state.toJSON.bind(state),\n    get storedMarks() {\n      return storedMarks;\n    },\n    get selection() {\n      return selection;\n    },\n    get doc() {\n      return doc;\n    },\n    get tr() {\n      selection = transaction.selection;\n      doc = transaction.doc;\n      storedMarks = transaction.storedMarks;\n      return transaction;\n    }\n  };\n}\nclass CommandManager {\n  constructor(props) {\n    this.editor = props.editor;\n    this.rawCommands = this.editor.extensionManager.commands;\n    this.customState = props.state;\n  }\n  get hasCustomState() {\n    return !!this.customState;\n  }\n  get state() {\n    return this.customState || this.editor.state;\n  }\n  get commands() {\n    const {\n      rawCommands,\n      editor,\n      state\n    } = this;\n    const {\n      view\n    } = editor;\n    const {\n      tr\n    } = state;\n    const props = this.buildProps(tr);\n    return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n      const method = (...args) => {\n        const callback = command(...args)(props);\n        if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n          view.dispatch(tr);\n        }\n        return callback;\n      };\n      return [name, method];\n    }));\n  }\n  get chain() {\n    return () => this.createChain();\n  }\n  get can() {\n    return () => this.createCan();\n  }\n  createChain(startTr, shouldDispatch = true) {\n    const {\n      rawCommands,\n      editor,\n      state\n    } = this;\n    const {\n      view\n    } = editor;\n    const callbacks = [];\n    const hasStartTransaction = !!startTr;\n    const tr = startTr || state.tr;\n    const run = () => {\n      if (!hasStartTransaction && shouldDispatch && !tr.getMeta('preventDispatch') && !this.hasCustomState) {\n        view.dispatch(tr);\n      }\n      return callbacks.every(callback => callback === true);\n    };\n    const chain = {\n      ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n        const chainedCommand = (...args) => {\n          const props = this.buildProps(tr, shouldDispatch);\n          const callback = command(...args)(props);\n          callbacks.push(callback);\n          return chain;\n        };\n        return [name, chainedCommand];\n      })),\n      run\n    };\n    return chain;\n  }\n  createCan(startTr) {\n    const {\n      rawCommands,\n      state\n    } = this;\n    const dispatch = false;\n    const tr = startTr || state.tr;\n    const props = this.buildProps(tr, dispatch);\n    const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n      return [name, (...args) => command(...args)({\n        ...props,\n        dispatch: undefined\n      })];\n    }));\n    return {\n      ...formattedCommands,\n      chain: () => this.createChain(tr, dispatch)\n    };\n  }\n  buildProps(tr, shouldDispatch = true) {\n    const {\n      rawCommands,\n      editor,\n      state\n    } = this;\n    const {\n      view\n    } = editor;\n    const props = {\n      tr,\n      editor,\n      view,\n      state: createChainableState({\n        state,\n        transaction: tr\n      }),\n      dispatch: shouldDispatch ? () => undefined : undefined,\n      chain: () => this.createChain(tr, shouldDispatch),\n      can: () => this.createCan(tr),\n      get commands() {\n        return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n          return [name, (...args) => command(...args)(props)];\n        }));\n      }\n    };\n    return props;\n  }\n}\nclass EventEmitter {\n  constructor() {\n    this.callbacks = {};\n  }\n  on(event, fn) {\n    if (!this.callbacks[event]) {\n      this.callbacks[event] = [];\n    }\n    this.callbacks[event].push(fn);\n    return this;\n  }\n  emit(event, ...args) {\n    const callbacks = this.callbacks[event];\n    if (callbacks) {\n      callbacks.forEach(callback => callback.apply(this, args));\n    }\n    return this;\n  }\n  off(event, fn) {\n    const callbacks = this.callbacks[event];\n    if (callbacks) {\n      if (fn) {\n        this.callbacks[event] = callbacks.filter(callback => callback !== fn);\n      } else {\n        delete this.callbacks[event];\n      }\n    }\n    return this;\n  }\n  removeAllListeners() {\n    this.callbacks = {};\n  }\n}\n\n/**\n * Returns a field from an extension\n * @param extension The Tiptap extension\n * @param field The field, for example `renderHTML` or `priority`\n * @param context The context object that should be passed as `this` into the function\n * @returns The field value\n */\nfunction getExtensionField(extension, field, context) {\n  if (extension.config[field] === undefined && extension.parent) {\n    return getExtensionField(extension.parent, field, context);\n  }\n  if (typeof extension.config[field] === 'function') {\n    const value = extension.config[field].bind({\n      ...context,\n      parent: extension.parent ? getExtensionField(extension.parent, field, context) : null\n    });\n    return value;\n  }\n  return extension.config[field];\n}\nfunction splitExtensions(extensions) {\n  const baseExtensions = extensions.filter(extension => extension.type === 'extension');\n  const nodeExtensions = extensions.filter(extension => extension.type === 'node');\n  const markExtensions = extensions.filter(extension => extension.type === 'mark');\n  return {\n    baseExtensions,\n    nodeExtensions,\n    markExtensions\n  };\n}\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nfunction getAttributesFromExtensions(extensions) {\n  const extensionAttributes = [];\n  const {\n    nodeExtensions,\n    markExtensions\n  } = splitExtensions(extensions);\n  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];\n  const defaultAttribute = {\n    default: null,\n    rendered: true,\n    renderHTML: null,\n    parseHTML: null,\n    keepOnSplit: true,\n    isRequired: false\n  };\n  extensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n      extensions: nodeAndMarkExtensions\n    };\n    const addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);\n    if (!addGlobalAttributes) {\n      return;\n    }\n    const globalAttributes = addGlobalAttributes();\n    globalAttributes.forEach(globalAttribute => {\n      globalAttribute.types.forEach(type => {\n        Object.entries(globalAttribute.attributes).forEach(([name, attribute]) => {\n          extensionAttributes.push({\n            type,\n            name,\n            attribute: {\n              ...defaultAttribute,\n              ...attribute\n            }\n          });\n        });\n      });\n    });\n  });\n  nodeAndMarkExtensions.forEach(extension => {\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage\n    };\n    const addAttributes = getExtensionField(extension, 'addAttributes', context);\n    if (!addAttributes) {\n      return;\n    }\n    // TODO: remove `as Attributes`\n    const attributes = addAttributes();\n    Object.entries(attributes).forEach(([name, attribute]) => {\n      const mergedAttr = {\n        ...defaultAttribute,\n        ...attribute\n      };\n      if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === 'function') {\n        mergedAttr.default = mergedAttr.default();\n      }\n      if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === undefined) {\n        delete mergedAttr.default;\n      }\n      extensionAttributes.push({\n        type: extension.name,\n        name,\n        attribute: mergedAttr\n      });\n    });\n  });\n  return extensionAttributes;\n}\nfunction getNodeType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.nodes[nameOrType]) {\n      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n    }\n    return schema.nodes[nameOrType];\n  }\n  return nameOrType;\n}\nfunction mergeAttributes(...objects) {\n  return objects.filter(item => !!item).reduce((items, item) => {\n    const mergedAttributes = {\n      ...items\n    };\n    Object.entries(item).forEach(([key, value]) => {\n      const exists = mergedAttributes[key];\n      if (!exists) {\n        mergedAttributes[key] = value;\n        return;\n      }\n      if (key === 'class') {\n        const valueClasses = value ? value.split(' ') : [];\n        const existingClasses = mergedAttributes[key] ? mergedAttributes[key].split(' ') : [];\n        const insertClasses = valueClasses.filter(valueClass => !existingClasses.includes(valueClass));\n        mergedAttributes[key] = [...existingClasses, ...insertClasses].join(' ');\n      } else if (key === 'style') {\n        mergedAttributes[key] = [mergedAttributes[key], value].join('; ');\n      } else {\n        mergedAttributes[key] = value;\n      }\n    });\n    return mergedAttributes;\n  }, {});\n}\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\n  return extensionAttributes.filter(item => item.attribute.rendered).map(item => {\n    if (!item.attribute.renderHTML) {\n      return {\n        [item.name]: nodeOrMark.attrs[item.name]\n      };\n    }\n    return item.attribute.renderHTML(nodeOrMark.attrs) || {};\n  }).reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});\n}\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nfunction callOrReturn(value, context = undefined, ...props) {\n  if (isFunction(value)) {\n    if (context) {\n      return value.bind(context)(...props);\n    }\n    return value(...props);\n  }\n  return value;\n}\nfunction isEmptyObject(value = {}) {\n  return Object.keys(value).length === 0 && value.constructor === Object;\n}\nfunction fromString(value) {\n  if (typeof value !== 'string') {\n    return value;\n  }\n  if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n    return Number(value);\n  }\n  if (value === 'true') {\n    return true;\n  }\n  if (value === 'false') {\n    return false;\n  }\n  return value;\n}\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nfunction injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\n  if ('style' in parseRule) {\n    return parseRule;\n  }\n  return {\n    ...parseRule,\n    getAttrs: node => {\n      const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\n      if (oldAttributes === false) {\n        return false;\n      }\n      const newAttributes = extensionAttributes.reduce((items, item) => {\n        const value = item.attribute.parseHTML ? item.attribute.parseHTML(node) : fromString(node.getAttribute(item.name));\n        if (value === null || value === undefined) {\n          return items;\n        }\n        return {\n          ...items,\n          [item.name]: value\n        };\n      }, {});\n      return {\n        ...oldAttributes,\n        ...newAttributes\n      };\n    }\n  };\n}\nfunction cleanUpSchemaItem(data) {\n  return Object.fromEntries(\n  // @ts-ignore\n  Object.entries(data).filter(([key, value]) => {\n    if (key === 'attrs' && isEmptyObject(value)) {\n      return false;\n    }\n    return value !== null && value !== undefined;\n  }));\n}\n/**\n * Creates a new Prosemirror schema based on the given extensions.\n * @param extensions An array of Tiptap extensions\n * @param editor The editor instance\n * @returns A Prosemirror schema\n */\nfunction getSchemaByResolvedExtensions(extensions, editor) {\n  var _a;\n  const allAttributes = getAttributesFromExtensions(extensions);\n  const {\n    nodeExtensions,\n    markExtensions\n  } = splitExtensions(extensions);\n  const topNode = (_a = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))) === null || _a === void 0 ? void 0 : _a.name;\n  const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n      editor\n    };\n    const extraNodeFields = extensions.reduce((fields, e) => {\n      const extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);\n      return {\n        ...fields,\n        ...(extendNodeSchema ? extendNodeSchema(extension) : {})\n      };\n    }, {});\n    const schema = cleanUpSchemaItem({\n      ...extraNodeFields,\n      content: callOrReturn(getExtensionField(extension, 'content', context)),\n      marks: callOrReturn(getExtensionField(extension, 'marks', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      inline: callOrReturn(getExtensionField(extension, 'inline', context)),\n      atom: callOrReturn(getExtensionField(extension, 'atom', context)),\n      selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),\n      draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      whitespace: callOrReturn(getExtensionField(extension, 'whitespace', context)),\n      defining: callOrReturn(getExtensionField(extension, 'defining', context)),\n      isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        var _a;\n        return [extensionAttribute.name, {\n          default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n        }];\n      }))\n    });\n    const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n    }\n    const renderHTML = getExtensionField(extension, 'renderHTML', context);\n    if (renderHTML) {\n      schema.toDOM = node => renderHTML({\n        node,\n        HTMLAttributes: getRenderedAttributes(node, extensionAttributes)\n      });\n    }\n    const renderText = getExtensionField(extension, 'renderText', context);\n    if (renderText) {\n      schema.toText = renderText;\n    }\n    return [extension.name, schema];\n  }));\n  const marks = Object.fromEntries(markExtensions.map(extension => {\n    const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n    const context = {\n      name: extension.name,\n      options: extension.options,\n      storage: extension.storage,\n      editor\n    };\n    const extraMarkFields = extensions.reduce((fields, e) => {\n      const extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);\n      return {\n        ...fields,\n        ...(extendMarkSchema ? extendMarkSchema(extension) : {})\n      };\n    }, {});\n    const schema = cleanUpSchemaItem({\n      ...extraMarkFields,\n      inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),\n      excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),\n      group: callOrReturn(getExtensionField(extension, 'group', context)),\n      spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),\n      code: callOrReturn(getExtensionField(extension, 'code', context)),\n      attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n        var _a;\n        return [extensionAttribute.name, {\n          default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default\n        }];\n      }))\n    });\n    const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n    if (parseHTML) {\n      schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n    }\n    const renderHTML = getExtensionField(extension, 'renderHTML', context);\n    if (renderHTML) {\n      schema.toDOM = mark => renderHTML({\n        mark,\n        HTMLAttributes: getRenderedAttributes(mark, extensionAttributes)\n      });\n    }\n    return [extension.name, schema];\n  }));\n  return new Schema({\n    topNode,\n    nodes,\n    marks\n  });\n}\n\n/**\n * Tries to get a node or mark type by its name.\n * @param name The name of the node or mark type\n * @param schema The Prosemiror schema to search in\n * @returns The node or mark type, or null if it doesn't exist\n */\nfunction getSchemaTypeByName(name, schema) {\n  return schema.nodes[name] || schema.marks[name] || null;\n}\nfunction isExtensionRulesEnabled(extension, enabled) {\n  if (Array.isArray(enabled)) {\n    return enabled.some(enabledExtension => {\n      const name = typeof enabledExtension === 'string' ? enabledExtension : enabledExtension.name;\n      return name === extension.name;\n    });\n  }\n  return enabled;\n}\n\n/**\n * Returns the text content of a resolved prosemirror position\n * @param $from The resolved position to get the text content from\n * @param maxMatch The maximum number of characters to match\n * @returns The text content\n */\nconst getTextContentFromNodes = ($from, maxMatch = 500) => {\n  let textBefore = '';\n  const sliceEndPos = $from.parentOffset;\n  $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node, pos, parent, index) => {\n    var _a, _b;\n    const chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {\n      node,\n      pos,\n      parent,\n      index\n    })) || node.textContent || '%leaf%';\n    textBefore += node.isAtom && !node.isText ? chunk : chunk.slice(0, Math.max(0, sliceEndPos - pos));\n  });\n  return textBefore;\n};\nfunction isRegExp(value) {\n  return Object.prototype.toString.call(value) === '[object RegExp]';\n}\nclass InputRule {\n  constructor(config) {\n    this.find = config.find;\n    this.handler = config.handler;\n  }\n}\nconst inputRuleMatcherHandler = (text, find) => {\n  if (isRegExp(find)) {\n    return find.exec(text);\n  }\n  const inputRuleMatch = find(text);\n  if (!inputRuleMatch) {\n    return null;\n  }\n  const result = [inputRuleMatch.text];\n  result.index = inputRuleMatch.index;\n  result.input = text;\n  result.data = inputRuleMatch.data;\n  if (inputRuleMatch.replaceWith) {\n    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n      console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\n    }\n    result.push(inputRuleMatch.replaceWith);\n  }\n  return result;\n};\nfunction run$1(config) {\n  var _a;\n  const {\n    editor,\n    from,\n    to,\n    text,\n    rules,\n    plugin\n  } = config;\n  const {\n    view\n  } = editor;\n  if (view.composing) {\n    return false;\n  }\n  const $from = view.state.doc.resolve(from);\n  if (\n  // check for code node\n  $from.parent.type.spec.code\n  // check for code mark\n  || !!((_a = $from.nodeBefore || $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.marks.find(mark => mark.type.spec.code))) {\n    return false;\n  }\n  let matched = false;\n  const textBefore = getTextContentFromNodes($from) + text;\n  rules.forEach(rule => {\n    if (matched) {\n      return;\n    }\n    const match = inputRuleMatcherHandler(textBefore, rule.find);\n    if (!match) {\n      return;\n    }\n    const tr = view.state.tr;\n    const state = createChainableState({\n      state: view.state,\n      transaction: tr\n    });\n    const range = {\n      from: from - (match[0].length - text.length),\n      to\n    };\n    const {\n      commands,\n      chain,\n      can\n    } = new CommandManager({\n      editor,\n      state\n    });\n    const handler = rule.handler({\n      state,\n      range,\n      match,\n      commands,\n      chain,\n      can\n    });\n    // stop if there are no changes\n    if (handler === null || !tr.steps.length) {\n      return;\n    }\n    // store transform as meta data\n    // so we can undo input rules within the `undoInputRules` command\n    tr.setMeta(plugin, {\n      transform: tr,\n      from,\n      to,\n      text\n    });\n    view.dispatch(tr);\n    matched = true;\n  });\n  return matched;\n}\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nfunction inputRulesPlugin(props) {\n  const {\n    editor,\n    rules\n  } = props;\n  const plugin = new Plugin({\n    state: {\n      init() {\n        return null;\n      },\n      apply(tr, prev) {\n        const stored = tr.getMeta(plugin);\n        if (stored) {\n          return stored;\n        }\n        // if InputRule is triggered by insertContent()\n        const simulatedInputMeta = tr.getMeta('applyInputRules');\n        const isSimulatedInput = !!simulatedInputMeta;\n        if (isSimulatedInput) {\n          setTimeout(() => {\n            const {\n              from,\n              text\n            } = simulatedInputMeta;\n            const to = from + text.length;\n            run$1({\n              editor,\n              from,\n              to,\n              text,\n              rules,\n              plugin\n            });\n          });\n        }\n        return tr.selectionSet || tr.docChanged ? null : prev;\n      }\n    },\n    props: {\n      handleTextInput(view, from, to, text) {\n        return run$1({\n          editor,\n          from,\n          to,\n          text,\n          rules,\n          plugin\n        });\n      },\n      handleDOMEvents: {\n        compositionend: view => {\n          setTimeout(() => {\n            const {\n              $cursor\n            } = view.state.selection;\n            if ($cursor) {\n              run$1({\n                editor,\n                from: $cursor.pos,\n                to: $cursor.pos,\n                text: '',\n                rules,\n                plugin\n              });\n            }\n          });\n          return false;\n        }\n      },\n      // add support for input rules to trigger on enter\n      // this is useful for example for code blocks\n      handleKeyDown(view, event) {\n        if (event.key !== 'Enter') {\n          return false;\n        }\n        const {\n          $cursor\n        } = view.state.selection;\n        if ($cursor) {\n          return run$1({\n            editor,\n            from: $cursor.pos,\n            to: $cursor.pos,\n            text: '\\n',\n            rules,\n            plugin\n          });\n        }\n        return false;\n      }\n    },\n    // @ts-ignore\n    isInputRules: true\n  });\n  return plugin;\n}\nfunction isNumber(value) {\n  return typeof value === 'number';\n}\n\n/**\n * Paste rules are used to react to pasted content.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nclass PasteRule {\n  constructor(config) {\n    this.find = config.find;\n    this.handler = config.handler;\n  }\n}\nconst pasteRuleMatcherHandler = (text, find, event) => {\n  if (isRegExp(find)) {\n    return [...text.matchAll(find)];\n  }\n  const matches = find(text, event);\n  if (!matches) {\n    return [];\n  }\n  return matches.map(pasteRuleMatch => {\n    const result = [pasteRuleMatch.text];\n    result.index = pasteRuleMatch.index;\n    result.input = text;\n    result.data = pasteRuleMatch.data;\n    if (pasteRuleMatch.replaceWith) {\n      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n        console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\n      }\n      result.push(pasteRuleMatch.replaceWith);\n    }\n    return result;\n  });\n};\nfunction run(config) {\n  const {\n    editor,\n    state,\n    from,\n    to,\n    rule,\n    pasteEvent,\n    dropEvent\n  } = config;\n  const {\n    commands,\n    chain,\n    can\n  } = new CommandManager({\n    editor,\n    state\n  });\n  const handlers = [];\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (!node.isTextblock || node.type.spec.code) {\n      return;\n    }\n    const resolvedFrom = Math.max(from, pos);\n    const resolvedTo = Math.min(to, pos + node.content.size);\n    const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\\ufffc');\n    const matches = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent);\n    matches.forEach(match => {\n      if (match.index === undefined) {\n        return;\n      }\n      const start = resolvedFrom + match.index + 1;\n      const end = start + match[0].length;\n      const range = {\n        from: state.tr.mapping.map(start),\n        to: state.tr.mapping.map(end)\n      };\n      const handler = rule.handler({\n        state,\n        range,\n        match,\n        commands,\n        chain,\n        can,\n        pasteEvent,\n        dropEvent\n      });\n      handlers.push(handler);\n    });\n  });\n  const success = handlers.every(handler => handler !== null);\n  return success;\n}\nconst createClipboardPasteEvent = text => {\n  var _a;\n  const event = new ClipboardEvent('paste', {\n    clipboardData: new DataTransfer()\n  });\n  (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/html', text);\n  return event;\n};\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nfunction pasteRulesPlugin(props) {\n  const {\n    editor,\n    rules\n  } = props;\n  let dragSourceElement = null;\n  let isPastedFromProseMirror = false;\n  let isDroppedFromProseMirror = false;\n  let pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n  let dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n  const processEvent = ({\n    state,\n    from,\n    to,\n    rule,\n    pasteEvt\n  }) => {\n    const tr = state.tr;\n    const chainableState = createChainableState({\n      state,\n      transaction: tr\n    });\n    const handler = run({\n      editor,\n      state: chainableState,\n      from: Math.max(from - 1, 0),\n      to: to.b - 1,\n      rule,\n      pasteEvent: pasteEvt,\n      dropEvent\n    });\n    if (!handler || !tr.steps.length) {\n      return;\n    }\n    dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n    pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n    return tr;\n  };\n  const plugins = rules.map(rule => {\n    return new Plugin({\n      // we register a global drag handler to track the current drag source element\n      view(view) {\n        const handleDragstart = event => {\n          var _a;\n          dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target)) ? view.dom.parentElement : null;\n        };\n        window.addEventListener('dragstart', handleDragstart);\n        return {\n          destroy() {\n            window.removeEventListener('dragstart', handleDragstart);\n          }\n        };\n      },\n      props: {\n        handleDOMEvents: {\n          drop: (view, event) => {\n            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;\n            dropEvent = event;\n            return false;\n          },\n          paste: (_view, event) => {\n            var _a;\n            const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');\n            pasteEvent = event;\n            isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));\n            return false;\n          }\n        }\n      },\n      appendTransaction: (transactions, oldState, state) => {\n        const transaction = transactions[0];\n        const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;\n        const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;\n        // if PasteRule is triggered by insertContent()\n        const simulatedPasteMeta = transaction.getMeta('applyPasteRules');\n        const isSimulatedPaste = !!simulatedPasteMeta;\n        if (!isPaste && !isDrop && !isSimulatedPaste) {\n          return;\n        }\n        // Handle simulated paste\n        if (isSimulatedPaste) {\n          const {\n            from,\n            text\n          } = simulatedPasteMeta;\n          const to = from + text.length;\n          const pasteEvt = createClipboardPasteEvent(text);\n          return processEvent({\n            rule,\n            state,\n            from,\n            to: {\n              b: to\n            },\n            pasteEvt\n          });\n        }\n        // handle actual paste/drop\n        const from = oldState.doc.content.findDiffStart(state.doc.content);\n        const to = oldState.doc.content.findDiffEnd(state.doc.content);\n        // stop if there is no changed range\n        if (!isNumber(from) || !to || from === to.b) {\n          return;\n        }\n        return processEvent({\n          rule,\n          state,\n          from,\n          to,\n          pasteEvt: pasteEvent\n        });\n      }\n    });\n  });\n  return plugins;\n}\nfunction findDuplicates(items) {\n  const filtered = items.filter((el, index) => items.indexOf(el) !== index);\n  return Array.from(new Set(filtered));\n}\nclass ExtensionManager {\n  constructor(extensions, editor) {\n    this.splittableMarks = [];\n    this.editor = editor;\n    this.extensions = ExtensionManager.resolve(extensions);\n    this.schema = getSchemaByResolvedExtensions(this.extensions, editor);\n    this.setupExtensions();\n  }\n  /**\n   * Returns a flattened and sorted extension list while\n   * also checking for duplicated extensions and warns the user.\n   * @param extensions An array of Tiptap extensions\n   * @returns An flattened and sorted array of Tiptap extensions\n   */\n  static resolve(extensions) {\n    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\n    const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name));\n    if (duplicatedNames.length) {\n      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map(item => `'${item}'`).join(', ')}]. This can lead to issues.`);\n    }\n    return resolvedExtensions;\n  }\n  /**\n   * Create a flattened array of extensions by traversing the `addExtensions` field.\n   * @param extensions An array of Tiptap extensions\n   * @returns A flattened array of Tiptap extensions\n   */\n  static flatten(extensions) {\n    return extensions.map(extension => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage\n      };\n      const addExtensions = getExtensionField(extension, 'addExtensions', context);\n      if (addExtensions) {\n        return [extension, ...this.flatten(addExtensions())];\n      }\n      return extension;\n    })\n    // `Infinity` will break TypeScript so we set a number that is probably high enough\n    .flat(10);\n  }\n  /**\n   * Sort extensions by priority.\n   * @param extensions An array of Tiptap extensions\n   * @returns A sorted array of Tiptap extensions by priority\n   */\n  static sort(extensions) {\n    const defaultPriority = 100;\n    return extensions.sort((a, b) => {\n      const priorityA = getExtensionField(a, 'priority') || defaultPriority;\n      const priorityB = getExtensionField(b, 'priority') || defaultPriority;\n      if (priorityA > priorityB) {\n        return -1;\n      }\n      if (priorityA < priorityB) {\n        return 1;\n      }\n      return 0;\n    });\n  }\n  /**\n   * Get all commands from the extensions.\n   * @returns An object with all commands where the key is the command name and the value is the command function\n   */\n  get commands() {\n    return this.extensions.reduce((commands, extension) => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema)\n      };\n      const addCommands = getExtensionField(extension, 'addCommands', context);\n      if (!addCommands) {\n        return commands;\n      }\n      return {\n        ...commands,\n        ...addCommands()\n      };\n    }, {});\n  }\n  /**\n   * Get all registered Prosemirror plugins from the extensions.\n   * @returns An array of Prosemirror plugins\n   */\n  get plugins() {\n    const {\n      editor\n    } = this;\n    // With ProseMirror, first plugins within an array are executed first.\n    // In Tiptap, we provide the ability to override plugins,\n    // so it feels more natural to run plugins at the end of an array first.\n    // That’s why we have to reverse the `extensions` array and sort again\n    // based on the `priority` option.\n    const extensions = ExtensionManager.sort([...this.extensions].reverse());\n    const inputRules = [];\n    const pasteRules = [];\n    const allPlugins = extensions.map(extension => {\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n        type: getSchemaTypeByName(extension.name, this.schema)\n      };\n      const plugins = [];\n      const addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);\n      let defaultBindings = {};\n      // bind exit handling\n      if (extension.type === 'mark' && getExtensionField(extension, 'exitable', context)) {\n        defaultBindings.ArrowRight = () => Mark.handleExit({\n          editor,\n          mark: extension\n        });\n      }\n      if (addKeyboardShortcuts) {\n        const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {\n          return [shortcut, () => method({\n            editor\n          })];\n        }));\n        defaultBindings = {\n          ...defaultBindings,\n          ...bindings\n        };\n      }\n      const keyMapPlugin = keymap(defaultBindings);\n      plugins.push(keyMapPlugin);\n      const addInputRules = getExtensionField(extension, 'addInputRules', context);\n      if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n        inputRules.push(...addInputRules());\n      }\n      const addPasteRules = getExtensionField(extension, 'addPasteRules', context);\n      if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n        pasteRules.push(...addPasteRules());\n      }\n      const addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);\n      if (addProseMirrorPlugins) {\n        const proseMirrorPlugins = addProseMirrorPlugins();\n        plugins.push(...proseMirrorPlugins);\n      }\n      return plugins;\n    }).flat();\n    return [inputRulesPlugin({\n      editor,\n      rules: inputRules\n    }), ...pasteRulesPlugin({\n      editor,\n      rules: pasteRules\n    }), ...allPlugins];\n  }\n  /**\n   * Get all attributes from the extensions.\n   * @returns An array of attributes\n   */\n  get attributes() {\n    return getAttributesFromExtensions(this.extensions);\n  }\n  /**\n   * Get all node views from the extensions.\n   * @returns An object with all node views where the key is the node name and the value is the node view function\n   */\n  get nodeViews() {\n    const {\n      editor\n    } = this;\n    const {\n      nodeExtensions\n    } = splitExtensions(this.extensions);\n    return Object.fromEntries(nodeExtensions.filter(extension => !!getExtensionField(extension, 'addNodeView')).map(extension => {\n      const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name);\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor,\n        type: getNodeType(extension.name, this.schema)\n      };\n      const addNodeView = getExtensionField(extension, 'addNodeView', context);\n      if (!addNodeView) {\n        return [];\n      }\n      const nodeview = (node, view, getPos, decorations) => {\n        const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\n        return addNodeView()({\n          editor,\n          node,\n          getPos,\n          decorations,\n          HTMLAttributes,\n          extension\n        });\n      };\n      return [extension.name, nodeview];\n    }));\n  }\n  /**\n   * Go through all extensions, create extension storages & setup marks\n   * & bind editor event listener.\n   */\n  setupExtensions() {\n    this.extensions.forEach(extension => {\n      var _a;\n      // store extension storage in editor\n      this.editor.extensionStorage[extension.name] = extension.storage;\n      const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n        editor: this.editor,\n        type: getSchemaTypeByName(extension.name, this.schema)\n      };\n      if (extension.type === 'mark') {\n        const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;\n        if (keepOnSplit) {\n          this.splittableMarks.push(extension.name);\n        }\n      }\n      const onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);\n      const onCreate = getExtensionField(extension, 'onCreate', context);\n      const onUpdate = getExtensionField(extension, 'onUpdate', context);\n      const onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);\n      const onTransaction = getExtensionField(extension, 'onTransaction', context);\n      const onFocus = getExtensionField(extension, 'onFocus', context);\n      const onBlur = getExtensionField(extension, 'onBlur', context);\n      const onDestroy = getExtensionField(extension, 'onDestroy', context);\n      if (onBeforeCreate) {\n        this.editor.on('beforeCreate', onBeforeCreate);\n      }\n      if (onCreate) {\n        this.editor.on('create', onCreate);\n      }\n      if (onUpdate) {\n        this.editor.on('update', onUpdate);\n      }\n      if (onSelectionUpdate) {\n        this.editor.on('selectionUpdate', onSelectionUpdate);\n      }\n      if (onTransaction) {\n        this.editor.on('transaction', onTransaction);\n      }\n      if (onFocus) {\n        this.editor.on('focus', onFocus);\n      }\n      if (onBlur) {\n        this.editor.on('blur', onBlur);\n      }\n      if (onDestroy) {\n        this.editor.on('destroy', onDestroy);\n      }\n    });\n  }\n}\n\n// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\nfunction getType(value) {\n  return Object.prototype.toString.call(value).slice(8, -1);\n}\nfunction isPlainObject(value) {\n  if (getType(value) !== 'Object') {\n    return false;\n  }\n  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\n}\nfunction mergeDeep(target, source) {\n  const output = {\n    ...target\n  };\n  if (isPlainObject(target) && isPlainObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isPlainObject(source[key]) && isPlainObject(target[key])) {\n        output[key] = mergeDeep(target[key], source[key]);\n      } else {\n        output[key] = source[key];\n      }\n    });\n  }\n  return output;\n}\n\n/**\n * The Extension class is the base class for all extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nclass Extension {\n  constructor(config = {}) {\n    this.type = 'extension';\n    this.name = 'extension';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = {\n      ...this.config,\n      ...config\n    };\n    this.name = this.config.name;\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  static create(config = {}) {\n    return new Extension(config);\n  }\n  configure(options = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend({\n      ...this.config,\n      addOptions: () => {\n        return mergeDeep(this.options, options);\n      }\n    });\n    // Always preserve the current name\n    extension.name = this.name;\n    // Set the parent to be our parent\n    extension.parent = this.parent;\n    return extension;\n  }\n  extend(extendedConfig = {}) {\n    const extension = new Extension({\n      ...this.config,\n      ...extendedConfig\n    });\n    extension.parent = this;\n    this.child = extension;\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n    if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n    }\n    extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n      name: extension.name\n    }));\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n}\n\n/**\n * Gets the text between two positions in a Prosemirror node\n * and serializes it using the given text serializers and block separator (see getText)\n * @param startNode The Prosemirror node to start from\n * @param range The range of the text to get\n * @param options Options for the text serializer & block separator\n * @returns The text between the two positions\n */\nfunction getTextBetween(startNode, range, options) {\n  const {\n    from,\n    to\n  } = range;\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {}\n  } = options || {};\n  let text = '';\n  startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n    var _a;\n    if (node.isBlock && pos > from) {\n      text += blockSeparator;\n    }\n    const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\n    if (textSerializer) {\n      if (parent) {\n        text += textSerializer({\n          node,\n          pos,\n          parent,\n          index,\n          range\n        });\n      }\n      // do not descend into child nodes when there exists a serializer\n      return false;\n    }\n    if (node.isText) {\n      text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line\n    }\n  });\n  return text;\n}\n\n/**\n * Find text serializers `toText` in a Prosemirror schema\n * @param schema The Prosemirror schema to search in\n * @returns A record of text serializers by node name\n */\nfunction getTextSerializersFromSchema(schema) {\n  return Object.fromEntries(Object.entries(schema.nodes).filter(([, node]) => node.spec.toText).map(([name, node]) => [name, node.spec.toText]));\n}\nconst ClipboardTextSerializer = Extension.create({\n  name: 'clipboardTextSerializer',\n  addOptions() {\n    return {\n      blockSeparator: undefined\n    };\n  },\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('clipboardTextSerializer'),\n      props: {\n        clipboardTextSerializer: () => {\n          const {\n            editor\n          } = this;\n          const {\n            state,\n            schema\n          } = editor;\n          const {\n            doc,\n            selection\n          } = state;\n          const {\n            ranges\n          } = selection;\n          const from = Math.min(...ranges.map(range => range.$from.pos));\n          const to = Math.max(...ranges.map(range => range.$to.pos));\n          const textSerializers = getTextSerializersFromSchema(schema);\n          const range = {\n            from,\n            to\n          };\n          return getTextBetween(doc, range, {\n            ...(this.options.blockSeparator !== undefined ? {\n              blockSeparator: this.options.blockSeparator\n            } : {}),\n            textSerializers\n          });\n        }\n      }\n    })];\n  }\n});\nconst blur = () => ({\n  editor,\n  view\n}) => {\n  requestAnimationFrame(() => {\n    var _a;\n    if (!editor.isDestroyed) {\n      view.dom.blur();\n      // Browsers should remove the caret on blur but safari does not.\n      // See: https://github.com/ueberdosis/tiptap/issues/2405\n      (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n    }\n  });\n  return true;\n};\nconst clearContent = (emitUpdate = false) => ({\n  commands\n}) => {\n  return commands.setContent('', emitUpdate);\n};\nconst clearNodes = () => ({\n  state,\n  tr,\n  dispatch\n}) => {\n  const {\n    selection\n  } = tr;\n  const {\n    ranges\n  } = selection;\n  if (!dispatch) {\n    return true;\n  }\n  ranges.forEach(({\n    $from,\n    $to\n  }) => {\n    state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n      if (node.type.isText) {\n        return;\n      }\n      const {\n        doc,\n        mapping\n      } = tr;\n      const $mappedFrom = doc.resolve(mapping.map(pos));\n      const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\n      const nodeRange = $mappedFrom.blockRange($mappedTo);\n      if (!nodeRange) {\n        return;\n      }\n      const targetLiftDepth = liftTarget(nodeRange);\n      if (node.type.isTextblock) {\n        const {\n          defaultType\n        } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());\n        tr.setNodeMarkup(nodeRange.start, defaultType);\n      }\n      if (targetLiftDepth || targetLiftDepth === 0) {\n        tr.lift(nodeRange, targetLiftDepth);\n      }\n    });\n  });\n  return true;\n};\nconst command = fn => props => {\n  return fn(props);\n};\nconst createParagraphNear = () => ({\n  state,\n  dispatch\n}) => {\n  return createParagraphNear$1(state, dispatch);\n};\nconst cut = (originRange, targetPos) => ({\n  editor,\n  tr\n}) => {\n  const {\n    state\n  } = editor;\n  const contentSlice = state.doc.slice(originRange.from, originRange.to);\n  tr.deleteRange(originRange.from, originRange.to);\n  const newPos = tr.mapping.map(targetPos);\n  tr.insert(newPos, contentSlice.content);\n  tr.setSelection(new TextSelection(tr.doc.resolve(newPos - 1)));\n  return true;\n};\nconst deleteCurrentNode = () => ({\n  tr,\n  dispatch\n}) => {\n  const {\n    selection\n  } = tr;\n  const currentNode = selection.$anchor.node();\n  // if there is content inside the current node, break out of this command\n  if (currentNode.content.size > 0) {\n    return false;\n  }\n  const $pos = tr.selection.$anchor;\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth);\n    if (node.type === currentNode.type) {\n      if (dispatch) {\n        const from = $pos.before(depth);\n        const to = $pos.after(depth);\n        tr.delete(from, to).scrollIntoView();\n      }\n      return true;\n    }\n  }\n  return false;\n};\nconst deleteNode = typeOrName => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  const $pos = tr.selection.$anchor;\n  for (let depth = $pos.depth; depth > 0; depth -= 1) {\n    const node = $pos.node(depth);\n    if (node.type === type) {\n      if (dispatch) {\n        const from = $pos.before(depth);\n        const to = $pos.after(depth);\n        tr.delete(from, to).scrollIntoView();\n      }\n      return true;\n    }\n  }\n  return false;\n};\nconst deleteRange = range => ({\n  tr,\n  dispatch\n}) => {\n  const {\n    from,\n    to\n  } = range;\n  if (dispatch) {\n    tr.delete(from, to);\n  }\n  return true;\n};\nconst deleteSelection = () => ({\n  state,\n  dispatch\n}) => {\n  return deleteSelection$1(state, dispatch);\n};\nconst enter = () => ({\n  commands\n}) => {\n  return commands.keyboardShortcut('Enter');\n};\nconst exitCode = () => ({\n  state,\n  dispatch\n}) => {\n  return exitCode$1(state, dispatch);\n};\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nfunction objectIncludes(object1, object2, options = {\n  strict: true\n}) {\n  const keys = Object.keys(object2);\n  if (!keys.length) {\n    return true;\n  }\n  return keys.every(key => {\n    if (options.strict) {\n      return object2[key] === object1[key];\n    }\n    if (isRegExp(object2[key])) {\n      return object2[key].test(object1[key]);\n    }\n    return object2[key] === object1[key];\n  });\n}\nfunction findMarkInSet(marks, type, attributes = {}) {\n  return marks.find(item => {\n    return item.type === type && objectIncludes(item.attrs, attributes);\n  });\n}\nfunction isMarkInSet(marks, type, attributes = {}) {\n  return !!findMarkInSet(marks, type, attributes);\n}\nfunction getMarkRange($pos, type, attributes = {}) {\n  if (!$pos || !type) {\n    return;\n  }\n  let start = $pos.parent.childAfter($pos.parentOffset);\n  if ($pos.parentOffset === start.offset && start.offset !== 0) {\n    start = $pos.parent.childBefore($pos.parentOffset);\n  }\n  if (!start.node) {\n    return;\n  }\n  const mark = findMarkInSet([...start.node.marks], type, attributes);\n  if (!mark) {\n    return;\n  }\n  let startIndex = start.index;\n  let startPos = $pos.start() + start.offset;\n  let endIndex = startIndex + 1;\n  let endPos = startPos + start.node.nodeSize;\n  findMarkInSet([...start.node.marks], type, attributes);\n  while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n    startIndex -= 1;\n    startPos -= $pos.parent.child(startIndex).nodeSize;\n  }\n  while (endIndex < $pos.parent.childCount && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {\n    endPos += $pos.parent.child(endIndex).nodeSize;\n    endIndex += 1;\n  }\n  return {\n    from: startPos,\n    to: endPos\n  };\n}\nfunction getMarkType(nameOrType, schema) {\n  if (typeof nameOrType === 'string') {\n    if (!schema.marks[nameOrType]) {\n      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n    }\n    return schema.marks[nameOrType];\n  }\n  return nameOrType;\n}\nconst extendMarkRange = (typeOrName, attributes = {}) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  const type = getMarkType(typeOrName, state.schema);\n  const {\n    doc,\n    selection\n  } = tr;\n  const {\n    $from,\n    from,\n    to\n  } = selection;\n  if (dispatch) {\n    const range = getMarkRange($from, type, attributes);\n    if (range && range.from <= from && range.to >= to) {\n      const newSelection = TextSelection.create(doc, range.from, range.to);\n      tr.setSelection(newSelection);\n    }\n  }\n  return true;\n};\nconst first = commands => props => {\n  const items = typeof commands === 'function' ? commands(props) : commands;\n  for (let i = 0; i < items.length; i += 1) {\n    if (items[i](props)) {\n      return true;\n    }\n  }\n  return false;\n};\nfunction isTextSelection(value) {\n  return value instanceof TextSelection;\n}\nfunction minMax(value = 0, min = 0, max = 0) {\n  return Math.min(Math.max(value, min), max);\n}\nfunction resolveFocusPosition(doc, position = null) {\n  if (!position) {\n    return null;\n  }\n  const selectionAtStart = Selection.atStart(doc);\n  const selectionAtEnd = Selection.atEnd(doc);\n  if (position === 'start' || position === true) {\n    return selectionAtStart;\n  }\n  if (position === 'end') {\n    return selectionAtEnd;\n  }\n  const minPos = selectionAtStart.from;\n  const maxPos = selectionAtEnd.to;\n  if (position === 'all') {\n    return TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));\n  }\n  return TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));\n}\nfunction isiOS() {\n  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)\n  // iPad on iOS 13 detection\n  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;\n}\nconst focus = (position = null, options = {}) => ({\n  editor,\n  view,\n  tr,\n  dispatch\n}) => {\n  options = {\n    scrollIntoView: true,\n    ...options\n  };\n  const delayedFocus = () => {\n    // focus within `requestAnimationFrame` breaks focus on iOS\n    // so we have to call this\n    if (isiOS()) {\n      view.dom.focus();\n    }\n    // For React we have to focus asynchronously. Otherwise wild things happen.\n    // see: https://github.com/ueberdosis/tiptap/issues/1520\n    requestAnimationFrame(() => {\n      if (!editor.isDestroyed) {\n        view.focus();\n        if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n          editor.commands.scrollIntoView();\n        }\n      }\n    });\n  };\n  if (view.hasFocus() && position === null || position === false) {\n    return true;\n  }\n  // we don’t try to resolve a NodeSelection or CellSelection\n  if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n    delayedFocus();\n    return true;\n  }\n  // pass through tr.doc instead of editor.state.doc\n  // since transactions could change the editors state before this command has been run\n  const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;\n  const isSameSelection = editor.state.selection.eq(selection);\n  if (dispatch) {\n    if (!isSameSelection) {\n      tr.setSelection(selection);\n    }\n    // `tr.setSelection` resets the stored marks\n    // so we’ll restore them if the selection is the same as before\n    if (isSameSelection && tr.storedMarks) {\n      tr.setStoredMarks(tr.storedMarks);\n    }\n    delayedFocus();\n  }\n  return true;\n};\nconst forEach = (items, fn) => props => {\n  return items.every((item, index) => fn(item, {\n    ...props,\n    index\n  }));\n};\nconst insertContent = (value, options) => ({\n  tr,\n  commands\n}) => {\n  return commands.insertContentAt({\n    from: tr.selection.from,\n    to: tr.selection.to\n  }, value, options);\n};\nconst removeWhitespaces = node => {\n  const children = node.childNodes;\n  for (let i = children.length - 1; i >= 0; i -= 1) {\n    const child = children[i];\n    if (child.nodeType === 3 && child.nodeValue && /^(\\n\\s\\s|\\n)$/.test(child.nodeValue)) {\n      node.removeChild(child);\n    } else if (child.nodeType === 1) {\n      removeWhitespaces(child);\n    }\n  }\n  return node;\n};\nfunction elementFromString(value) {\n  // add a wrapper to preserve leading and trailing whitespace\n  const wrappedValue = `<body>${value}</body>`;\n  const html = new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;\n  return removeWhitespaces(html);\n}\n\n/**\n * Takes a JSON or HTML content and creates a Prosemirror node or fragment from it.\n * @param content The JSON or HTML content to create the node from\n * @param schema The Prosemirror schema to use for the node\n * @param options Options for the parser\n * @returns The created Prosemirror node or fragment\n */\nfunction createNodeFromContent(content, schema, options) {\n  options = {\n    slice: true,\n    parseOptions: {},\n    ...options\n  };\n  const isJSONContent = typeof content === 'object' && content !== null;\n  const isTextContent = typeof content === 'string';\n  if (isJSONContent) {\n    try {\n      const isArrayContent = Array.isArray(content) && content.length > 0;\n      // if the JSON Content is an array of nodes, create a fragment for each node\n      if (isArrayContent) {\n        return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)));\n      }\n      return schema.nodeFromJSON(content);\n    } catch (error) {\n      if (options.errorOnInvalidContent) {\n        throw new Error('[tiptap error]: Invalid JSON content', {\n          cause: error\n        });\n      }\n      console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);\n      return createNodeFromContent('', schema, options);\n    }\n  }\n  if (isTextContent) {\n    // Check for invalid content\n    if (options.errorOnInvalidContent) {\n      let hasInvalidContent = false;\n      let invalidContent = '';\n      // A copy of the current schema with a catch-all node at the end\n      const contentCheckSchema = new Schema({\n        topNode: schema.spec.topNode,\n        marks: schema.spec.marks,\n        // Prosemirror's schemas are executed such that: the last to execute, matches last\n        // This means that we can add a catch-all node at the end of the schema to catch any content that we don't know how to handle\n        nodes: schema.spec.nodes.append({\n          __tiptap__private__unknown__catch__all__node: {\n            content: 'inline*',\n            group: 'block',\n            parseDOM: [{\n              tag: '*',\n              getAttrs: e => {\n                // If this is ever called, we know that the content has something that we don't know how to handle in the schema\n                hasInvalidContent = true;\n                // Try to stringify the element for a more helpful error message\n                invalidContent = typeof e === 'string' ? e : e.outerHTML;\n                return null;\n              }\n            }]\n          }\n        })\n      });\n      if (options.slice) {\n        DOMParser.fromSchema(contentCheckSchema).parseSlice(elementFromString(content), options.parseOptions);\n      } else {\n        DOMParser.fromSchema(contentCheckSchema).parse(elementFromString(content), options.parseOptions);\n      }\n      if (options.errorOnInvalidContent && hasInvalidContent) {\n        throw new Error('[tiptap error]: Invalid HTML content', {\n          cause: new Error(`Invalid element found: ${invalidContent}`)\n        });\n      }\n    }\n    const parser = DOMParser.fromSchema(schema);\n    if (options.slice) {\n      return parser.parseSlice(elementFromString(content), options.parseOptions).content;\n    }\n    return parser.parse(elementFromString(content), options.parseOptions);\n  }\n  return createNodeFromContent('', schema, options);\n}\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n  const last = tr.steps.length - 1;\n  if (last < startLen) {\n    return;\n  }\n  const step = tr.steps[last];\n  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n    return;\n  }\n  const map = tr.mapping.maps[last];\n  let end = 0;\n  map.forEach((_from, _to, _newFrom, newTo) => {\n    if (end === 0) {\n      end = newTo;\n    }\n  });\n  tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\nconst isFragment = nodeOrFragment => {\n  return !('type' in nodeOrFragment);\n};\nconst insertContentAt = (position, value, options) => ({\n  tr,\n  dispatch,\n  editor\n}) => {\n  var _a;\n  if (dispatch) {\n    options = {\n      parseOptions: {},\n      updateSelection: true,\n      applyInputRules: false,\n      applyPasteRules: false,\n      ...options\n    };\n    let content;\n    try {\n      content = createNodeFromContent(value, editor.schema, {\n        parseOptions: {\n          preserveWhitespace: 'full',\n          ...options.parseOptions\n        },\n        errorOnInvalidContent: (_a = options.errorOnInvalidContent) !== null && _a !== void 0 ? _a : editor.options.enableContentCheck\n      });\n    } catch (e) {\n      editor.emit('contentError', {\n        editor,\n        error: e,\n        disableCollaboration: () => {\n          console.error('[tiptap error]: Unable to disable collaboration at this point in time');\n        }\n      });\n      return false;\n    }\n    let {\n      from,\n      to\n    } = typeof position === 'number' ? {\n      from: position,\n      to: position\n    } : {\n      from: position.from,\n      to: position.to\n    };\n    let isOnlyTextContent = true;\n    let isOnlyBlockContent = true;\n    const nodes = isFragment(content) ? content : [content];\n    nodes.forEach(node => {\n      // check if added node is valid\n      node.check();\n      isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;\n      isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n    });\n    // check if we can replace the wrapping node by\n    // the newly inserted content\n    // example:\n    // replace an empty paragraph by an inserted image\n    // instead of inserting the image below the paragraph\n    if (from === to && isOnlyBlockContent) {\n      const {\n        parent\n      } = tr.doc.resolve(from);\n      const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n      if (isEmptyTextBlock) {\n        from -= 1;\n        to += 1;\n      }\n    }\n    let newContent;\n    // if there is only plain text we have to use `insertText`\n    // because this will keep the current marks\n    if (isOnlyTextContent) {\n      // if value is string, we can use it directly\n      // otherwise if it is an array, we have to join it\n      if (Array.isArray(value)) {\n        newContent = value.map(v => v.text || '').join('');\n      } else if (typeof value === 'object' && !!value && !!value.text) {\n        newContent = value.text;\n      } else {\n        newContent = value;\n      }\n      tr.insertText(newContent, from, to);\n    } else {\n      newContent = content;\n      tr.replaceWith(from, to, newContent);\n    }\n    // set cursor at end of inserted content\n    if (options.updateSelection) {\n      selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n    }\n    if (options.applyInputRules) {\n      tr.setMeta('applyInputRules', {\n        from,\n        text: newContent\n      });\n    }\n    if (options.applyPasteRules) {\n      tr.setMeta('applyPasteRules', {\n        from,\n        text: newContent\n      });\n    }\n  }\n  return true;\n};\nconst joinUp = () => ({\n  state,\n  dispatch\n}) => {\n  return joinUp$1(state, dispatch);\n};\nconst joinDown = () => ({\n  state,\n  dispatch\n}) => {\n  return joinDown$1(state, dispatch);\n};\nconst joinBackward = () => ({\n  state,\n  dispatch\n}) => {\n  return joinBackward$1(state, dispatch);\n};\nconst joinForward = () => ({\n  state,\n  dispatch\n}) => {\n  return joinForward$1(state, dispatch);\n};\nconst joinItemBackward = () => ({\n  state,\n  dispatch,\n  tr\n}) => {\n  try {\n    const point = joinPoint(state.doc, state.selection.$from.pos, -1);\n    if (point === null || point === undefined) {\n      return false;\n    }\n    tr.join(point, 2);\n    if (dispatch) {\n      dispatch(tr);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nconst joinItemForward = () => ({\n  state,\n  dispatch,\n  tr\n}) => {\n  try {\n    const point = joinPoint(state.doc, state.selection.$from.pos, +1);\n    if (point === null || point === undefined) {\n      return false;\n    }\n    tr.join(point, 2);\n    if (dispatch) {\n      dispatch(tr);\n    }\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\nconst joinTextblockBackward = () => ({\n  state,\n  dispatch\n}) => {\n  return joinTextblockBackward$1(state, dispatch);\n};\nconst joinTextblockForward = () => ({\n  state,\n  dispatch\n}) => {\n  return joinTextblockForward$1(state, dispatch);\n};\nfunction isMacOS() {\n  return typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;\n}\nfunction normalizeKeyName(name) {\n  const parts = name.split(/-(?!$)/);\n  let result = parts[parts.length - 1];\n  if (result === 'Space') {\n    result = ' ';\n  }\n  let alt;\n  let ctrl;\n  let shift;\n  let meta;\n  for (let i = 0; i < parts.length - 1; i += 1) {\n    const mod = parts[i];\n    if (/^(cmd|meta|m)$/i.test(mod)) {\n      meta = true;\n    } else if (/^a(lt)?$/i.test(mod)) {\n      alt = true;\n    } else if (/^(c|ctrl|control)$/i.test(mod)) {\n      ctrl = true;\n    } else if (/^s(hift)?$/i.test(mod)) {\n      shift = true;\n    } else if (/^mod$/i.test(mod)) {\n      if (isiOS() || isMacOS()) {\n        meta = true;\n      } else {\n        ctrl = true;\n      }\n    } else {\n      throw new Error(`Unrecognized modifier name: ${mod}`);\n    }\n  }\n  if (alt) {\n    result = `Alt-${result}`;\n  }\n  if (ctrl) {\n    result = `Ctrl-${result}`;\n  }\n  if (meta) {\n    result = `Meta-${result}`;\n  }\n  if (shift) {\n    result = `Shift-${result}`;\n  }\n  return result;\n}\nconst keyboardShortcut = name => ({\n  editor,\n  view,\n  tr,\n  dispatch\n}) => {\n  const keys = normalizeKeyName(name).split(/-(?!$)/);\n  const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item));\n  const event = new KeyboardEvent('keydown', {\n    key: key === 'Space' ? ' ' : key,\n    altKey: keys.includes('Alt'),\n    ctrlKey: keys.includes('Ctrl'),\n    metaKey: keys.includes('Meta'),\n    shiftKey: keys.includes('Shift'),\n    bubbles: true,\n    cancelable: true\n  });\n  const capturedTransaction = editor.captureTransaction(() => {\n    view.someProp('handleKeyDown', f => f(view, event));\n  });\n  capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(step => {\n    const newStep = step.map(tr.mapping);\n    if (newStep && dispatch) {\n      tr.maybeStep(newStep);\n    }\n  });\n  return true;\n};\nfunction isNodeActive(state, typeOrName, attributes = {}) {\n  const {\n    from,\n    to,\n    empty\n  } = state.selection;\n  const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\n  const nodeRanges = [];\n  state.doc.nodesBetween(from, to, (node, pos) => {\n    if (node.isText) {\n      return;\n    }\n    const relativeFrom = Math.max(from, pos);\n    const relativeTo = Math.min(to, pos + node.nodeSize);\n    nodeRanges.push({\n      node,\n      from: relativeFrom,\n      to: relativeTo\n    });\n  });\n  const selectionRange = to - from;\n  const matchedNodeRanges = nodeRanges.filter(nodeRange => {\n    if (!type) {\n      return true;\n    }\n    return type.name === nodeRange.node.type.name;\n  }).filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, {\n    strict: false\n  }));\n  if (empty) {\n    return !!matchedNodeRanges.length;\n  }\n  const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);\n  return range >= selectionRange;\n}\nconst lift = (typeOrName, attributes = {}) => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  const isActive = isNodeActive(state, type, attributes);\n  if (!isActive) {\n    return false;\n  }\n  return lift$1(state, dispatch);\n};\nconst liftEmptyBlock = () => ({\n  state,\n  dispatch\n}) => {\n  return liftEmptyBlock$1(state, dispatch);\n};\nconst liftListItem = typeOrName => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  return liftListItem$1(type)(state, dispatch);\n};\nconst newlineInCode = () => ({\n  state,\n  dispatch\n}) => {\n  return newlineInCode$1(state, dispatch);\n};\n\n/**\n * Get the type of a schema item by its name.\n * @param name The name of the schema item\n * @param schema The Prosemiror schema to search in\n * @returns The type of the schema item (`node` or `mark`), or null if it doesn't exist\n */\nfunction getSchemaTypeNameByName(name, schema) {\n  if (schema.nodes[name]) {\n    return 'node';\n  }\n  if (schema.marks[name]) {\n    return 'mark';\n  }\n  return null;\n}\n\n/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nfunction deleteProps(obj, propOrProps) {\n  const props = typeof propOrProps === 'string' ? [propOrProps] : propOrProps;\n  return Object.keys(obj).reduce((newObj, prop) => {\n    if (!props.includes(prop)) {\n      newObj[prop] = obj[prop];\n    }\n    return newObj;\n  }, {});\n}\nconst resetAttributes = (typeOrName, attributes) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  let nodeType = null;\n  let markType = null;\n  const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n  if (!schemaType) {\n    return false;\n  }\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName, state.schema);\n  }\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName, state.schema);\n  }\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\n        }\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\n            }\n          });\n        }\n      });\n    });\n  }\n  return true;\n};\nconst scrollIntoView = () => ({\n  tr,\n  dispatch\n}) => {\n  if (dispatch) {\n    tr.scrollIntoView();\n  }\n  return true;\n};\nconst selectAll = () => ({\n  tr,\n  commands\n}) => {\n  return commands.setTextSelection({\n    from: 0,\n    to: tr.doc.content.size\n  });\n};\nconst selectNodeBackward = () => ({\n  state,\n  dispatch\n}) => {\n  return selectNodeBackward$1(state, dispatch);\n};\nconst selectNodeForward = () => ({\n  state,\n  dispatch\n}) => {\n  return selectNodeForward$1(state, dispatch);\n};\nconst selectParentNode = () => ({\n  state,\n  dispatch\n}) => {\n  return selectParentNode$1(state, dispatch);\n};\n\n// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nconst selectTextblockEnd = () => ({\n  state,\n  dispatch\n}) => {\n  return selectTextblockEnd$1(state, dispatch);\n};\n\n// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nconst selectTextblockStart = () => ({\n  state,\n  dispatch\n}) => {\n  return selectTextblockStart$1(state, dispatch);\n};\n\n/**\n * Create a new Prosemirror document node from content.\n * @param content The JSON or HTML content to create the document from\n * @param schema The Prosemirror schema to use for the document\n * @param parseOptions Options for the parser\n * @returns The created Prosemirror document node\n */\nfunction createDocument(content, schema, parseOptions = {}, options = {}) {\n  return createNodeFromContent(content, schema, {\n    slice: false,\n    parseOptions,\n    errorOnInvalidContent: options.errorOnInvalidContent\n  });\n}\nconst setContent = (content, emitUpdate = false, parseOptions = {}, options = {}) => ({\n  editor,\n  tr,\n  dispatch,\n  commands\n}) => {\n  var _a, _b;\n  const {\n    doc\n  } = tr;\n  // This is to keep backward compatibility with the previous behavior\n  // TODO remove this in the next major version\n  if (parseOptions.preserveWhitespace !== 'full') {\n    const document = createDocument(content, editor.schema, parseOptions, {\n      errorOnInvalidContent: (_a = options.errorOnInvalidContent) !== null && _a !== void 0 ? _a : editor.options.enableContentCheck\n    });\n    if (dispatch) {\n      tr.replaceWith(0, doc.content.size, document).setMeta('preventUpdate', !emitUpdate);\n    }\n    return true;\n  }\n  if (dispatch) {\n    tr.setMeta('preventUpdate', !emitUpdate);\n  }\n  return commands.insertContentAt({\n    from: 0,\n    to: doc.content.size\n  }, content, {\n    parseOptions,\n    errorOnInvalidContent: (_b = options.errorOnInvalidContent) !== null && _b !== void 0 ? _b : editor.options.enableContentCheck\n  });\n};\nfunction getMarkAttributes(state, typeOrName) {\n  const type = getMarkType(typeOrName, state.schema);\n  const {\n    from,\n    to,\n    empty\n  } = state.selection;\n  const marks = [];\n  if (empty) {\n    if (state.storedMarks) {\n      marks.push(...state.storedMarks);\n    }\n    marks.push(...state.selection.$head.marks());\n  } else {\n    state.doc.nodesBetween(from, to, node => {\n      marks.push(...node.marks);\n    });\n  }\n  const mark = marks.find(markItem => markItem.type.name === type.name);\n  if (!mark) {\n    return {};\n  }\n  return {\n    ...mark.attrs\n  };\n}\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n * @param oldDoc The Prosemirror node to start from\n * @param transactions The transactions to combine\n * @returns A new `Transform` with all steps of the passed transactions\n */\nfunction combineTransactionSteps(oldDoc, transactions) {\n  const transform = new Transform(oldDoc);\n  transactions.forEach(transaction => {\n    transaction.steps.forEach(step => {\n      transform.step(step);\n    });\n  });\n  return transform;\n}\n\n/**\n * Gets the default block type at a given match\n * @param match The content match to get the default block type from\n * @returns The default block type or null\n */\nfunction defaultBlockAt(match) {\n  for (let i = 0; i < match.edgeCount; i += 1) {\n    const {\n      type\n    } = match.edge(i);\n    if (type.isTextblock && !type.hasRequiredAttrs()) {\n      return type;\n    }\n  }\n  return null;\n}\n\n/**\n * Find children inside a Prosemirror node that match a predicate.\n * @param node The Prosemirror node to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nfunction findChildren(node, predicate) {\n  const nodesWithPos = [];\n  node.descendants((child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n * @param node The Prosemirror node to search in\n * @param range The range to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nfunction findChildrenInRange(node, range, predicate) {\n  const nodesWithPos = [];\n  // if (range.from === range.to) {\n  //   const nodeAt = node.nodeAt(range.from)\n  //   if (nodeAt) {\n  //     nodesWithPos.push({\n  //       node: nodeAt,\n  //       pos: range.from,\n  //     })\n  //   }\n  // }\n  node.nodesBetween(range.from, range.to, (child, pos) => {\n    if (predicate(child)) {\n      nodesWithPos.push({\n        node: child,\n        pos\n      });\n    }\n  });\n  return nodesWithPos;\n}\n\n/**\n * Finds the closest parent node to a resolved position that matches a predicate.\n * @param $pos The resolved position to search from\n * @param predicate The predicate to match\n * @returns The closest parent node to the resolved position that matches the predicate\n * @example ```js\n * findParentNodeClosestToPos($from, node => node.type.name === 'paragraph')\n * ```\n */\nfunction findParentNodeClosestToPos($pos, predicate) {\n  for (let i = $pos.depth; i > 0; i -= 1) {\n    const node = $pos.node(i);\n    if (predicate(node)) {\n      return {\n        pos: i > 0 ? $pos.before(i) : 0,\n        start: $pos.start(i),\n        depth: i,\n        node\n      };\n    }\n  }\n}\n\n/**\n * Finds the closest parent node to the current selection that matches a predicate.\n * @param predicate The predicate to match\n * @returns A command that finds the closest parent node to the current selection that matches the predicate\n * @example ```js\n * findParentNode(node => node.type.name === 'paragraph')\n * ```\n */\nfunction findParentNode(predicate) {\n  return selection => findParentNodeClosestToPos(selection.$from, predicate);\n}\nfunction getHTMLFromFragment(fragment, schema) {\n  const documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment);\n  const temporaryDocument = document.implementation.createHTMLDocument();\n  const container = temporaryDocument.createElement('div');\n  container.appendChild(documentFragment);\n  return container.innerHTML;\n}\nfunction getSchema(extensions, editor) {\n  const resolvedExtensions = ExtensionManager.resolve(extensions);\n  return getSchemaByResolvedExtensions(resolvedExtensions, editor);\n}\n\n/**\n * Generate HTML from a JSONContent\n * @param doc The JSONContent to generate HTML from\n * @param extensions The extensions to use for the schema\n * @returns The generated HTML\n */\nfunction generateHTML(doc, extensions) {\n  const schema = getSchema(extensions);\n  const contentNode = Node$1.fromJSON(schema, doc);\n  return getHTMLFromFragment(contentNode.content, schema);\n}\n\n/**\n * Generate JSONContent from HTML\n * @param html The HTML to generate JSONContent from\n * @param extensions The extensions to use for the schema\n * @returns The generated JSONContent\n */\nfunction generateJSON(html, extensions) {\n  const schema = getSchema(extensions);\n  const dom = elementFromString(html);\n  return DOMParser.fromSchema(schema).parse(dom).toJSON();\n}\n\n/**\n * Gets the text of a Prosemirror node\n * @param node The Prosemirror node\n * @param options Options for the text serializer & block separator\n * @returns The text of the node\n * @example ```js\n * const text = getText(node, { blockSeparator: '\\n' })\n * ```\n */\nfunction getText(node, options) {\n  const range = {\n    from: 0,\n    to: node.content.size\n  };\n  return getTextBetween(node, range, options);\n}\n\n/**\n * Generate raw text from a JSONContent\n * @param doc The JSONContent to generate text from\n * @param extensions The extensions to use for the schema\n * @param options Options for the text generation f.e. blockSeparator or textSerializers\n * @returns The generated text\n */\nfunction generateText(doc, extensions, options) {\n  const {\n    blockSeparator = '\\n\\n',\n    textSerializers = {}\n  } = options || {};\n  const schema = getSchema(extensions);\n  const contentNode = Node$1.fromJSON(schema, doc);\n  return getText(contentNode, {\n    blockSeparator,\n    textSerializers: {\n      ...getTextSerializersFromSchema(schema),\n      ...textSerializers\n    }\n  });\n}\nfunction getNodeAttributes(state, typeOrName) {\n  const type = getNodeType(typeOrName, state.schema);\n  const {\n    from,\n    to\n  } = state.selection;\n  const nodes = [];\n  state.doc.nodesBetween(from, to, node => {\n    nodes.push(node);\n  });\n  const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name);\n  if (!node) {\n    return {};\n  }\n  return {\n    ...node.attrs\n  };\n}\n\n/**\n * Get node or mark attributes by type or name on the current editor state\n * @param state The current editor state\n * @param typeOrName The node or mark type or name\n * @returns The attributes of the node or mark or an empty object\n */\nfunction getAttributes(state, typeOrName) {\n  const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n  if (schemaType === 'node') {\n    return getNodeAttributes(state, typeOrName);\n  }\n  if (schemaType === 'mark') {\n    return getMarkAttributes(state, typeOrName);\n  }\n  return {};\n}\n\n/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nfunction removeDuplicates(array, by = JSON.stringify) {\n  const seen = {};\n  return array.filter(item => {\n    const key = by(item);\n    return Object.prototype.hasOwnProperty.call(seen, key) ? false : seen[key] = true;\n  });\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes) {\n  const uniqueChanges = removeDuplicates(changes);\n  return uniqueChanges.length === 1 ? uniqueChanges : uniqueChanges.filter((change, index) => {\n    const rest = uniqueChanges.filter((_, i) => i !== index);\n    return !rest.some(otherChange => {\n      return change.oldRange.from >= otherChange.oldRange.from && change.oldRange.to <= otherChange.oldRange.to && change.newRange.from >= otherChange.newRange.from && change.newRange.to <= otherChange.newRange.to;\n    });\n  });\n}\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nfunction getChangedRanges(transform) {\n  const {\n    mapping,\n    steps\n  } = transform;\n  const changes = [];\n  mapping.maps.forEach((stepMap, index) => {\n    const ranges = [];\n    // This accounts for step changes where no range was actually altered\n    // e.g. when setting a mark, node attribute, etc.\n    // @ts-ignore\n    if (!stepMap.ranges.length) {\n      const {\n        from,\n        to\n      } = steps[index];\n      if (from === undefined || to === undefined) {\n        return;\n      }\n      ranges.push({\n        from,\n        to\n      });\n    } else {\n      stepMap.forEach((from, to) => {\n        ranges.push({\n          from,\n          to\n        });\n      });\n    }\n    ranges.forEach(({\n      from,\n      to\n    }) => {\n      const newStart = mapping.slice(index).map(from, -1);\n      const newEnd = mapping.slice(index).map(to);\n      const oldStart = mapping.invert().map(newStart, -1);\n      const oldEnd = mapping.invert().map(newEnd);\n      changes.push({\n        oldRange: {\n          from: oldStart,\n          to: oldEnd\n        },\n        newRange: {\n          from: newStart,\n          to: newEnd\n        }\n      });\n    });\n  });\n  return simplifyChangedRanges(changes);\n}\nfunction getDebugJSON(node, startOffset = 0) {\n  const isTopNode = node.type === node.type.schema.topNodeType;\n  const increment = isTopNode ? 0 : 1;\n  const from = startOffset;\n  const to = from + node.nodeSize;\n  const marks = node.marks.map(mark => {\n    const output = {\n      type: mark.type.name\n    };\n    if (Object.keys(mark.attrs).length) {\n      output.attrs = {\n        ...mark.attrs\n      };\n    }\n    return output;\n  });\n  const attrs = {\n    ...node.attrs\n  };\n  const output = {\n    type: node.type.name,\n    from,\n    to\n  };\n  if (Object.keys(attrs).length) {\n    output.attrs = attrs;\n  }\n  if (marks.length) {\n    output.marks = marks;\n  }\n  if (node.content.childCount) {\n    output.content = [];\n    node.forEach((child, offset) => {\n      var _a;\n      (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\n    });\n  }\n  if (node.text) {\n    output.text = node.text;\n  }\n  return output;\n}\nfunction getMarksBetween(from, to, doc) {\n  const marks = [];\n  // get all inclusive marks on empty selection\n  if (from === to) {\n    doc.resolve(from).marks().forEach(mark => {\n      const $pos = doc.resolve(from);\n      const range = getMarkRange($pos, mark.type);\n      if (!range) {\n        return;\n      }\n      marks.push({\n        mark,\n        ...range\n      });\n    });\n  } else {\n    doc.nodesBetween(from, to, (node, pos) => {\n      if (!node || (node === null || node === void 0 ? void 0 : node.nodeSize) === undefined) {\n        return;\n      }\n      marks.push(...node.marks.map(mark => ({\n        from: pos,\n        to: pos + node.nodeSize,\n        mark\n      })));\n    });\n  }\n  return marks;\n}\n\n/**\n * Finds the first node of a given type or name in the current selection.\n * @param state The editor state.\n * @param typeOrName The node type or name.\n * @param pos The position to start searching from.\n * @param maxDepth The maximum depth to search.\n * @returns The node and the depth as an array.\n */\nconst getNodeAtPosition = (state, typeOrName, pos, maxDepth = 20) => {\n  const $pos = state.doc.resolve(pos);\n  let currentDepth = maxDepth;\n  let node = null;\n  while (currentDepth > 0 && node === null) {\n    const currentNode = $pos.node(currentDepth);\n    if ((currentNode === null || currentNode === void 0 ? void 0 : currentNode.type.name) === typeOrName) {\n      node = currentNode;\n    } else {\n      currentDepth -= 1;\n    }\n  }\n  return [node, currentDepth];\n};\n\n/**\n * Return attributes of an extension that should be splitted by keepOnSplit flag\n * @param extensionAttributes Array of extension attributes\n * @param typeName The type of the extension\n * @param attributes The attributes of the extension\n * @returns The splitted attributes\n */\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\n  return Object.fromEntries(Object.entries(attributes).filter(([name]) => {\n    const extensionAttribute = extensionAttributes.find(item => {\n      return item.type === typeName && item.name === name;\n    });\n    if (!extensionAttribute) {\n      return false;\n    }\n    return extensionAttribute.attribute.keepOnSplit;\n  }));\n}\nfunction isMarkActive(state, typeOrName, attributes = {}) {\n  const {\n    empty,\n    ranges\n  } = state.selection;\n  const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\n  if (empty) {\n    return !!(state.storedMarks || state.selection.$from.marks()).filter(mark => {\n      if (!type) {\n        return true;\n      }\n      return type.name === mark.type.name;\n    }).find(mark => objectIncludes(mark.attrs, attributes, {\n      strict: false\n    }));\n  }\n  let selectionRange = 0;\n  const markRanges = [];\n  ranges.forEach(({\n    $from,\n    $to\n  }) => {\n    const from = $from.pos;\n    const to = $to.pos;\n    state.doc.nodesBetween(from, to, (node, pos) => {\n      if (!node.isText && !node.marks.length) {\n        return;\n      }\n      const relativeFrom = Math.max(from, pos);\n      const relativeTo = Math.min(to, pos + node.nodeSize);\n      const range = relativeTo - relativeFrom;\n      selectionRange += range;\n      markRanges.push(...node.marks.map(mark => ({\n        mark,\n        from: relativeFrom,\n        to: relativeTo\n      })));\n    });\n  });\n  if (selectionRange === 0) {\n    return false;\n  }\n  // calculate range of matched mark\n  const matchedRange = markRanges.filter(markRange => {\n    if (!type) {\n      return true;\n    }\n    return type.name === markRange.mark.type.name;\n  }).filter(markRange => objectIncludes(markRange.mark.attrs, attributes, {\n    strict: false\n  })).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\n  // calculate range of marks that excludes the searched mark\n  // for example `code` doesn’t allow any other marks\n  const excludedRange = markRanges.filter(markRange => {\n    if (!type) {\n      return true;\n    }\n    return markRange.mark.type !== type && markRange.mark.type.excludes(type);\n  }).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\n  // we only include the result of `excludedRange`\n  // if there is a match at all\n  const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\n  return range >= selectionRange;\n}\nfunction isActive(state, name, attributes = {}) {\n  if (!name) {\n    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\n  }\n  const schemaType = getSchemaTypeNameByName(name, state.schema);\n  if (schemaType === 'node') {\n    return isNodeActive(state, name, attributes);\n  }\n  if (schemaType === 'mark') {\n    return isMarkActive(state, name, attributes);\n  }\n  return false;\n}\nconst isAtEndOfNode = (state, nodeType) => {\n  const {\n    $from,\n    $to,\n    $anchor\n  } = state.selection;\n  if (nodeType) {\n    const parentNode = findParentNode(node => node.type.name === nodeType)(state.selection);\n    if (!parentNode) {\n      return false;\n    }\n    const $parentPos = state.doc.resolve(parentNode.pos + 1);\n    if ($anchor.pos + 1 === $parentPos.end()) {\n      return true;\n    }\n    return false;\n  }\n  if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\n    return false;\n  }\n  return true;\n};\nconst isAtStartOfNode = state => {\n  const {\n    $from,\n    $to\n  } = state.selection;\n  if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\n    return false;\n  }\n  return true;\n};\nfunction isList(name, extensions) {\n  const {\n    nodeExtensions\n  } = splitExtensions(extensions);\n  const extension = nodeExtensions.find(item => item.name === name);\n  if (!extension) {\n    return false;\n  }\n  const context = {\n    name: extension.name,\n    options: extension.options,\n    storage: extension.storage\n  };\n  const group = callOrReturn(getExtensionField(extension, 'group', context));\n  if (typeof group !== 'string') {\n    return false;\n  }\n  return group.split(' ').includes('list');\n}\n\n/**\n * Returns true if the given prosemirror node is empty.\n */\nfunction isNodeEmpty(node, {\n  checkChildren = true,\n  ignoreWhitespace = false\n} = {}) {\n  var _a;\n  if (ignoreWhitespace) {\n    if (node.type.name === 'hardBreak') {\n      // Hard breaks are considered empty\n      return true;\n    }\n    if (node.isText) {\n      return /^\\s*$/m.test((_a = node.text) !== null && _a !== void 0 ? _a : '');\n    }\n  }\n  if (node.isText) {\n    return !node.text;\n  }\n  if (node.isAtom || node.isLeaf) {\n    return false;\n  }\n  if (node.content.childCount === 0) {\n    return true;\n  }\n  if (checkChildren) {\n    let isContentEmpty = true;\n    node.content.forEach(childNode => {\n      if (isContentEmpty === false) {\n        // Exit early for perf\n        return;\n      }\n      if (!isNodeEmpty(childNode, {\n        ignoreWhitespace,\n        checkChildren\n      })) {\n        isContentEmpty = false;\n      }\n    });\n    return isContentEmpty;\n  }\n  return false;\n}\nfunction isNodeSelection(value) {\n  return value instanceof NodeSelection;\n}\nfunction posToDOMRect(view, from, to) {\n  const minPos = 0;\n  const maxPos = view.state.doc.content.size;\n  const resolvedFrom = minMax(from, minPos, maxPos);\n  const resolvedEnd = minMax(to, minPos, maxPos);\n  const start = view.coordsAtPos(resolvedFrom);\n  const end = view.coordsAtPos(resolvedEnd, -1);\n  const top = Math.min(start.top, end.top);\n  const bottom = Math.max(start.bottom, end.bottom);\n  const left = Math.min(start.left, end.left);\n  const right = Math.max(start.right, end.right);\n  const width = right - left;\n  const height = bottom - top;\n  const x = left;\n  const y = top;\n  const data = {\n    top,\n    bottom,\n    left,\n    right,\n    width,\n    height,\n    x,\n    y\n  };\n  return {\n    ...data,\n    toJSON: () => data\n  };\n}\nfunction canSetMark(state, tr, newMarkType) {\n  var _a;\n  const {\n    selection\n  } = tr;\n  let cursor = null;\n  if (isTextSelection(selection)) {\n    cursor = selection.$cursor;\n  }\n  if (cursor) {\n    const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();\n    // There can be no current marks that exclude the new mark\n    return !!newMarkType.isInSet(currentMarks) || !currentMarks.some(mark => mark.type.excludes(newMarkType));\n  }\n  const {\n    ranges\n  } = selection;\n  return ranges.some(({\n    $from,\n    $to\n  }) => {\n    let someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false;\n    state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {\n      // If we already found a mark that we can enable, return false to bypass the remaining search\n      if (someNodeSupportsMark) {\n        return false;\n      }\n      if (node.isInline) {\n        const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);\n        const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks) || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType));\n        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;\n      }\n      return !someNodeSupportsMark;\n    });\n    return someNodeSupportsMark;\n  });\n}\nconst setMark = (typeOrName, attributes = {}) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  const {\n    selection\n  } = tr;\n  const {\n    empty,\n    ranges\n  } = selection;\n  const type = getMarkType(typeOrName, state.schema);\n  if (dispatch) {\n    if (empty) {\n      const oldAttributes = getMarkAttributes(state, type);\n      tr.addStoredMark(type.create({\n        ...oldAttributes,\n        ...attributes\n      }));\n    } else {\n      ranges.forEach(range => {\n        const from = range.$from.pos;\n        const to = range.$to.pos;\n        state.doc.nodesBetween(from, to, (node, pos) => {\n          const trimmedFrom = Math.max(pos, from);\n          const trimmedTo = Math.min(pos + node.nodeSize, to);\n          const someHasMark = node.marks.find(mark => mark.type === type);\n          // if there is already a mark of this type\n          // we know that we have to merge its attributes\n          // otherwise we add a fresh new mark\n          if (someHasMark) {\n            node.marks.forEach(mark => {\n              if (type === mark.type) {\n                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                  ...mark.attrs,\n                  ...attributes\n                }));\n              }\n            });\n          } else {\n            tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\n          }\n        });\n      });\n    }\n  }\n  return canSetMark(state, tr, type);\n};\nconst setMeta = (key, value) => ({\n  tr\n}) => {\n  tr.setMeta(key, value);\n  return true;\n};\nconst setNode = (typeOrName, attributes = {}) => ({\n  state,\n  dispatch,\n  chain\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  // TODO: use a fallback like insertContent?\n  if (!type.isTextblock) {\n    console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\n    return false;\n  }\n  return chain()\n  // try to convert node to default node if needed\n  .command(({\n    commands\n  }) => {\n    const canSetBlock = setBlockType(type, attributes)(state);\n    if (canSetBlock) {\n      return true;\n    }\n    return commands.clearNodes();\n  }).command(({\n    state: updatedState\n  }) => {\n    return setBlockType(type, attributes)(updatedState, dispatch);\n  }).run();\n};\nconst setNodeSelection = position => ({\n  tr,\n  dispatch\n}) => {\n  if (dispatch) {\n    const {\n      doc\n    } = tr;\n    const from = minMax(position, 0, doc.content.size);\n    const selection = NodeSelection.create(doc, from);\n    tr.setSelection(selection);\n  }\n  return true;\n};\nconst setTextSelection = position => ({\n  tr,\n  dispatch\n}) => {\n  if (dispatch) {\n    const {\n      doc\n    } = tr;\n    const {\n      from,\n      to\n    } = typeof position === 'number' ? {\n      from: position,\n      to: position\n    } : position;\n    const minPos = TextSelection.atStart(doc).from;\n    const maxPos = TextSelection.atEnd(doc).to;\n    const resolvedFrom = minMax(from, minPos, maxPos);\n    const resolvedEnd = minMax(to, minPos, maxPos);\n    const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd);\n    tr.setSelection(selection);\n  }\n  return true;\n};\nconst sinkListItem = typeOrName => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  return sinkListItem$1(type)(state, dispatch);\n};\nfunction ensureMarks(state, splittableMarks) {\n  const marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();\n  if (marks) {\n    const filteredMarks = marks.filter(mark => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));\n    state.tr.ensureMarks(filteredMarks);\n  }\n}\nconst splitBlock = ({\n  keepMarks = true\n} = {}) => ({\n  tr,\n  state,\n  dispatch,\n  editor\n}) => {\n  const {\n    selection,\n    doc\n  } = tr;\n  const {\n    $from,\n    $to\n  } = selection;\n  const extensionAttributes = editor.extensionManager.attributes;\n  const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n  if (selection instanceof NodeSelection && selection.node.isBlock) {\n    if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n      return false;\n    }\n    if (dispatch) {\n      if (keepMarks) {\n        ensureMarks(state, editor.extensionManager.splittableMarks);\n      }\n      tr.split($from.pos).scrollIntoView();\n    }\n    return true;\n  }\n  if (!$from.parent.isBlock) {\n    return false;\n  }\n  const atEnd = $to.parentOffset === $to.parent.content.size;\n  const deflt = $from.depth === 0 ? undefined : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n  let types = atEnd && deflt ? [{\n    type: deflt,\n    attrs: newAttributes\n  }] : undefined;\n  let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);\n  if (!types && !can && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{\n    type: deflt\n  }] : undefined)) {\n    can = true;\n    types = deflt ? [{\n      type: deflt,\n      attrs: newAttributes\n    }] : undefined;\n  }\n  if (dispatch) {\n    if (can) {\n      if (selection instanceof TextSelection) {\n        tr.deleteSelection();\n      }\n      tr.split(tr.mapping.map($from.pos), 1, types);\n      if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n        const first = tr.mapping.map($from.before());\n        const $first = tr.doc.resolve(first);\n        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n          tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n        }\n      }\n    }\n    if (keepMarks) {\n      ensureMarks(state, editor.extensionManager.splittableMarks);\n    }\n    tr.scrollIntoView();\n  }\n  return can;\n};\nconst splitListItem = (typeOrName, overrideAttrs = {}) => ({\n  tr,\n  state,\n  dispatch,\n  editor\n}) => {\n  var _a;\n  const type = getNodeType(typeOrName, state.schema);\n  const {\n    $from,\n    $to\n  } = state.selection;\n  // @ts-ignore\n  // eslint-disable-next-line\n  const node = state.selection.node;\n  if (node && node.isBlock || $from.depth < 2 || !$from.sameParent($to)) {\n    return false;\n  }\n  const grandParent = $from.node(-1);\n  if (grandParent.type !== type) {\n    return false;\n  }\n  const extensionAttributes = editor.extensionManager.attributes;\n  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n    // In an empty block. If this is a nested list, the wrapping\n    // list item should be split. Otherwise, bail out and let next\n    // command handle lifting.\n    if ($from.depth === 2 || $from.node(-3).type !== type || $from.index(-2) !== $from.node(-2).childCount - 1) {\n      return false;\n    }\n    if (dispatch) {\n      let wrap = Fragment.empty;\n      // eslint-disable-next-line\n      const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n      // Build a fragment containing empty versions of the structure\n      // from the outer list item to the parent node of the cursor\n      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n        wrap = Fragment.from($from.node(d).copy(wrap));\n      }\n      // eslint-disable-next-line\n      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n      // Add a second list item with an empty default start node\n      const newNextTypeAttributes = {\n        ...getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs),\n        ...overrideAttrs\n      };\n      const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;\n      wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined));\n      const start = $from.before($from.depth - (depthBefore - 1));\n      tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));\n      let sel = -1;\n      tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n        if (sel > -1) {\n          return false;\n        }\n        if (n.isTextblock && n.content.size === 0) {\n          sel = pos + 1;\n        }\n      });\n      if (sel > -1) {\n        tr.setSelection(TextSelection.near(tr.doc.resolve(sel)));\n      }\n      tr.scrollIntoView();\n    }\n    return true;\n  }\n  const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n  const newTypeAttributes = {\n    ...getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs),\n    ...overrideAttrs\n  };\n  const newNextTypeAttributes = {\n    ...getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs),\n    ...overrideAttrs\n  };\n  tr.delete($from.pos, $to.pos);\n  const types = nextType ? [{\n    type,\n    attrs: newTypeAttributes\n  }, {\n    type: nextType,\n    attrs: newNextTypeAttributes\n  }] : [{\n    type,\n    attrs: newTypeAttributes\n  }];\n  if (!canSplit(tr.doc, $from.pos, 2)) {\n    return false;\n  }\n  if (dispatch) {\n    const {\n      selection,\n      storedMarks\n    } = state;\n    const {\n      splittableMarks\n    } = editor.extensionManager;\n    const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n    tr.split($from.pos, 2, types).scrollIntoView();\n    if (!marks || !dispatch) {\n      return true;\n    }\n    const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n    tr.ensureMarks(filteredMarks);\n  }\n  return true;\n};\nconst joinListBackwards = (tr, listType) => {\n  const list = findParentNode(node => node.type === listType)(tr.selection);\n  if (!list) {\n    return true;\n  }\n  const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\n  if (before === undefined) {\n    return true;\n  }\n  const nodeBefore = tr.doc.nodeAt(before);\n  const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && canJoin(tr.doc, list.pos);\n  if (!canJoinBackwards) {\n    return true;\n  }\n  tr.join(list.pos);\n  return true;\n};\nconst joinListForwards = (tr, listType) => {\n  const list = findParentNode(node => node.type === listType)(tr.selection);\n  if (!list) {\n    return true;\n  }\n  const after = tr.doc.resolve(list.start).after(list.depth);\n  if (after === undefined) {\n    return true;\n  }\n  const nodeAfter = tr.doc.nodeAt(after);\n  const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && canJoin(tr.doc, after);\n  if (!canJoinForwards) {\n    return true;\n  }\n  tr.join(after);\n  return true;\n};\nconst toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({\n  editor,\n  tr,\n  state,\n  dispatch,\n  chain,\n  commands,\n  can\n}) => {\n  const {\n    extensions,\n    splittableMarks\n  } = editor.extensionManager;\n  const listType = getNodeType(listTypeOrName, state.schema);\n  const itemType = getNodeType(itemTypeOrName, state.schema);\n  const {\n    selection,\n    storedMarks\n  } = state;\n  const {\n    $from,\n    $to\n  } = selection;\n  const range = $from.blockRange($to);\n  const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n  if (!range) {\n    return false;\n  }\n  const parentList = findParentNode(node => isList(node.type.name, extensions))(selection);\n  if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n    // remove list\n    if (parentList.node.type === listType) {\n      return commands.liftListItem(itemType);\n    }\n    // change list type\n    if (isList(parentList.node.type.name, extensions) && listType.validContent(parentList.node.content) && dispatch) {\n      return chain().command(() => {\n        tr.setNodeMarkup(parentList.pos, listType);\n        return true;\n      }).command(() => joinListBackwards(tr, listType)).command(() => joinListForwards(tr, listType)).run();\n    }\n  }\n  if (!keepMarks || !marks || !dispatch) {\n    return chain()\n    // try to convert node to default node if needed\n    .command(() => {\n      const canWrapInList = can().wrapInList(listType, attributes);\n      if (canWrapInList) {\n        return true;\n      }\n      return commands.clearNodes();\n    }).wrapInList(listType, attributes).command(() => joinListBackwards(tr, listType)).command(() => joinListForwards(tr, listType)).run();\n  }\n  return chain()\n  // try to convert node to default node if needed\n  .command(() => {\n    const canWrapInList = can().wrapInList(listType, attributes);\n    const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n    tr.ensureMarks(filteredMarks);\n    if (canWrapInList) {\n      return true;\n    }\n    return commands.clearNodes();\n  }).wrapInList(listType, attributes).command(() => joinListBackwards(tr, listType)).command(() => joinListForwards(tr, listType)).run();\n};\nconst toggleMark = (typeOrName, attributes = {}, options = {}) => ({\n  state,\n  commands\n}) => {\n  const {\n    extendEmptyMarkRange = false\n  } = options;\n  const type = getMarkType(typeOrName, state.schema);\n  const isActive = isMarkActive(state, type, attributes);\n  if (isActive) {\n    return commands.unsetMark(type, {\n      extendEmptyMarkRange\n    });\n  }\n  return commands.setMark(type, attributes);\n};\nconst toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({\n  state,\n  commands\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  const toggleType = getNodeType(toggleTypeOrName, state.schema);\n  const isActive = isNodeActive(state, type, attributes);\n  if (isActive) {\n    return commands.setNode(toggleType);\n  }\n  return commands.setNode(type, attributes);\n};\nconst toggleWrap = (typeOrName, attributes = {}) => ({\n  state,\n  commands\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  const isActive = isNodeActive(state, type, attributes);\n  if (isActive) {\n    return commands.lift(type);\n  }\n  return commands.wrapIn(type, attributes);\n};\nconst undoInputRule = () => ({\n  state,\n  dispatch\n}) => {\n  const plugins = state.plugins;\n  for (let i = 0; i < plugins.length; i += 1) {\n    const plugin = plugins[i];\n    let undoable;\n    // @ts-ignore\n    // eslint-disable-next-line\n    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n      if (dispatch) {\n        const tr = state.tr;\n        const toUndo = undoable.transform;\n        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n          tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\n        }\n        if (undoable.text) {\n          const marks = tr.doc.resolve(undoable.from).marks();\n          tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\n        } else {\n          tr.delete(undoable.from, undoable.to);\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n};\nconst unsetAllMarks = () => ({\n  tr,\n  dispatch\n}) => {\n  const {\n    selection\n  } = tr;\n  const {\n    empty,\n    ranges\n  } = selection;\n  if (empty) {\n    return true;\n  }\n  if (dispatch) {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos);\n    });\n  }\n  return true;\n};\nconst unsetMark = (typeOrName, options = {}) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  var _a;\n  const {\n    extendEmptyMarkRange = false\n  } = options;\n  const {\n    selection\n  } = tr;\n  const type = getMarkType(typeOrName, state.schema);\n  const {\n    $from,\n    empty,\n    ranges\n  } = selection;\n  if (!dispatch) {\n    return true;\n  }\n  if (empty && extendEmptyMarkRange) {\n    let {\n      from,\n      to\n    } = selection;\n    const attrs = (_a = $from.marks().find(mark => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;\n    const range = getMarkRange($from, type, attrs);\n    if (range) {\n      from = range.from;\n      to = range.to;\n    }\n    tr.removeMark(from, to, type);\n  } else {\n    ranges.forEach(range => {\n      tr.removeMark(range.$from.pos, range.$to.pos, type);\n    });\n  }\n  tr.removeStoredMark(type);\n  return true;\n};\nconst updateAttributes = (typeOrName, attributes = {}) => ({\n  tr,\n  state,\n  dispatch\n}) => {\n  let nodeType = null;\n  let markType = null;\n  const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n  if (!schemaType) {\n    return false;\n  }\n  if (schemaType === 'node') {\n    nodeType = getNodeType(typeOrName, state.schema);\n  }\n  if (schemaType === 'mark') {\n    markType = getMarkType(typeOrName, state.schema);\n  }\n  if (dispatch) {\n    tr.selection.ranges.forEach(range => {\n      const from = range.$from.pos;\n      const to = range.$to.pos;\n      state.doc.nodesBetween(from, to, (node, pos) => {\n        if (nodeType && nodeType === node.type) {\n          tr.setNodeMarkup(pos, undefined, {\n            ...node.attrs,\n            ...attributes\n          });\n        }\n        if (markType && node.marks.length) {\n          node.marks.forEach(mark => {\n            if (markType === mark.type) {\n              const trimmedFrom = Math.max(pos, from);\n              const trimmedTo = Math.min(pos + node.nodeSize, to);\n              tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                ...mark.attrs,\n                ...attributes\n              }));\n            }\n          });\n        }\n      });\n    });\n  }\n  return true;\n};\nconst wrapIn = (typeOrName, attributes = {}) => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  return wrapIn$1(type, attributes)(state, dispatch);\n};\nconst wrapInList = (typeOrName, attributes = {}) => ({\n  state,\n  dispatch\n}) => {\n  const type = getNodeType(typeOrName, state.schema);\n  return wrapInList$1(type, attributes)(state, dispatch);\n};\nvar commands = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  blur: blur,\n  clearContent: clearContent,\n  clearNodes: clearNodes,\n  command: command,\n  createParagraphNear: createParagraphNear,\n  cut: cut,\n  deleteCurrentNode: deleteCurrentNode,\n  deleteNode: deleteNode,\n  deleteRange: deleteRange,\n  deleteSelection: deleteSelection,\n  enter: enter,\n  exitCode: exitCode,\n  extendMarkRange: extendMarkRange,\n  first: first,\n  focus: focus,\n  forEach: forEach,\n  insertContent: insertContent,\n  insertContentAt: insertContentAt,\n  joinBackward: joinBackward,\n  joinDown: joinDown,\n  joinForward: joinForward,\n  joinItemBackward: joinItemBackward,\n  joinItemForward: joinItemForward,\n  joinTextblockBackward: joinTextblockBackward,\n  joinTextblockForward: joinTextblockForward,\n  joinUp: joinUp,\n  keyboardShortcut: keyboardShortcut,\n  lift: lift,\n  liftEmptyBlock: liftEmptyBlock,\n  liftListItem: liftListItem,\n  newlineInCode: newlineInCode,\n  resetAttributes: resetAttributes,\n  scrollIntoView: scrollIntoView,\n  selectAll: selectAll,\n  selectNodeBackward: selectNodeBackward,\n  selectNodeForward: selectNodeForward,\n  selectParentNode: selectParentNode,\n  selectTextblockEnd: selectTextblockEnd,\n  selectTextblockStart: selectTextblockStart,\n  setContent: setContent,\n  setMark: setMark,\n  setMeta: setMeta,\n  setNode: setNode,\n  setNodeSelection: setNodeSelection,\n  setTextSelection: setTextSelection,\n  sinkListItem: sinkListItem,\n  splitBlock: splitBlock,\n  splitListItem: splitListItem,\n  toggleList: toggleList,\n  toggleMark: toggleMark,\n  toggleNode: toggleNode,\n  toggleWrap: toggleWrap,\n  undoInputRule: undoInputRule,\n  unsetAllMarks: unsetAllMarks,\n  unsetMark: unsetMark,\n  updateAttributes: updateAttributes,\n  wrapIn: wrapIn,\n  wrapInList: wrapInList\n});\nconst Commands = Extension.create({\n  name: 'commands',\n  addCommands() {\n    return {\n      ...commands\n    };\n  }\n});\nconst Editable = Extension.create({\n  name: 'editable',\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('editable'),\n      props: {\n        editable: () => this.editor.options.editable\n      }\n    })];\n  }\n});\nconst FocusEvents = Extension.create({\n  name: 'focusEvents',\n  addProseMirrorPlugins() {\n    const {\n      editor\n    } = this;\n    return [new Plugin({\n      key: new PluginKey('focusEvents'),\n      props: {\n        handleDOMEvents: {\n          focus: (view, event) => {\n            editor.isFocused = true;\n            const transaction = editor.state.tr.setMeta('focus', {\n              event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          },\n          blur: (view, event) => {\n            editor.isFocused = false;\n            const transaction = editor.state.tr.setMeta('blur', {\n              event\n            }).setMeta('addToHistory', false);\n            view.dispatch(transaction);\n            return false;\n          }\n        }\n      }\n    })];\n  }\n});\nconst Keymap = Extension.create({\n  name: 'keymap',\n  addKeyboardShortcuts() {\n    const handleBackspace = () => this.editor.commands.first(({\n      commands\n    }) => [() => commands.undoInputRule(),\n    // maybe convert first text block node to default node\n    () => commands.command(({\n      tr\n    }) => {\n      const {\n        selection,\n        doc\n      } = tr;\n      const {\n        empty,\n        $anchor\n      } = selection;\n      const {\n        pos,\n        parent\n      } = $anchor;\n      const $parentPos = $anchor.parent.isTextblock && pos > 0 ? tr.doc.resolve(pos - 1) : $anchor;\n      const parentIsIsolating = $parentPos.parent.type.spec.isolating;\n      const parentPos = $anchor.pos - $anchor.parentOffset;\n      const isAtStart = parentIsIsolating && $parentPos.parent.childCount === 1 ? parentPos === $anchor.pos : Selection.atStart(doc).from === pos;\n      if (!empty || !parent.type.isTextblock || parent.textContent.length || !isAtStart || isAtStart && $anchor.parent.type.name === 'paragraph' // prevent clearNodes when no nodes to clear, otherwise history stack is appended\n      ) {\n        return false;\n      }\n      return commands.clearNodes();\n    }), () => commands.deleteSelection(), () => commands.joinBackward(), () => commands.selectNodeBackward()]);\n    const handleDelete = () => this.editor.commands.first(({\n      commands\n    }) => [() => commands.deleteSelection(), () => commands.deleteCurrentNode(), () => commands.joinForward(), () => commands.selectNodeForward()]);\n    const handleEnter = () => this.editor.commands.first(({\n      commands\n    }) => [() => commands.newlineInCode(), () => commands.createParagraphNear(), () => commands.liftEmptyBlock(), () => commands.splitBlock()]);\n    const baseKeymap = {\n      Enter: handleEnter,\n      'Mod-Enter': () => this.editor.commands.exitCode(),\n      Backspace: handleBackspace,\n      'Mod-Backspace': handleBackspace,\n      'Shift-Backspace': handleBackspace,\n      Delete: handleDelete,\n      'Mod-Delete': handleDelete,\n      'Mod-a': () => this.editor.commands.selectAll()\n    };\n    const pcKeymap = {\n      ...baseKeymap\n    };\n    const macKeymap = {\n      ...baseKeymap,\n      'Ctrl-h': handleBackspace,\n      'Alt-Backspace': handleBackspace,\n      'Ctrl-d': handleDelete,\n      'Ctrl-Alt-Backspace': handleDelete,\n      'Alt-Delete': handleDelete,\n      'Alt-d': handleDelete,\n      'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n      'Ctrl-e': () => this.editor.commands.selectTextblockEnd()\n    };\n    if (isiOS() || isMacOS()) {\n      return macKeymap;\n    }\n    return pcKeymap;\n  },\n  addProseMirrorPlugins() {\n    return [\n    // With this plugin we check if the whole document was selected and deleted.\n    // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n    // to a paragraph if necessary.\n    // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n    // with many other commands.\n    new Plugin({\n      key: new PluginKey('clearDocument'),\n      appendTransaction: (transactions, oldState, newState) => {\n        const docChanges = transactions.some(transaction => transaction.docChanged) && !oldState.doc.eq(newState.doc);\n        if (!docChanges) {\n          return;\n        }\n        const {\n          empty,\n          from,\n          to\n        } = oldState.selection;\n        const allFrom = Selection.atStart(oldState.doc).from;\n        const allEnd = Selection.atEnd(oldState.doc).to;\n        const allWasSelected = from === allFrom && to === allEnd;\n        if (empty || !allWasSelected) {\n          return;\n        }\n        const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0;\n        if (!isEmpty) {\n          return;\n        }\n        const tr = newState.tr;\n        const state = createChainableState({\n          state: newState,\n          transaction: tr\n        });\n        const {\n          commands\n        } = new CommandManager({\n          editor: this.editor,\n          state\n        });\n        commands.clearNodes();\n        if (!tr.steps.length) {\n          return;\n        }\n        return tr;\n      }\n    })];\n  }\n});\nconst Tabindex = Extension.create({\n  name: 'tabindex',\n  addProseMirrorPlugins() {\n    return [new Plugin({\n      key: new PluginKey('tabindex'),\n      props: {\n        attributes: () => this.editor.isEditable ? {\n          tabindex: '0'\n        } : {}\n      }\n    })];\n  }\n});\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ClipboardTextSerializer: ClipboardTextSerializer,\n  Commands: Commands,\n  Editable: Editable,\n  FocusEvents: FocusEvents,\n  Keymap: Keymap,\n  Tabindex: Tabindex\n});\nclass NodePos {\n  get name() {\n    return this.node.type.name;\n  }\n  constructor(pos, editor, isBlock = false, node = null) {\n    this.currentNode = null;\n    this.actualDepth = null;\n    this.isBlock = isBlock;\n    this.resolvedPos = pos;\n    this.editor = editor;\n    this.currentNode = node;\n  }\n  get node() {\n    return this.currentNode || this.resolvedPos.node();\n  }\n  get element() {\n    return this.editor.view.domAtPos(this.pos).node;\n  }\n  get depth() {\n    var _a;\n    return (_a = this.actualDepth) !== null && _a !== void 0 ? _a : this.resolvedPos.depth;\n  }\n  get pos() {\n    return this.resolvedPos.pos;\n  }\n  get content() {\n    return this.node.content;\n  }\n  set content(content) {\n    let from = this.from;\n    let to = this.to;\n    if (this.isBlock) {\n      if (this.content.size === 0) {\n        console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);\n        return;\n      }\n      from = this.from + 1;\n      to = this.to - 1;\n    }\n    this.editor.commands.insertContentAt({\n      from,\n      to\n    }, content);\n  }\n  get attributes() {\n    return this.node.attrs;\n  }\n  get textContent() {\n    return this.node.textContent;\n  }\n  get size() {\n    return this.node.nodeSize;\n  }\n  get from() {\n    if (this.isBlock) {\n      return this.pos;\n    }\n    return this.resolvedPos.start(this.resolvedPos.depth);\n  }\n  get range() {\n    return {\n      from: this.from,\n      to: this.to\n    };\n  }\n  get to() {\n    if (this.isBlock) {\n      return this.pos + this.size;\n    }\n    return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);\n  }\n  get parent() {\n    if (this.depth === 0) {\n      return null;\n    }\n    const parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1);\n    const $pos = this.resolvedPos.doc.resolve(parentPos);\n    return new NodePos($pos, this.editor);\n  }\n  get before() {\n    let $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));\n    if ($pos.depth !== this.depth) {\n      $pos = this.resolvedPos.doc.resolve(this.from - 3);\n    }\n    return new NodePos($pos, this.editor);\n  }\n  get after() {\n    let $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));\n    if ($pos.depth !== this.depth) {\n      $pos = this.resolvedPos.doc.resolve(this.to + 3);\n    }\n    return new NodePos($pos, this.editor);\n  }\n  get children() {\n    const children = [];\n    this.node.content.forEach((node, offset) => {\n      const isBlock = node.isBlock && !node.isTextblock;\n      const targetPos = this.pos + offset + 1;\n      const $pos = this.resolvedPos.doc.resolve(targetPos);\n      if (!isBlock && $pos.depth <= this.depth) {\n        return;\n      }\n      const childNodePos = new NodePos($pos, this.editor, isBlock, isBlock ? node : null);\n      if (isBlock) {\n        childNodePos.actualDepth = this.depth + 1;\n      }\n      children.push(new NodePos($pos, this.editor, isBlock, isBlock ? node : null));\n    });\n    return children;\n  }\n  get firstChild() {\n    return this.children[0] || null;\n  }\n  get lastChild() {\n    const children = this.children;\n    return children[children.length - 1] || null;\n  }\n  closest(selector, attributes = {}) {\n    let node = null;\n    let currentNode = this.parent;\n    while (currentNode && !node) {\n      if (currentNode.node.type.name === selector) {\n        if (Object.keys(attributes).length > 0) {\n          const nodeAttributes = currentNode.node.attrs;\n          const attrKeys = Object.keys(attributes);\n          for (let index = 0; index < attrKeys.length; index += 1) {\n            const key = attrKeys[index];\n            if (nodeAttributes[key] !== attributes[key]) {\n              break;\n            }\n          }\n        } else {\n          node = currentNode;\n        }\n      }\n      currentNode = currentNode.parent;\n    }\n    return node;\n  }\n  querySelector(selector, attributes = {}) {\n    return this.querySelectorAll(selector, attributes, true)[0] || null;\n  }\n  querySelectorAll(selector, attributes = {}, firstItemOnly = false) {\n    let nodes = [];\n    if (!this.children || this.children.length === 0) {\n      return nodes;\n    }\n    const attrKeys = Object.keys(attributes);\n    /**\n     * Finds all children recursively that match the selector and attributes\n     * If firstItemOnly is true, it will return the first item found\n     */\n    this.children.forEach(childPos => {\n      // If we already found a node and we only want the first item, we dont need to keep going\n      if (firstItemOnly && nodes.length > 0) {\n        return;\n      }\n      if (childPos.node.type.name === selector) {\n        const doesAllAttributesMatch = attrKeys.every(key => attributes[key] === childPos.node.attrs[key]);\n        if (doesAllAttributesMatch) {\n          nodes.push(childPos);\n        }\n      }\n      // If we already found a node and we only want the first item, we can stop here and skip the recursion\n      if (firstItemOnly && nodes.length > 0) {\n        return;\n      }\n      nodes = nodes.concat(childPos.querySelectorAll(selector, attributes, firstItemOnly));\n    });\n    return nodes;\n  }\n  setAttribute(attributes) {\n    const oldSelection = this.editor.state.selection;\n    this.editor.chain().setTextSelection(this.from).updateAttributes(this.node.type.name, attributes).setTextSelection(oldSelection.from).run();\n  }\n}\nconst style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 0 !important;\n  height: 0 !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`;\nfunction createStyleTag(style, nonce, suffix) {\n  const tiptapStyleTag = document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : ''}]`);\n  if (tiptapStyleTag !== null) {\n    return tiptapStyleTag;\n  }\n  const styleNode = document.createElement('style');\n  if (nonce) {\n    styleNode.setAttribute('nonce', nonce);\n  }\n  styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : ''}`, '');\n  styleNode.innerHTML = style;\n  document.getElementsByTagName('head')[0].appendChild(styleNode);\n  return styleNode;\n}\nclass Editor extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.isFocused = false;\n    /**\n     * The editor is considered initialized after the `create` event has been emitted.\n     */\n    this.isInitialized = false;\n    this.extensionStorage = {};\n    this.options = {\n      element: document.createElement('div'),\n      content: '',\n      injectCSS: true,\n      injectNonce: undefined,\n      extensions: [],\n      autofocus: false,\n      editable: true,\n      editorProps: {},\n      parseOptions: {},\n      coreExtensionOptions: {},\n      enableInputRules: true,\n      enablePasteRules: true,\n      enableCoreExtensions: true,\n      enableContentCheck: false,\n      onBeforeCreate: () => null,\n      onCreate: () => null,\n      onUpdate: () => null,\n      onSelectionUpdate: () => null,\n      onTransaction: () => null,\n      onFocus: () => null,\n      onBlur: () => null,\n      onDestroy: () => null,\n      onContentError: ({\n        error\n      }) => {\n        throw error;\n      }\n    };\n    this.isCapturingTransaction = false;\n    this.capturedTransaction = null;\n    this.setOptions(options);\n    this.createExtensionManager();\n    this.createCommandManager();\n    this.createSchema();\n    this.on('beforeCreate', this.options.onBeforeCreate);\n    this.emit('beforeCreate', {\n      editor: this\n    });\n    this.on('contentError', this.options.onContentError);\n    this.createView();\n    this.injectCSS();\n    this.on('create', this.options.onCreate);\n    this.on('update', this.options.onUpdate);\n    this.on('selectionUpdate', this.options.onSelectionUpdate);\n    this.on('transaction', this.options.onTransaction);\n    this.on('focus', this.options.onFocus);\n    this.on('blur', this.options.onBlur);\n    this.on('destroy', this.options.onDestroy);\n    window.setTimeout(() => {\n      if (this.isDestroyed) {\n        return;\n      }\n      this.commands.focus(this.options.autofocus);\n      this.emit('create', {\n        editor: this\n      });\n      this.isInitialized = true;\n    }, 0);\n  }\n  /**\n   * Returns the editor storage.\n   */\n  get storage() {\n    return this.extensionStorage;\n  }\n  /**\n   * An object of all registered commands.\n   */\n  get commands() {\n    return this.commandManager.commands;\n  }\n  /**\n   * Create a command chain to call multiple commands at once.\n   */\n  chain() {\n    return this.commandManager.chain();\n  }\n  /**\n   * Check if a command or a command chain can be executed. Without executing it.\n   */\n  can() {\n    return this.commandManager.can();\n  }\n  /**\n   * Inject CSS styles.\n   */\n  injectCSS() {\n    if (this.options.injectCSS && document) {\n      this.css = createStyleTag(style, this.options.injectNonce);\n    }\n  }\n  /**\n   * Update editor options.\n   *\n   * @param options A list of options\n   */\n  setOptions(options = {}) {\n    this.options = {\n      ...this.options,\n      ...options\n    };\n    if (!this.view || !this.state || this.isDestroyed) {\n      return;\n    }\n    if (this.options.editorProps) {\n      this.view.setProps(this.options.editorProps);\n    }\n    this.view.updateState(this.state);\n  }\n  /**\n   * Update editable state of the editor.\n   */\n  setEditable(editable, emitUpdate = true) {\n    this.setOptions({\n      editable\n    });\n    if (emitUpdate) {\n      this.emit('update', {\n        editor: this,\n        transaction: this.state.tr\n      });\n    }\n  }\n  /**\n   * Returns whether the editor is editable.\n   */\n  get isEditable() {\n    // since plugins are applied after creating the view\n    // `editable` is always `true` for one tick.\n    // that’s why we also have to check for `options.editable`\n    return this.options.editable && this.view && this.view.editable;\n  }\n  /**\n   * Returns the editor state.\n   */\n  get state() {\n    return this.view.state;\n  }\n  /**\n   * Register a ProseMirror plugin.\n   *\n   * @param plugin A ProseMirror plugin\n   * @param handlePlugins Control how to merge the plugin into the existing plugins.\n   */\n  registerPlugin(plugin, handlePlugins) {\n    const plugins = isFunction(handlePlugins) ? handlePlugins(plugin, [...this.state.plugins]) : [...this.state.plugins, plugin];\n    const state = this.state.reconfigure({\n      plugins\n    });\n    this.view.updateState(state);\n  }\n  /**\n   * Unregister a ProseMirror plugin.\n   *\n   * @param nameOrPluginKey The plugins name\n   */\n  unregisterPlugin(nameOrPluginKey) {\n    if (this.isDestroyed) {\n      return;\n    }\n    // @ts-ignore\n    const name = typeof nameOrPluginKey === 'string' ? `${nameOrPluginKey}$` : nameOrPluginKey.key;\n    const state = this.state.reconfigure({\n      // @ts-ignore\n      plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name))\n    });\n    this.view.updateState(state);\n  }\n  /**\n   * Creates an extension manager.\n   */\n  createExtensionManager() {\n    var _a, _b;\n    const coreExtensions = this.options.enableCoreExtensions ? [Editable, ClipboardTextSerializer.configure({\n      blockSeparator: (_b = (_a = this.options.coreExtensionOptions) === null || _a === void 0 ? void 0 : _a.clipboardTextSerializer) === null || _b === void 0 ? void 0 : _b.blockSeparator\n    }), Commands, FocusEvents, Keymap, Tabindex] : [];\n    const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n      return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);\n    });\n    this.extensionManager = new ExtensionManager(allExtensions, this);\n  }\n  /**\n   * Creates an command manager.\n   */\n  createCommandManager() {\n    this.commandManager = new CommandManager({\n      editor: this\n    });\n  }\n  /**\n   * Creates a ProseMirror schema.\n   */\n  createSchema() {\n    this.schema = this.extensionManager.schema;\n  }\n  /**\n   * Creates a ProseMirror view.\n   */\n  createView() {\n    let doc;\n    try {\n      doc = createDocument(this.options.content, this.schema, this.options.parseOptions, {\n        errorOnInvalidContent: this.options.enableContentCheck\n      });\n    } catch (e) {\n      if (!(e instanceof Error) || !['[tiptap error]: Invalid JSON content', '[tiptap error]: Invalid HTML content'].includes(e.message)) {\n        // Not the content error we were expecting\n        throw e;\n      }\n      this.emit('contentError', {\n        editor: this,\n        error: e,\n        disableCollaboration: () => {\n          // To avoid syncing back invalid content, reinitialize the extensions without the collaboration extension\n          this.options.extensions = this.options.extensions.filter(extension => extension.name !== 'collaboration');\n          // Restart the initialization process by recreating the extension manager with the new set of extensions\n          this.createExtensionManager();\n        }\n      });\n      // Content is invalid, but attempt to create it anyway, stripping out the invalid parts\n      doc = createDocument(this.options.content, this.schema, this.options.parseOptions, {\n        errorOnInvalidContent: false\n      });\n    }\n    const selection = resolveFocusPosition(doc, this.options.autofocus);\n    this.view = new EditorView(this.options.element, {\n      ...this.options.editorProps,\n      dispatchTransaction: this.dispatchTransaction.bind(this),\n      state: EditorState.create({\n        doc,\n        selection: selection || undefined\n      })\n    });\n    // `editor.view` is not yet available at this time.\n    // Therefore we will add all plugins and node views directly afterwards.\n    const newState = this.state.reconfigure({\n      plugins: this.extensionManager.plugins\n    });\n    this.view.updateState(newState);\n    this.createNodeViews();\n    this.prependClass();\n    // Let’s store the editor instance in the DOM element.\n    // So we’ll have access to it for tests.\n    // @ts-ignore\n    const dom = this.view.dom;\n    dom.editor = this;\n  }\n  /**\n   * Creates all node views.\n   */\n  createNodeViews() {\n    if (this.view.isDestroyed) {\n      return;\n    }\n    this.view.setProps({\n      nodeViews: this.extensionManager.nodeViews\n    });\n  }\n  /**\n   * Prepend class name to element.\n   */\n  prependClass() {\n    this.view.dom.className = `tiptap ${this.view.dom.className}`;\n  }\n  captureTransaction(fn) {\n    this.isCapturingTransaction = true;\n    fn();\n    this.isCapturingTransaction = false;\n    const tr = this.capturedTransaction;\n    this.capturedTransaction = null;\n    return tr;\n  }\n  /**\n   * The callback over which to send transactions (state updates) produced by the view.\n   *\n   * @param transaction An editor state transaction\n   */\n  dispatchTransaction(transaction) {\n    // if the editor / the view of the editor was destroyed\n    // the transaction should not be dispatched as there is no view anymore.\n    if (this.view.isDestroyed) {\n      return;\n    }\n    if (this.isCapturingTransaction) {\n      if (!this.capturedTransaction) {\n        this.capturedTransaction = transaction;\n        return;\n      }\n      transaction.steps.forEach(step => {\n        var _a;\n        return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step);\n      });\n      return;\n    }\n    const state = this.state.apply(transaction);\n    const selectionHasChanged = !this.state.selection.eq(state.selection);\n    this.emit('beforeTransaction', {\n      editor: this,\n      transaction,\n      nextState: state\n    });\n    this.view.updateState(state);\n    this.emit('transaction', {\n      editor: this,\n      transaction\n    });\n    if (selectionHasChanged) {\n      this.emit('selectionUpdate', {\n        editor: this,\n        transaction\n      });\n    }\n    const focus = transaction.getMeta('focus');\n    const blur = transaction.getMeta('blur');\n    if (focus) {\n      this.emit('focus', {\n        editor: this,\n        event: focus.event,\n        transaction\n      });\n    }\n    if (blur) {\n      this.emit('blur', {\n        editor: this,\n        event: blur.event,\n        transaction\n      });\n    }\n    if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n      return;\n    }\n    this.emit('update', {\n      editor: this,\n      transaction\n    });\n  }\n  /**\n   * Get attributes of the currently selected node or mark.\n   */\n  getAttributes(nameOrType) {\n    return getAttributes(this.state, nameOrType);\n  }\n  isActive(nameOrAttributes, attributesOrUndefined) {\n    const name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null;\n    const attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes;\n    return isActive(this.state, name, attributes);\n  }\n  /**\n   * Get the document as JSON.\n   */\n  getJSON() {\n    return this.state.doc.toJSON();\n  }\n  /**\n   * Get the document as HTML.\n   */\n  getHTML() {\n    return getHTMLFromFragment(this.state.doc.content, this.schema);\n  }\n  /**\n   * Get the document as text.\n   */\n  getText(options) {\n    const {\n      blockSeparator = '\\n\\n',\n      textSerializers = {}\n    } = options || {};\n    return getText(this.state.doc, {\n      blockSeparator,\n      textSerializers: {\n        ...getTextSerializersFromSchema(this.schema),\n        ...textSerializers\n      }\n    });\n  }\n  /**\n   * Check if there is no content.\n   */\n  get isEmpty() {\n    return isNodeEmpty(this.state.doc);\n  }\n  /**\n   * Get the number of characters for the current document.\n   *\n   * @deprecated\n   */\n  getCharacterCount() {\n    console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\n    return this.state.doc.content.size - 2;\n  }\n  /**\n   * Destroy the editor.\n   */\n  destroy() {\n    this.emit('destroy');\n    if (this.view) {\n      this.view.destroy();\n    }\n    this.removeAllListeners();\n  }\n  /**\n   * Check if the editor is already destroyed.\n   */\n  get isDestroyed() {\n    var _a;\n    // @ts-ignore\n    return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\n  }\n  $node(selector, attributes) {\n    var _a;\n    return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelector(selector, attributes)) || null;\n  }\n  $nodes(selector, attributes) {\n    var _a;\n    return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelectorAll(selector, attributes)) || null;\n  }\n  $pos(pos) {\n    const $pos = this.state.doc.resolve(pos);\n    return new NodePos($pos, this);\n  }\n  get $doc() {\n    return this.$pos(0);\n  }\n}\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction markInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      const {\n        tr\n      } = state;\n      const captureGroup = match[match.length - 1];\n      const fullMatch = match[0];\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/);\n        const textStart = range.from + fullMatch.indexOf(captureGroup);\n        const textEnd = textStart + captureGroup.length;\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(item => {\n          // @ts-ignore\n          const excluded = item.mark.type.excluded;\n          return excluded.find(type => type === config.type && type !== item.mark.type);\n        }).filter(item => item.to > textStart);\n        if (excludedMarks.length) {\n          return null;\n        }\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to);\n        }\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart);\n        }\n        const markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction nodeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      const {\n        tr\n      } = state;\n      const start = range.from;\n      let end = range.to;\n      const newNode = config.type.create(attributes);\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1]);\n        let matchStart = start + offset;\n        if (matchStart > end) {\n          matchStart = end;\n        } else {\n          end = matchStart + match[1].length;\n        }\n        // insert last typed character\n        const lastChar = match[0][match[0].length - 1];\n        tr.insertText(lastChar, start + match[0].length - 1);\n        // insert node from input rule\n        tr.replaceWith(matchStart, end, newNode);\n      } else if (match[0]) {\n        const insertionStart = config.type.isInline ? start : start - 1;\n        tr.insert(insertionStart, config.type.create(attributes)).delete(tr.mapping.map(start), tr.mapping.map(end));\n      }\n      tr.scrollIntoView();\n    }\n  });\n}\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction textblockTypeInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      const $start = state.doc.resolve(range.from);\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n        return null;\n      }\n      state.tr.delete(range.from, range.to).setBlockType(range.from, range.from, config.type, attributes);\n    }\n  });\n}\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction textInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      let insert = config.replace;\n      let start = range.from;\n      const end = range.to;\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        const cutOff = start - end;\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction wrappingInputRule(config) {\n  return new InputRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match,\n      chain\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n      const tr = state.tr.delete(range.from, range.to);\n      const $start = tr.doc.resolve(range.from);\n      const blockRange = $start.blockRange();\n      const wrapping = blockRange && findWrapping(blockRange, config.type, attributes);\n      if (!wrapping) {\n        return null;\n      }\n      tr.wrap(blockRange, wrapping);\n      if (config.keepMarks && config.editor) {\n        const {\n          selection,\n          storedMarks\n        } = state;\n        const {\n          splittableMarks\n        } = config.editor.extensionManager;\n        const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();\n        if (marks) {\n          const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n          tr.ensureMarks(filteredMarks);\n        }\n      }\n      if (config.keepAttributes) {\n        /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */\n        const nodeType = config.type.name === 'bulletList' || config.type.name === 'orderedList' ? 'listItem' : 'taskList';\n        chain().updateAttributes(nodeType, attributes).run();\n      }\n      const before = tr.doc.resolve(range.from - 1).nodeBefore;\n      if (before && before.type === config.type && canJoin(tr.doc, range.from - 1) && (!config.joinPredicate || config.joinPredicate(match, before))) {\n        tr.join(range.from - 1);\n      }\n    }\n  });\n}\n\n/**\n * The Mark class is used to create custom mark extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nclass Mark {\n  constructor(config = {}) {\n    this.type = 'mark';\n    this.name = 'mark';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = {\n      ...this.config,\n      ...config\n    };\n    this.name = this.config.name;\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  static create(config = {}) {\n    return new Mark(config);\n  }\n  configure(options = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend({\n      ...this.config,\n      addOptions: () => {\n        return mergeDeep(this.options, options);\n      }\n    });\n    // Always preserve the current name\n    extension.name = this.name;\n    // Set the parent to be our parent\n    extension.parent = this.parent;\n    return extension;\n  }\n  extend(extendedConfig = {}) {\n    const extension = new Mark(extendedConfig);\n    extension.parent = this;\n    this.child = extension;\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n    if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n    }\n    extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n      name: extension.name\n    }));\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n  static handleExit({\n    editor,\n    mark\n  }) {\n    const {\n      tr\n    } = editor.state;\n    const currentPos = editor.state.selection.$from;\n    const isAtEnd = currentPos.pos === currentPos.end();\n    if (isAtEnd) {\n      const currentMarks = currentPos.marks();\n      const isInMark = !!currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n      if (!isInMark) {\n        return false;\n      }\n      const removeMark = currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n      if (removeMark) {\n        tr.removeStoredMark(removeMark);\n      }\n      tr.insertText(' ', currentPos.pos);\n      editor.view.dispatch(tr);\n      return true;\n    }\n    return false;\n  }\n}\n\n/**\n * The Node class is used to create custom node extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nclass Node {\n  constructor(config = {}) {\n    this.type = 'node';\n    this.name = 'node';\n    this.parent = null;\n    this.child = null;\n    this.config = {\n      name: this.name,\n      defaultOptions: {}\n    };\n    this.config = {\n      ...this.config,\n      ...config\n    };\n    this.name = this.config.name;\n    if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n    }\n    // TODO: remove `addOptions` fallback\n    this.options = this.config.defaultOptions;\n    if (this.config.addOptions) {\n      this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n        name: this.name\n      }));\n    }\n    this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n      name: this.name,\n      options: this.options\n    })) || {};\n  }\n  static create(config = {}) {\n    return new Node(config);\n  }\n  configure(options = {}) {\n    // return a new instance so we can use the same extension\n    // with different calls of `configure`\n    const extension = this.extend({\n      ...this.config,\n      addOptions: () => {\n        return mergeDeep(this.options, options);\n      }\n    });\n    // Always preserve the current name\n    extension.name = this.name;\n    // Set the parent to be our parent\n    extension.parent = this.parent;\n    return extension;\n  }\n  extend(extendedConfig = {}) {\n    const extension = new Node(extendedConfig);\n    extension.parent = this;\n    this.child = extension;\n    extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n    if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n      console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n    }\n    extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n      name: extension.name\n    }));\n    extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n      name: extension.name,\n      options: extension.options\n    }));\n    return extension;\n  }\n}\nfunction isAndroid() {\n  return navigator.platform === 'Android' || /android/i.test(navigator.userAgent);\n}\n\n/**\n * Node views are used to customize the rendered DOM structure of a node.\n * @see https://tiptap.dev/guide/node-views\n */\nclass NodeView {\n  constructor(component, props, options) {\n    this.isDragging = false;\n    this.component = component;\n    this.editor = props.editor;\n    this.options = {\n      stopEvent: null,\n      ignoreMutation: null,\n      ...options\n    };\n    this.extension = props.extension;\n    this.node = props.node;\n    this.decorations = props.decorations;\n    this.getPos = props.getPos;\n    this.mount();\n  }\n  mount() {\n    // eslint-disable-next-line\n    return;\n  }\n  get dom() {\n    return this.editor.view.dom;\n  }\n  get contentDOM() {\n    return null;\n  }\n  onDragStart(event) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const {\n      view\n    } = this.editor;\n    const target = event.target;\n    // get the drag handle element\n    // `closest` is not available for text nodes so we may have to use its parent\n    const dragHandle = target.nodeType === 3 ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]') : target.closest('[data-drag-handle]');\n    if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\n      return;\n    }\n    let x = 0;\n    let y = 0;\n    // calculate offset for drag element if we use a different drag handle element\n    if (this.dom !== dragHandle) {\n      const domBox = this.dom.getBoundingClientRect();\n      const handleBox = dragHandle.getBoundingClientRect();\n      // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n      const offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;\n      const offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;\n      x = handleBox.x - domBox.x + offsetX;\n      y = handleBox.y - domBox.y + offsetY;\n    }\n    (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);\n    // we need to tell ProseMirror that we want to move the whole node\n    // so we create a NodeSelection\n    const selection = NodeSelection.create(view.state.doc, this.getPos());\n    const transaction = view.state.tr.setSelection(selection);\n    view.dispatch(transaction);\n  }\n  stopEvent(event) {\n    var _a;\n    if (!this.dom) {\n      return false;\n    }\n    if (typeof this.options.stopEvent === 'function') {\n      return this.options.stopEvent({\n        event\n      });\n    }\n    const target = event.target;\n    const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));\n    // any event from child nodes should be handled by ProseMirror\n    if (!isInElement) {\n      return false;\n    }\n    const isDragEvent = event.type.startsWith('drag');\n    const isDropEvent = event.type === 'drop';\n    const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable;\n    // any input event within node views should be ignored by ProseMirror\n    if (isInput && !isDropEvent && !isDragEvent) {\n      return true;\n    }\n    const {\n      isEditable\n    } = this.editor;\n    const {\n      isDragging\n    } = this;\n    const isDraggable = !!this.node.type.spec.draggable;\n    const isSelectable = NodeSelection.isSelectable(this.node);\n    const isCopyEvent = event.type === 'copy';\n    const isPasteEvent = event.type === 'paste';\n    const isCutEvent = event.type === 'cut';\n    const isClickEvent = event.type === 'mousedown';\n    // ProseMirror tries to drag selectable nodes\n    // even if `draggable` is set to `false`\n    // this fix prevents that\n    if (!isDraggable && isSelectable && isDragEvent) {\n      event.preventDefault();\n    }\n    if (isDraggable && isDragEvent && !isDragging) {\n      event.preventDefault();\n      return false;\n    }\n    // we have to store that dragging started\n    if (isDraggable && isEditable && !isDragging && isClickEvent) {\n      const dragHandle = target.closest('[data-drag-handle]');\n      const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\n      if (isValidDragHandle) {\n        this.isDragging = true;\n        document.addEventListener('dragend', () => {\n          this.isDragging = false;\n        }, {\n          once: true\n        });\n        document.addEventListener('drop', () => {\n          this.isDragging = false;\n        }, {\n          once: true\n        });\n        document.addEventListener('mouseup', () => {\n          this.isDragging = false;\n        }, {\n          once: true\n        });\n      }\n    }\n    // these events are handled by prosemirror\n    if (isDragging || isDropEvent || isCopyEvent || isPasteEvent || isCutEvent || isClickEvent && isSelectable) {\n      return false;\n    }\n    return true;\n  }\n  ignoreMutation(mutation) {\n    if (!this.dom || !this.contentDOM) {\n      return true;\n    }\n    if (typeof this.options.ignoreMutation === 'function') {\n      return this.options.ignoreMutation({\n        mutation\n      });\n    }\n    // a leaf/atom node is like a black box for ProseMirror\n    // and should be fully handled by the node view\n    if (this.node.isLeaf || this.node.isAtom) {\n      return true;\n    }\n    // ProseMirror should handle any selections\n    if (mutation.type === 'selection') {\n      return false;\n    }\n    // try to prevent a bug on iOS and Android that will break node views on enter\n    // this is because ProseMirror can’t preventDispatch on enter\n    // this will lead to a re-render of the node view on enter\n    // see: https://github.com/ueberdosis/tiptap/issues/1214\n    // see: https://github.com/ueberdosis/tiptap/issues/2534\n    if (this.dom.contains(mutation.target) && mutation.type === 'childList' && (isiOS() || isAndroid()) && this.editor.isFocused) {\n      const changedNodes = [...Array.from(mutation.addedNodes), ...Array.from(mutation.removedNodes)];\n      // we’ll check if every changed node is contentEditable\n      // to make sure it’s probably mutated by ProseMirror\n      if (changedNodes.every(node => node.isContentEditable)) {\n        return false;\n      }\n    }\n    // we will allow mutation contentDOM with attributes\n    // so we can for example adding classes within our node view\n    if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n      return true;\n    }\n    // ProseMirror should handle any changes within contentDOM\n    if (this.contentDOM.contains(mutation.target)) {\n      return false;\n    }\n    return true;\n  }\n  updateAttributes(attributes) {\n    this.editor.commands.command(({\n      tr\n    }) => {\n      const pos = this.getPos();\n      tr.setNodeMarkup(pos, undefined, {\n        ...this.node.attrs,\n        ...attributes\n      });\n      return true;\n    });\n  }\n  deleteNode() {\n    const from = this.getPos();\n    const to = from + this.node.nodeSize;\n    this.editor.commands.deleteRange({\n      from,\n      to\n    });\n  }\n}\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nfunction markPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match,\n      pasteEvent\n    }) => {\n      const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      const {\n        tr\n      } = state;\n      const captureGroup = match[match.length - 1];\n      const fullMatch = match[0];\n      let markEnd = range.to;\n      if (captureGroup) {\n        const startSpaces = fullMatch.search(/\\S/);\n        const textStart = range.from + fullMatch.indexOf(captureGroup);\n        const textEnd = textStart + captureGroup.length;\n        const excludedMarks = getMarksBetween(range.from, range.to, state.doc).filter(item => {\n          // @ts-ignore\n          const excluded = item.mark.type.excluded;\n          return excluded.find(type => type === config.type && type !== item.mark.type);\n        }).filter(item => item.to > textStart);\n        if (excludedMarks.length) {\n          return null;\n        }\n        if (textEnd < range.to) {\n          tr.delete(textEnd, range.to);\n        }\n        if (textStart > range.from) {\n          tr.delete(range.from + startSpaces, textStart);\n        }\n        markEnd = range.from + startSpaces + captureGroup.length;\n        tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n        tr.removeStoredMark(config.type);\n      }\n    }\n  });\n}\n\n// source: https://stackoverflow.com/a/6969486\nfunction escapeForRegEx(string) {\n  return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\n/**\n * Build an paste rule that adds a node when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nfunction nodePasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler({\n      match,\n      chain,\n      range,\n      pasteEvent\n    }) {\n      const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n      const content = callOrReturn(config.getContent, undefined, attributes);\n      if (attributes === false || attributes === null) {\n        return null;\n      }\n      const node = {\n        type: config.type.name,\n        attrs: attributes\n      };\n      if (content) {\n        node.content = content;\n      }\n      if (match.input) {\n        chain().deleteRange(range).insertContentAt(range.from, node);\n      }\n    }\n  });\n}\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nfunction textPasteRule(config) {\n  return new PasteRule({\n    find: config.find,\n    handler: ({\n      state,\n      range,\n      match\n    }) => {\n      let insert = config.replace;\n      let start = range.from;\n      const end = range.to;\n      if (match[1]) {\n        const offset = match[0].lastIndexOf(match[1]);\n        insert += match[0].slice(offset + match[1].length);\n        start += offset;\n        const cutOff = start - end;\n        if (cutOff > 0) {\n          insert = match[0].slice(offset - cutOff, offset) + insert;\n          start = end;\n        }\n      }\n      state.tr.insertText(insert, start, end);\n    }\n  });\n}\nclass Tracker {\n  constructor(transaction) {\n    this.transaction = transaction;\n    this.currentStep = this.transaction.steps.length;\n  }\n  map(position) {\n    let deleted = false;\n    const mappedPosition = this.transaction.steps.slice(this.currentStep).reduce((newPosition, step) => {\n      const mapResult = step.getMap().mapResult(newPosition);\n      if (mapResult.deleted) {\n        deleted = true;\n      }\n      return mapResult.pos;\n    }, position);\n    return {\n      position: mappedPosition,\n      deleted\n    };\n  }\n}\nexport { CommandManager, Editor, Extension, InputRule, Mark, Node, NodePos, NodeView, PasteRule, Tracker, callOrReturn, combineTransactionSteps, createChainableState, createDocument, createNodeFromContent, createStyleTag, defaultBlockAt, deleteProps, elementFromString, escapeForRegEx, index as extensions, findChildren, findChildrenInRange, findDuplicates, findParentNode, findParentNodeClosestToPos, fromString, generateHTML, generateJSON, generateText, getAttributes, getAttributesFromExtensions, getChangedRanges, getDebugJSON, getExtensionField, getHTMLFromFragment, getMarkAttributes, getMarkRange, getMarkType, getMarksBetween, getNodeAtPosition, getNodeAttributes, getNodeType, getRenderedAttributes, getSchema, getSchemaByResolvedExtensions, getSchemaTypeByName, getSchemaTypeNameByName, getSplittedAttributes, getText, getTextBetween, getTextContentFromNodes, getTextSerializersFromSchema, injectExtensionAttributesToParseRule, inputRulesPlugin, isActive, isAtEndOfNode, isAtStartOfNode, isEmptyObject, isExtensionRulesEnabled, isFunction, isList, isMacOS, isMarkActive, isNodeActive, isNodeEmpty, isNodeSelection, isNumber, isPlainObject, isRegExp, isString, isTextSelection, isiOS, markInputRule, markPasteRule, mergeAttributes, mergeDeep, minMax, nodeInputRule, nodePasteRule, objectIncludes, pasteRulesPlugin, posToDOMRect, removeDuplicates, resolveFocusPosition, selectionToInsertionEnd, splitExtensions, textInputRule, textPasteRule, textblockTypeInputRule, wrappingInputRule };","map":{"version":3,"names":["Plugin","PluginKey","TextSelection","Selection","NodeSelection","EditorState","EditorView","keymap","Schema","Fragment","DOMParser","DOMSerializer","Node","Node$1","Slice","liftTarget","ReplaceStep","ReplaceAroundStep","joinPoint","Transform","canSplit","canJoin","findWrapping","createParagraphNear","createParagraphNear$1","deleteSelection","deleteSelection$1","exitCode","exitCode$1","joinUp","joinUp$1","joinDown","joinDown$1","joinBackward","joinBackward$1","joinForward","joinForward$1","joinTextblockBackward","joinTextblockBackward$1","joinTextblockForward","joinTextblockForward$1","lift","lift$1","liftEmptyBlock","liftEmptyBlock$1","newlineInCode","newlineInCode$1","selectNodeBackward","selectNodeBackward$1","selectNodeForward","selectNodeForward$1","selectParentNode","selectParentNode$1","selectTextblockEnd","selectTextblockEnd$1","selectTextblockStart","selectTextblockStart$1","setBlockType","wrapIn","wrapIn$1","liftListItem","liftListItem$1","sinkListItem","sinkListItem$1","wrapInList","wrapInList$1","createChainableState","config","state","transaction","selection","doc","storedMarks","apply","bind","applyTransaction","plugins","schema","reconfigure","toJSON","tr","CommandManager","constructor","props","editor","rawCommands","extensionManager","commands","customState","hasCustomState","view","buildProps","Object","fromEntries","entries","map","name","command","method","args","callback","getMeta","dispatch","chain","createChain","can","createCan","startTr","shouldDispatch","callbacks","hasStartTransaction","run","every","chainedCommand","push","formattedCommands","undefined","EventEmitter","on","event","fn","emit","forEach","off","filter","removeAllListeners","getExtensionField","extension","field","context","parent","value","splitExtensions","extensions","baseExtensions","type","nodeExtensions","markExtensions","getAttributesFromExtensions","extensionAttributes","nodeAndMarkExtensions","defaultAttribute","default","rendered","renderHTML","parseHTML","keepOnSplit","isRequired","options","storage","addGlobalAttributes","globalAttributes","globalAttribute","types","attributes","attribute","addAttributes","mergedAttr","getNodeType","nameOrType","nodes","Error","mergeAttributes","objects","item","reduce","items","mergedAttributes","key","exists","valueClasses","split","existingClasses","insertClasses","valueClass","includes","join","getRenderedAttributes","nodeOrMark","attrs","isFunction","callOrReturn","isEmptyObject","keys","length","fromString","match","Number","injectExtensionAttributesToParseRule","parseRule","getAttrs","node","oldAttributes","newAttributes","getAttribute","cleanUpSchemaItem","data","getSchemaByResolvedExtensions","_a","allAttributes","topNode","find","extraNodeFields","fields","e","extendNodeSchema","content","marks","group","inline","atom","selectable","draggable","code","whitespace","defining","isolating","extensionAttribute","parseDOM","toDOM","HTMLAttributes","renderText","toText","extraMarkFields","extendMarkSchema","inclusive","excludes","spanning","mark","getSchemaTypeByName","isExtensionRulesEnabled","enabled","Array","isArray","some","enabledExtension","getTextContentFromNodes","$from","maxMatch","textBefore","sliceEndPos","parentOffset","nodesBetween","Math","max","pos","index","_b","chunk","spec","call","textContent","isAtom","isText","slice","isRegExp","prototype","toString","InputRule","handler","inputRuleMatcherHandler","text","exec","inputRuleMatch","result","input","replaceWith","console","warn","run$1","from","to","rules","plugin","composing","resolve","nodeBefore","nodeAfter","matched","rule","range","steps","setMeta","transform","inputRulesPlugin","init","prev","stored","simulatedInputMeta","isSimulatedInput","setTimeout","selectionSet","docChanged","handleTextInput","handleDOMEvents","compositionend","$cursor","handleKeyDown","isInputRules","isNumber","PasteRule","pasteRuleMatcherHandler","matchAll","matches","pasteRuleMatch","pasteEvent","dropEvent","handlers","isTextblock","resolvedFrom","resolvedTo","min","size","textToMatch","textBetween","start","end","mapping","success","createClipboardPasteEvent","ClipboardEvent","clipboardData","DataTransfer","setData","pasteRulesPlugin","dragSourceElement","isPastedFromProseMirror","isDroppedFromProseMirror","DragEvent","processEvent","pasteEvt","chainableState","b","handleDragstart","dom","parentElement","contains","target","window","addEventListener","destroy","removeEventListener","drop","paste","_view","html","getData","appendTransaction","transactions","oldState","isPaste","isDrop","simulatedPasteMeta","isSimulatedPaste","findDiffStart","findDiffEnd","findDuplicates","filtered","el","indexOf","Set","ExtensionManager","splittableMarks","setupExtensions","resolvedExtensions","sort","flatten","duplicatedNames","addExtensions","flat","defaultPriority","a","priorityA","priorityB","addCommands","reverse","inputRules","pasteRules","allPlugins","addKeyboardShortcuts","defaultBindings","ArrowRight","Mark","handleExit","bindings","shortcut","keyMapPlugin","addInputRules","enableInputRules","addPasteRules","enablePasteRules","addProseMirrorPlugins","proseMirrorPlugins","nodeViews","addNodeView","nodeview","getPos","decorations","extensionStorage","onBeforeCreate","onCreate","onUpdate","onSelectionUpdate","onTransaction","onFocus","onBlur","onDestroy","getType","isPlainObject","getPrototypeOf","mergeDeep","source","output","Extension","child","defaultOptions","addOptions","create","configure","extend","extendedConfig","getTextBetween","startNode","blockSeparator","textSerializers","isBlock","textSerializer","getTextSerializersFromSchema","ClipboardTextSerializer","clipboardTextSerializer","ranges","$to","blur","requestAnimationFrame","isDestroyed","getSelection","removeAllRanges","clearContent","emitUpdate","setContent","clearNodes","$mappedFrom","$mappedTo","nodeSize","nodeRange","blockRange","targetLiftDepth","defaultType","contentMatchAt","setNodeMarkup","cut","originRange","targetPos","contentSlice","deleteRange","newPos","insert","setSelection","deleteCurrentNode","currentNode","$anchor","$pos","depth","before","after","delete","scrollIntoView","deleteNode","typeOrName","enter","keyboardShortcut","objectIncludes","object1","object2","strict","test","findMarkInSet","isMarkInSet","getMarkRange","childAfter","offset","childBefore","startIndex","startPos","endIndex","endPos","isInSet","childCount","getMarkType","extendMarkRange","newSelection","first","i","isTextSelection","minMax","resolveFocusPosition","position","selectionAtStart","atStart","selectionAtEnd","atEnd","minPos","maxPos","isiOS","navigator","platform","userAgent","document","focus","delayedFocus","hasFocus","isSameSelection","eq","setStoredMarks","insertContent","insertContentAt","removeWhitespaces","children","childNodes","nodeType","nodeValue","removeChild","elementFromString","wrappedValue","parseFromString","body","createNodeFromContent","parseOptions","isJSONContent","isTextContent","isArrayContent","fromArray","nodeFromJSON","error","errorOnInvalidContent","cause","hasInvalidContent","invalidContent","contentCheckSchema","append","__tiptap__private__unknown__catch__all__node","tag","outerHTML","fromSchema","parseSlice","parse","parser","selectionToInsertionEnd","startLen","bias","last","step","maps","_from","_to","_newFrom","newTo","near","isFragment","nodeOrFragment","updateSelection","applyInputRules","applyPasteRules","preserveWhitespace","enableContentCheck","disableCollaboration","isOnlyTextContent","isOnlyBlockContent","check","isEmptyTextBlock","newContent","v","insertText","joinItemBackward","point","joinItemForward","isMacOS","normalizeKeyName","parts","alt","ctrl","shift","meta","mod","KeyboardEvent","altKey","ctrlKey","metaKey","shiftKey","bubbles","cancelable","capturedTransaction","captureTransaction","someProp","f","newStep","maybeStep","isNodeActive","empty","nodeRanges","relativeFrom","relativeTo","selectionRange","matchedNodeRanges","sum","isActive","getSchemaTypeNameByName","deleteProps","obj","propOrProps","newObj","prop","resetAttributes","markType","schemaType","addMark","selectAll","setTextSelection","createDocument","getMarkAttributes","$head","markItem","combineTransactionSteps","oldDoc","defaultBlockAt","edgeCount","edge","hasRequiredAttrs","findChildren","predicate","nodesWithPos","descendants","findChildrenInRange","findParentNodeClosestToPos","findParentNode","getHTMLFromFragment","fragment","documentFragment","serializeFragment","temporaryDocument","implementation","createHTMLDocument","container","createElement","appendChild","innerHTML","getSchema","generateHTML","contentNode","fromJSON","generateJSON","getText","generateText","getNodeAttributes","nodeItem","getAttributes","removeDuplicates","array","by","JSON","stringify","seen","hasOwnProperty","simplifyChangedRanges","changes","uniqueChanges","change","rest","_","otherChange","oldRange","newRange","getChangedRanges","stepMap","newStart","newEnd","oldStart","invert","oldEnd","getDebugJSON","startOffset","isTopNode","topNodeType","increment","getMarksBetween","getNodeAtPosition","maxDepth","currentDepth","getSplittedAttributes","typeName","isMarkActive","markRanges","matchedRange","markRange","excludedRange","isAtEndOfNode","parentNode","$parentPos","isAtStartOfNode","isList","isNodeEmpty","checkChildren","ignoreWhitespace","isLeaf","isContentEmpty","childNode","isNodeSelection","posToDOMRect","resolvedEnd","coordsAtPos","top","bottom","left","right","width","height","x","y","canSetMark","newMarkType","cursor","currentMarks","someNodeSupportsMark","inlineContent","allowsMarkType","_pos","isInline","parentAllowsMarkType","currentMarksAllowMarkType","otherMark","setMark","addStoredMark","trimmedFrom","trimmedTo","someHasMark","setNode","canSetBlock","updatedState","setNodeSelection","ensureMarks","filteredMarks","splitBlock","keepMarks","deflt","indexAfter","$first","canReplaceWith","splitListItem","overrideAttrs","sameParent","grandParent","wrap","depthBefore","d","copy","depthAfter","newNextTypeAttributes","nextType","contentMatch","createAndFill","replace","sel","n","newTypeAttributes","joinListBackwards","listType","list","nodeAt","canJoinBackwards","joinListForwards","canJoinForwards","toggleList","listTypeOrName","itemTypeOrName","itemType","parentList","validContent","canWrapInList","toggleMark","extendEmptyMarkRange","unsetMark","toggleNode","toggleTypeOrName","toggleType","toggleWrap","undoInputRule","undoable","getState","toUndo","j","docs","unsetAllMarks","removeMark","removeStoredMark","updateAttributes","freeze","__proto__","Commands","Editable","editable","FocusEvents","isFocused","Keymap","handleBackspace","parentIsIsolating","parentPos","isAtStart","handleDelete","handleEnter","baseKeymap","Enter","Mod-Enter","Backspace","Delete","Mod-a","pcKeymap","macKeymap","Ctrl-a","Ctrl-e","newState","docChanges","allFrom","allEnd","allWasSelected","isEmpty","Tabindex","isEditable","tabindex","NodePos","actualDepth","resolvedPos","element","domAtPos","childNodePos","firstChild","lastChild","closest","selector","nodeAttributes","attrKeys","querySelector","querySelectorAll","firstItemOnly","childPos","doesAllAttributesMatch","concat","setAttribute","oldSelection","style","createStyleTag","nonce","suffix","tiptapStyleTag","styleNode","getElementsByTagName","Editor","isInitialized","injectCSS","injectNonce","autofocus","editorProps","coreExtensionOptions","enableCoreExtensions","onContentError","isCapturingTransaction","setOptions","createExtensionManager","createCommandManager","createSchema","createView","commandManager","css","setProps","updateState","setEditable","registerPlugin","handlePlugins","unregisterPlugin","nameOrPluginKey","startsWith","coreExtensions","allExtensions","message","dispatchTransaction","createNodeViews","prependClass","className","selectionHasChanged","nextState","nameOrAttributes","attributesOrUndefined","getJSON","getHTML","getCharacterCount","docView","$node","$doc","$nodes","markInputRule","captureGroup","fullMatch","startSpaces","search","textStart","textEnd","excludedMarks","excluded","markEnd","nodeInputRule","newNode","lastIndexOf","matchStart","lastChar","insertionStart","textblockTypeInputRule","$start","textInputRule","cutOff","wrappingInputRule","wrapping","keepAttributes","joinPredicate","currentPos","isAtEnd","isInMark","m","isAndroid","NodeView","component","isDragging","stopEvent","ignoreMutation","mount","contentDOM","onDragStart","_c","_d","_e","_f","_g","dragHandle","domBox","getBoundingClientRect","handleBox","offsetX","nativeEvent","offsetY","dataTransfer","setDragImage","isInElement","isDragEvent","isDropEvent","isInput","tagName","isContentEditable","isDraggable","isSelectable","isCopyEvent","isPasteEvent","isCutEvent","isClickEvent","preventDefault","isValidDragHandle","once","mutation","changedNodes","addedNodes","removedNodes","markPasteRule","escapeForRegEx","string","isString","nodePasteRule","getContent","textPasteRule","Tracker","currentStep","deleted","mappedPosition","newPosition","mapResult","getMap"],"sources":["/var/www/front/node_modules/@tiptap/core/dist/index.js"],"sourcesContent":["import { Plugin, PluginKey, TextSelection, Selection, NodeSelection, EditorState } from '@tiptap/pm/state';\nimport { EditorView } from '@tiptap/pm/view';\nimport { keymap } from '@tiptap/pm/keymap';\nimport { Schema, Fragment, DOMParser, DOMSerializer, Node as Node$1, Slice } from '@tiptap/pm/model';\nimport { liftTarget, ReplaceStep, ReplaceAroundStep, joinPoint, Transform, canSplit, canJoin, findWrapping } from '@tiptap/pm/transform';\nimport { createParagraphNear as createParagraphNear$1, deleteSelection as deleteSelection$1, exitCode as exitCode$1, joinUp as joinUp$1, joinDown as joinDown$1, joinBackward as joinBackward$1, joinForward as joinForward$1, joinTextblockBackward as joinTextblockBackward$1, joinTextblockForward as joinTextblockForward$1, lift as lift$1, liftEmptyBlock as liftEmptyBlock$1, newlineInCode as newlineInCode$1, selectNodeBackward as selectNodeBackward$1, selectNodeForward as selectNodeForward$1, selectParentNode as selectParentNode$1, selectTextblockEnd as selectTextblockEnd$1, selectTextblockStart as selectTextblockStart$1, setBlockType, wrapIn as wrapIn$1 } from '@tiptap/pm/commands';\nimport { liftListItem as liftListItem$1, sinkListItem as sinkListItem$1, wrapInList as wrapInList$1 } from '@tiptap/pm/schema-list';\n\n/**\n * Takes a Transaction & Editor State and turns it into a chainable state object\n * @param config The transaction and state to create the chainable state from\n * @returns A chainable Editor state object\n */\nfunction createChainableState(config) {\n    const { state, transaction } = config;\n    let { selection } = transaction;\n    let { doc } = transaction;\n    let { storedMarks } = transaction;\n    return {\n        ...state,\n        apply: state.apply.bind(state),\n        applyTransaction: state.applyTransaction.bind(state),\n        plugins: state.plugins,\n        schema: state.schema,\n        reconfigure: state.reconfigure.bind(state),\n        toJSON: state.toJSON.bind(state),\n        get storedMarks() {\n            return storedMarks;\n        },\n        get selection() {\n            return selection;\n        },\n        get doc() {\n            return doc;\n        },\n        get tr() {\n            selection = transaction.selection;\n            doc = transaction.doc;\n            storedMarks = transaction.storedMarks;\n            return transaction;\n        },\n    };\n}\n\nclass CommandManager {\n    constructor(props) {\n        this.editor = props.editor;\n        this.rawCommands = this.editor.extensionManager.commands;\n        this.customState = props.state;\n    }\n    get hasCustomState() {\n        return !!this.customState;\n    }\n    get state() {\n        return this.customState || this.editor.state;\n    }\n    get commands() {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const { tr } = state;\n        const props = this.buildProps(tr);\n        return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n            const method = (...args) => {\n                const callback = command(...args)(props);\n                if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {\n                    view.dispatch(tr);\n                }\n                return callback;\n            };\n            return [name, method];\n        }));\n    }\n    get chain() {\n        return () => this.createChain();\n    }\n    get can() {\n        return () => this.createCan();\n    }\n    createChain(startTr, shouldDispatch = true) {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const callbacks = [];\n        const hasStartTransaction = !!startTr;\n        const tr = startTr || state.tr;\n        const run = () => {\n            if (!hasStartTransaction\n                && shouldDispatch\n                && !tr.getMeta('preventDispatch')\n                && !this.hasCustomState) {\n                view.dispatch(tr);\n            }\n            return callbacks.every(callback => callback === true);\n        };\n        const chain = {\n            ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n                const chainedCommand = (...args) => {\n                    const props = this.buildProps(tr, shouldDispatch);\n                    const callback = command(...args)(props);\n                    callbacks.push(callback);\n                    return chain;\n                };\n                return [name, chainedCommand];\n            })),\n            run,\n        };\n        return chain;\n    }\n    createCan(startTr) {\n        const { rawCommands, state } = this;\n        const dispatch = false;\n        const tr = startTr || state.tr;\n        const props = this.buildProps(tr, dispatch);\n        const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n            return [name, (...args) => command(...args)({ ...props, dispatch: undefined })];\n        }));\n        return {\n            ...formattedCommands,\n            chain: () => this.createChain(tr, dispatch),\n        };\n    }\n    buildProps(tr, shouldDispatch = true) {\n        const { rawCommands, editor, state } = this;\n        const { view } = editor;\n        const props = {\n            tr,\n            editor,\n            view,\n            state: createChainableState({\n                state,\n                transaction: tr,\n            }),\n            dispatch: shouldDispatch ? () => undefined : undefined,\n            chain: () => this.createChain(tr, shouldDispatch),\n            can: () => this.createCan(tr),\n            get commands() {\n                return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {\n                    return [name, (...args) => command(...args)(props)];\n                }));\n            },\n        };\n        return props;\n    }\n}\n\nclass EventEmitter {\n    constructor() {\n        this.callbacks = {};\n    }\n    on(event, fn) {\n        if (!this.callbacks[event]) {\n            this.callbacks[event] = [];\n        }\n        this.callbacks[event].push(fn);\n        return this;\n    }\n    emit(event, ...args) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            callbacks.forEach(callback => callback.apply(this, args));\n        }\n        return this;\n    }\n    off(event, fn) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            if (fn) {\n                this.callbacks[event] = callbacks.filter(callback => callback !== fn);\n            }\n            else {\n                delete this.callbacks[event];\n            }\n        }\n        return this;\n    }\n    removeAllListeners() {\n        this.callbacks = {};\n    }\n}\n\n/**\n * Returns a field from an extension\n * @param extension The Tiptap extension\n * @param field The field, for example `renderHTML` or `priority`\n * @param context The context object that should be passed as `this` into the function\n * @returns The field value\n */\nfunction getExtensionField(extension, field, context) {\n    if (extension.config[field] === undefined && extension.parent) {\n        return getExtensionField(extension.parent, field, context);\n    }\n    if (typeof extension.config[field] === 'function') {\n        const value = extension.config[field].bind({\n            ...context,\n            parent: extension.parent\n                ? getExtensionField(extension.parent, field, context)\n                : null,\n        });\n        return value;\n    }\n    return extension.config[field];\n}\n\nfunction splitExtensions(extensions) {\n    const baseExtensions = extensions.filter(extension => extension.type === 'extension');\n    const nodeExtensions = extensions.filter(extension => extension.type === 'node');\n    const markExtensions = extensions.filter(extension => extension.type === 'mark');\n    return {\n        baseExtensions,\n        nodeExtensions,\n        markExtensions,\n    };\n}\n\n/**\n * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.\n * @param extensions List of extensions\n */\nfunction getAttributesFromExtensions(extensions) {\n    const extensionAttributes = [];\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\n    const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];\n    const defaultAttribute = {\n        default: null,\n        rendered: true,\n        renderHTML: null,\n        parseHTML: null,\n        keepOnSplit: true,\n        isRequired: false,\n    };\n    extensions.forEach(extension => {\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            extensions: nodeAndMarkExtensions,\n        };\n        const addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);\n        if (!addGlobalAttributes) {\n            return;\n        }\n        const globalAttributes = addGlobalAttributes();\n        globalAttributes.forEach(globalAttribute => {\n            globalAttribute.types.forEach(type => {\n                Object\n                    .entries(globalAttribute.attributes)\n                    .forEach(([name, attribute]) => {\n                    extensionAttributes.push({\n                        type,\n                        name,\n                        attribute: {\n                            ...defaultAttribute,\n                            ...attribute,\n                        },\n                    });\n                });\n            });\n        });\n    });\n    nodeAndMarkExtensions.forEach(extension => {\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n        };\n        const addAttributes = getExtensionField(extension, 'addAttributes', context);\n        if (!addAttributes) {\n            return;\n        }\n        // TODO: remove `as Attributes`\n        const attributes = addAttributes();\n        Object\n            .entries(attributes)\n            .forEach(([name, attribute]) => {\n            const mergedAttr = {\n                ...defaultAttribute,\n                ...attribute,\n            };\n            if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === 'function') {\n                mergedAttr.default = mergedAttr.default();\n            }\n            if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === undefined) {\n                delete mergedAttr.default;\n            }\n            extensionAttributes.push({\n                type: extension.name,\n                name,\n                attribute: mergedAttr,\n            });\n        });\n    });\n    return extensionAttributes;\n}\n\nfunction getNodeType(nameOrType, schema) {\n    if (typeof nameOrType === 'string') {\n        if (!schema.nodes[nameOrType]) {\n            throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n        }\n        return schema.nodes[nameOrType];\n    }\n    return nameOrType;\n}\n\nfunction mergeAttributes(...objects) {\n    return objects\n        .filter(item => !!item)\n        .reduce((items, item) => {\n        const mergedAttributes = { ...items };\n        Object.entries(item).forEach(([key, value]) => {\n            const exists = mergedAttributes[key];\n            if (!exists) {\n                mergedAttributes[key] = value;\n                return;\n            }\n            if (key === 'class') {\n                const valueClasses = value ? value.split(' ') : [];\n                const existingClasses = mergedAttributes[key] ? mergedAttributes[key].split(' ') : [];\n                const insertClasses = valueClasses.filter(valueClass => !existingClasses.includes(valueClass));\n                mergedAttributes[key] = [...existingClasses, ...insertClasses].join(' ');\n            }\n            else if (key === 'style') {\n                mergedAttributes[key] = [mergedAttributes[key], value].join('; ');\n            }\n            else {\n                mergedAttributes[key] = value;\n            }\n        });\n        return mergedAttributes;\n    }, {});\n}\n\nfunction getRenderedAttributes(nodeOrMark, extensionAttributes) {\n    return extensionAttributes\n        .filter(item => item.attribute.rendered)\n        .map(item => {\n        if (!item.attribute.renderHTML) {\n            return {\n                [item.name]: nodeOrMark.attrs[item.name],\n            };\n        }\n        return item.attribute.renderHTML(nodeOrMark.attrs) || {};\n    })\n        .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});\n}\n\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n\n/**\n * Optionally calls `value` as a function.\n * Otherwise it is returned directly.\n * @param value Function or any value.\n * @param context Optional context to bind to function.\n * @param props Optional props to pass to function.\n */\nfunction callOrReturn(value, context = undefined, ...props) {\n    if (isFunction(value)) {\n        if (context) {\n            return value.bind(context)(...props);\n        }\n        return value(...props);\n    }\n    return value;\n}\n\nfunction isEmptyObject(value = {}) {\n    return Object.keys(value).length === 0 && value.constructor === Object;\n}\n\nfunction fromString(value) {\n    if (typeof value !== 'string') {\n        return value;\n    }\n    if (value.match(/^[+-]?(?:\\d*\\.)?\\d+$/)) {\n        return Number(value);\n    }\n    if (value === 'true') {\n        return true;\n    }\n    if (value === 'false') {\n        return false;\n    }\n    return value;\n}\n\n/**\n * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).\n * Cancels when `getAttrs` returned `false`.\n * @param parseRule ProseMirror ParseRule\n * @param extensionAttributes List of attributes to inject\n */\nfunction injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {\n    if ('style' in parseRule) {\n        return parseRule;\n    }\n    return {\n        ...parseRule,\n        getAttrs: (node) => {\n            const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;\n            if (oldAttributes === false) {\n                return false;\n            }\n            const newAttributes = extensionAttributes.reduce((items, item) => {\n                const value = item.attribute.parseHTML\n                    ? item.attribute.parseHTML(node)\n                    : fromString((node).getAttribute(item.name));\n                if (value === null || value === undefined) {\n                    return items;\n                }\n                return {\n                    ...items,\n                    [item.name]: value,\n                };\n            }, {});\n            return { ...oldAttributes, ...newAttributes };\n        },\n    };\n}\n\nfunction cleanUpSchemaItem(data) {\n    return Object.fromEntries(\n    // @ts-ignore\n    Object.entries(data).filter(([key, value]) => {\n        if (key === 'attrs' && isEmptyObject(value)) {\n            return false;\n        }\n        return value !== null && value !== undefined;\n    }));\n}\n/**\n * Creates a new Prosemirror schema based on the given extensions.\n * @param extensions An array of Tiptap extensions\n * @param editor The editor instance\n * @returns A Prosemirror schema\n */\nfunction getSchemaByResolvedExtensions(extensions, editor) {\n    var _a;\n    const allAttributes = getAttributesFromExtensions(extensions);\n    const { nodeExtensions, markExtensions } = splitExtensions(extensions);\n    const topNode = (_a = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))) === null || _a === void 0 ? void 0 : _a.name;\n    const nodes = Object.fromEntries(nodeExtensions.map(extension => {\n        const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor,\n        };\n        const extraNodeFields = extensions.reduce((fields, e) => {\n            const extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);\n            return {\n                ...fields,\n                ...(extendNodeSchema ? extendNodeSchema(extension) : {}),\n            };\n        }, {});\n        const schema = cleanUpSchemaItem({\n            ...extraNodeFields,\n            content: callOrReturn(getExtensionField(extension, 'content', context)),\n            marks: callOrReturn(getExtensionField(extension, 'marks', context)),\n            group: callOrReturn(getExtensionField(extension, 'group', context)),\n            inline: callOrReturn(getExtensionField(extension, 'inline', context)),\n            atom: callOrReturn(getExtensionField(extension, 'atom', context)),\n            selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),\n            draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),\n            code: callOrReturn(getExtensionField(extension, 'code', context)),\n            whitespace: callOrReturn(getExtensionField(extension, 'whitespace', context)),\n            defining: callOrReturn(getExtensionField(extension, 'defining', context)),\n            isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),\n            attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n                var _a;\n                return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];\n            })),\n        });\n        const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n        if (parseHTML) {\n            schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n        }\n        const renderHTML = getExtensionField(extension, 'renderHTML', context);\n        if (renderHTML) {\n            schema.toDOM = node => renderHTML({\n                node,\n                HTMLAttributes: getRenderedAttributes(node, extensionAttributes),\n            });\n        }\n        const renderText = getExtensionField(extension, 'renderText', context);\n        if (renderText) {\n            schema.toText = renderText;\n        }\n        return [extension.name, schema];\n    }));\n    const marks = Object.fromEntries(markExtensions.map(extension => {\n        const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);\n        const context = {\n            name: extension.name,\n            options: extension.options,\n            storage: extension.storage,\n            editor,\n        };\n        const extraMarkFields = extensions.reduce((fields, e) => {\n            const extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);\n            return {\n                ...fields,\n                ...(extendMarkSchema ? extendMarkSchema(extension) : {}),\n            };\n        }, {});\n        const schema = cleanUpSchemaItem({\n            ...extraMarkFields,\n            inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),\n            excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),\n            group: callOrReturn(getExtensionField(extension, 'group', context)),\n            spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),\n            code: callOrReturn(getExtensionField(extension, 'code', context)),\n            attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {\n                var _a;\n                return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];\n            })),\n        });\n        const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));\n        if (parseHTML) {\n            schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));\n        }\n        const renderHTML = getExtensionField(extension, 'renderHTML', context);\n        if (renderHTML) {\n            schema.toDOM = mark => renderHTML({\n                mark,\n                HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),\n            });\n        }\n        return [extension.name, schema];\n    }));\n    return new Schema({\n        topNode,\n        nodes,\n        marks,\n    });\n}\n\n/**\n * Tries to get a node or mark type by its name.\n * @param name The name of the node or mark type\n * @param schema The Prosemiror schema to search in\n * @returns The node or mark type, or null if it doesn't exist\n */\nfunction getSchemaTypeByName(name, schema) {\n    return schema.nodes[name] || schema.marks[name] || null;\n}\n\nfunction isExtensionRulesEnabled(extension, enabled) {\n    if (Array.isArray(enabled)) {\n        return enabled.some(enabledExtension => {\n            const name = typeof enabledExtension === 'string'\n                ? enabledExtension\n                : enabledExtension.name;\n            return name === extension.name;\n        });\n    }\n    return enabled;\n}\n\n/**\n * Returns the text content of a resolved prosemirror position\n * @param $from The resolved position to get the text content from\n * @param maxMatch The maximum number of characters to match\n * @returns The text content\n */\nconst getTextContentFromNodes = ($from, maxMatch = 500) => {\n    let textBefore = '';\n    const sliceEndPos = $from.parentOffset;\n    $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node, pos, parent, index) => {\n        var _a, _b;\n        const chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {\n            node,\n            pos,\n            parent,\n            index,\n        }))\n            || node.textContent\n            || '%leaf%';\n        textBefore += node.isAtom && !node.isText ? chunk : chunk.slice(0, Math.max(0, sliceEndPos - pos));\n    });\n    return textBefore;\n};\n\nfunction isRegExp(value) {\n    return Object.prototype.toString.call(value) === '[object RegExp]';\n}\n\nclass InputRule {\n    constructor(config) {\n        this.find = config.find;\n        this.handler = config.handler;\n    }\n}\nconst inputRuleMatcherHandler = (text, find) => {\n    if (isRegExp(find)) {\n        return find.exec(text);\n    }\n    const inputRuleMatch = find(text);\n    if (!inputRuleMatch) {\n        return null;\n    }\n    const result = [inputRuleMatch.text];\n    result.index = inputRuleMatch.index;\n    result.input = text;\n    result.data = inputRuleMatch.data;\n    if (inputRuleMatch.replaceWith) {\n        if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {\n            console.warn('[tiptap warn]: \"inputRuleMatch.replaceWith\" must be part of \"inputRuleMatch.text\".');\n        }\n        result.push(inputRuleMatch.replaceWith);\n    }\n    return result;\n};\nfunction run$1(config) {\n    var _a;\n    const { editor, from, to, text, rules, plugin, } = config;\n    const { view } = editor;\n    if (view.composing) {\n        return false;\n    }\n    const $from = view.state.doc.resolve(from);\n    if (\n    // check for code node\n    $from.parent.type.spec.code\n        // check for code mark\n        || !!((_a = ($from.nodeBefore || $from.nodeAfter)) === null || _a === void 0 ? void 0 : _a.marks.find(mark => mark.type.spec.code))) {\n        return false;\n    }\n    let matched = false;\n    const textBefore = getTextContentFromNodes($from) + text;\n    rules.forEach(rule => {\n        if (matched) {\n            return;\n        }\n        const match = inputRuleMatcherHandler(textBefore, rule.find);\n        if (!match) {\n            return;\n        }\n        const tr = view.state.tr;\n        const state = createChainableState({\n            state: view.state,\n            transaction: tr,\n        });\n        const range = {\n            from: from - (match[0].length - text.length),\n            to,\n        };\n        const { commands, chain, can } = new CommandManager({\n            editor,\n            state,\n        });\n        const handler = rule.handler({\n            state,\n            range,\n            match,\n            commands,\n            chain,\n            can,\n        });\n        // stop if there are no changes\n        if (handler === null || !tr.steps.length) {\n            return;\n        }\n        // store transform as meta data\n        // so we can undo input rules within the `undoInputRules` command\n        tr.setMeta(plugin, {\n            transform: tr,\n            from,\n            to,\n            text,\n        });\n        view.dispatch(tr);\n        matched = true;\n    });\n    return matched;\n}\n/**\n * Create an input rules plugin. When enabled, it will cause text\n * input that matches any of the given rules to trigger the rule’s\n * action.\n */\nfunction inputRulesPlugin(props) {\n    const { editor, rules } = props;\n    const plugin = new Plugin({\n        state: {\n            init() {\n                return null;\n            },\n            apply(tr, prev) {\n                const stored = tr.getMeta(plugin);\n                if (stored) {\n                    return stored;\n                }\n                // if InputRule is triggered by insertContent()\n                const simulatedInputMeta = tr.getMeta('applyInputRules');\n                const isSimulatedInput = !!simulatedInputMeta;\n                if (isSimulatedInput) {\n                    setTimeout(() => {\n                        const { from, text } = simulatedInputMeta;\n                        const to = from + text.length;\n                        run$1({\n                            editor,\n                            from,\n                            to,\n                            text,\n                            rules,\n                            plugin,\n                        });\n                    });\n                }\n                return tr.selectionSet || tr.docChanged ? null : prev;\n            },\n        },\n        props: {\n            handleTextInput(view, from, to, text) {\n                return run$1({\n                    editor,\n                    from,\n                    to,\n                    text,\n                    rules,\n                    plugin,\n                });\n            },\n            handleDOMEvents: {\n                compositionend: view => {\n                    setTimeout(() => {\n                        const { $cursor } = view.state.selection;\n                        if ($cursor) {\n                            run$1({\n                                editor,\n                                from: $cursor.pos,\n                                to: $cursor.pos,\n                                text: '',\n                                rules,\n                                plugin,\n                            });\n                        }\n                    });\n                    return false;\n                },\n            },\n            // add support for input rules to trigger on enter\n            // this is useful for example for code blocks\n            handleKeyDown(view, event) {\n                if (event.key !== 'Enter') {\n                    return false;\n                }\n                const { $cursor } = view.state.selection;\n                if ($cursor) {\n                    return run$1({\n                        editor,\n                        from: $cursor.pos,\n                        to: $cursor.pos,\n                        text: '\\n',\n                        rules,\n                        plugin,\n                    });\n                }\n                return false;\n            },\n        },\n        // @ts-ignore\n        isInputRules: true,\n    });\n    return plugin;\n}\n\nfunction isNumber(value) {\n    return typeof value === 'number';\n}\n\n/**\n * Paste rules are used to react to pasted content.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nclass PasteRule {\n    constructor(config) {\n        this.find = config.find;\n        this.handler = config.handler;\n    }\n}\nconst pasteRuleMatcherHandler = (text, find, event) => {\n    if (isRegExp(find)) {\n        return [...text.matchAll(find)];\n    }\n    const matches = find(text, event);\n    if (!matches) {\n        return [];\n    }\n    return matches.map(pasteRuleMatch => {\n        const result = [pasteRuleMatch.text];\n        result.index = pasteRuleMatch.index;\n        result.input = text;\n        result.data = pasteRuleMatch.data;\n        if (pasteRuleMatch.replaceWith) {\n            if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {\n                console.warn('[tiptap warn]: \"pasteRuleMatch.replaceWith\" must be part of \"pasteRuleMatch.text\".');\n            }\n            result.push(pasteRuleMatch.replaceWith);\n        }\n        return result;\n    });\n};\nfunction run(config) {\n    const { editor, state, from, to, rule, pasteEvent, dropEvent, } = config;\n    const { commands, chain, can } = new CommandManager({\n        editor,\n        state,\n    });\n    const handlers = [];\n    state.doc.nodesBetween(from, to, (node, pos) => {\n        if (!node.isTextblock || node.type.spec.code) {\n            return;\n        }\n        const resolvedFrom = Math.max(from, pos);\n        const resolvedTo = Math.min(to, pos + node.content.size);\n        const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\\ufffc');\n        const matches = pasteRuleMatcherHandler(textToMatch, rule.find, pasteEvent);\n        matches.forEach(match => {\n            if (match.index === undefined) {\n                return;\n            }\n            const start = resolvedFrom + match.index + 1;\n            const end = start + match[0].length;\n            const range = {\n                from: state.tr.mapping.map(start),\n                to: state.tr.mapping.map(end),\n            };\n            const handler = rule.handler({\n                state,\n                range,\n                match,\n                commands,\n                chain,\n                can,\n                pasteEvent,\n                dropEvent,\n            });\n            handlers.push(handler);\n        });\n    });\n    const success = handlers.every(handler => handler !== null);\n    return success;\n}\nconst createClipboardPasteEvent = (text) => {\n    var _a;\n    const event = new ClipboardEvent('paste', {\n        clipboardData: new DataTransfer(),\n    });\n    (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/html', text);\n    return event;\n};\n/**\n * Create an paste rules plugin. When enabled, it will cause pasted\n * text that matches any of the given rules to trigger the rule’s\n * action.\n */\nfunction pasteRulesPlugin(props) {\n    const { editor, rules } = props;\n    let dragSourceElement = null;\n    let isPastedFromProseMirror = false;\n    let isDroppedFromProseMirror = false;\n    let pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n    let dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n    const processEvent = ({ state, from, to, rule, pasteEvt, }) => {\n        const tr = state.tr;\n        const chainableState = createChainableState({\n            state,\n            transaction: tr,\n        });\n        const handler = run({\n            editor,\n            state: chainableState,\n            from: Math.max(from - 1, 0),\n            to: to.b - 1,\n            rule,\n            pasteEvent: pasteEvt,\n            dropEvent,\n        });\n        if (!handler || !tr.steps.length) {\n            return;\n        }\n        dropEvent = typeof DragEvent !== 'undefined' ? new DragEvent('drop') : null;\n        pasteEvent = typeof ClipboardEvent !== 'undefined' ? new ClipboardEvent('paste') : null;\n        return tr;\n    };\n    const plugins = rules.map(rule => {\n        return new Plugin({\n            // we register a global drag handler to track the current drag source element\n            view(view) {\n                const handleDragstart = (event) => {\n                    var _a;\n                    dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target))\n                        ? view.dom.parentElement\n                        : null;\n                };\n                window.addEventListener('dragstart', handleDragstart);\n                return {\n                    destroy() {\n                        window.removeEventListener('dragstart', handleDragstart);\n                    },\n                };\n            },\n            props: {\n                handleDOMEvents: {\n                    drop: (view, event) => {\n                        isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;\n                        dropEvent = event;\n                        return false;\n                    },\n                    paste: (_view, event) => {\n                        var _a;\n                        const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');\n                        pasteEvent = event;\n                        isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));\n                        return false;\n                    },\n                },\n            },\n            appendTransaction: (transactions, oldState, state) => {\n                const transaction = transactions[0];\n                const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;\n                const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;\n                // if PasteRule is triggered by insertContent()\n                const simulatedPasteMeta = transaction.getMeta('applyPasteRules');\n                const isSimulatedPaste = !!simulatedPasteMeta;\n                if (!isPaste && !isDrop && !isSimulatedPaste) {\n                    return;\n                }\n                // Handle simulated paste\n                if (isSimulatedPaste) {\n                    const { from, text } = simulatedPasteMeta;\n                    const to = from + text.length;\n                    const pasteEvt = createClipboardPasteEvent(text);\n                    return processEvent({\n                        rule,\n                        state,\n                        from,\n                        to: { b: to },\n                        pasteEvt,\n                    });\n                }\n                // handle actual paste/drop\n                const from = oldState.doc.content.findDiffStart(state.doc.content);\n                const to = oldState.doc.content.findDiffEnd(state.doc.content);\n                // stop if there is no changed range\n                if (!isNumber(from) || !to || from === to.b) {\n                    return;\n                }\n                return processEvent({\n                    rule,\n                    state,\n                    from,\n                    to,\n                    pasteEvt: pasteEvent,\n                });\n            },\n        });\n    });\n    return plugins;\n}\n\nfunction findDuplicates(items) {\n    const filtered = items.filter((el, index) => items.indexOf(el) !== index);\n    return Array.from(new Set(filtered));\n}\n\nclass ExtensionManager {\n    constructor(extensions, editor) {\n        this.splittableMarks = [];\n        this.editor = editor;\n        this.extensions = ExtensionManager.resolve(extensions);\n        this.schema = getSchemaByResolvedExtensions(this.extensions, editor);\n        this.setupExtensions();\n    }\n    /**\n     * Returns a flattened and sorted extension list while\n     * also checking for duplicated extensions and warns the user.\n     * @param extensions An array of Tiptap extensions\n     * @returns An flattened and sorted array of Tiptap extensions\n     */\n    static resolve(extensions) {\n        const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));\n        const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name));\n        if (duplicatedNames.length) {\n            console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames\n                .map(item => `'${item}'`)\n                .join(', ')}]. This can lead to issues.`);\n        }\n        return resolvedExtensions;\n    }\n    /**\n     * Create a flattened array of extensions by traversing the `addExtensions` field.\n     * @param extensions An array of Tiptap extensions\n     * @returns A flattened array of Tiptap extensions\n     */\n    static flatten(extensions) {\n        return (extensions\n            .map(extension => {\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n            };\n            const addExtensions = getExtensionField(extension, 'addExtensions', context);\n            if (addExtensions) {\n                return [extension, ...this.flatten(addExtensions())];\n            }\n            return extension;\n        })\n            // `Infinity` will break TypeScript so we set a number that is probably high enough\n            .flat(10));\n    }\n    /**\n     * Sort extensions by priority.\n     * @param extensions An array of Tiptap extensions\n     * @returns A sorted array of Tiptap extensions by priority\n     */\n    static sort(extensions) {\n        const defaultPriority = 100;\n        return extensions.sort((a, b) => {\n            const priorityA = getExtensionField(a, 'priority') || defaultPriority;\n            const priorityB = getExtensionField(b, 'priority') || defaultPriority;\n            if (priorityA > priorityB) {\n                return -1;\n            }\n            if (priorityA < priorityB) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n    /**\n     * Get all commands from the extensions.\n     * @returns An object with all commands where the key is the command name and the value is the command function\n     */\n    get commands() {\n        return this.extensions.reduce((commands, extension) => {\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor: this.editor,\n                type: getSchemaTypeByName(extension.name, this.schema),\n            };\n            const addCommands = getExtensionField(extension, 'addCommands', context);\n            if (!addCommands) {\n                return commands;\n            }\n            return {\n                ...commands,\n                ...addCommands(),\n            };\n        }, {});\n    }\n    /**\n     * Get all registered Prosemirror plugins from the extensions.\n     * @returns An array of Prosemirror plugins\n     */\n    get plugins() {\n        const { editor } = this;\n        // With ProseMirror, first plugins within an array are executed first.\n        // In Tiptap, we provide the ability to override plugins,\n        // so it feels more natural to run plugins at the end of an array first.\n        // That’s why we have to reverse the `extensions` array and sort again\n        // based on the `priority` option.\n        const extensions = ExtensionManager.sort([...this.extensions].reverse());\n        const inputRules = [];\n        const pasteRules = [];\n        const allPlugins = extensions\n            .map(extension => {\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor,\n                type: getSchemaTypeByName(extension.name, this.schema),\n            };\n            const plugins = [];\n            const addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);\n            let defaultBindings = {};\n            // bind exit handling\n            if (extension.type === 'mark' && getExtensionField(extension, 'exitable', context)) {\n                defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: extension });\n            }\n            if (addKeyboardShortcuts) {\n                const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {\n                    return [shortcut, () => method({ editor })];\n                }));\n                defaultBindings = { ...defaultBindings, ...bindings };\n            }\n            const keyMapPlugin = keymap(defaultBindings);\n            plugins.push(keyMapPlugin);\n            const addInputRules = getExtensionField(extension, 'addInputRules', context);\n            if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {\n                inputRules.push(...addInputRules());\n            }\n            const addPasteRules = getExtensionField(extension, 'addPasteRules', context);\n            if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {\n                pasteRules.push(...addPasteRules());\n            }\n            const addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);\n            if (addProseMirrorPlugins) {\n                const proseMirrorPlugins = addProseMirrorPlugins();\n                plugins.push(...proseMirrorPlugins);\n            }\n            return plugins;\n        })\n            .flat();\n        return [\n            inputRulesPlugin({\n                editor,\n                rules: inputRules,\n            }),\n            ...pasteRulesPlugin({\n                editor,\n                rules: pasteRules,\n            }),\n            ...allPlugins,\n        ];\n    }\n    /**\n     * Get all attributes from the extensions.\n     * @returns An array of attributes\n     */\n    get attributes() {\n        return getAttributesFromExtensions(this.extensions);\n    }\n    /**\n     * Get all node views from the extensions.\n     * @returns An object with all node views where the key is the node name and the value is the node view function\n     */\n    get nodeViews() {\n        const { editor } = this;\n        const { nodeExtensions } = splitExtensions(this.extensions);\n        return Object.fromEntries(nodeExtensions\n            .filter(extension => !!getExtensionField(extension, 'addNodeView'))\n            .map(extension => {\n            const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name);\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor,\n                type: getNodeType(extension.name, this.schema),\n            };\n            const addNodeView = getExtensionField(extension, 'addNodeView', context);\n            if (!addNodeView) {\n                return [];\n            }\n            const nodeview = (node, view, getPos, decorations) => {\n                const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);\n                return addNodeView()({\n                    editor,\n                    node,\n                    getPos,\n                    decorations,\n                    HTMLAttributes,\n                    extension,\n                });\n            };\n            return [extension.name, nodeview];\n        }));\n    }\n    /**\n     * Go through all extensions, create extension storages & setup marks\n     * & bind editor event listener.\n     */\n    setupExtensions() {\n        this.extensions.forEach(extension => {\n            var _a;\n            // store extension storage in editor\n            this.editor.extensionStorage[extension.name] = extension.storage;\n            const context = {\n                name: extension.name,\n                options: extension.options,\n                storage: extension.storage,\n                editor: this.editor,\n                type: getSchemaTypeByName(extension.name, this.schema),\n            };\n            if (extension.type === 'mark') {\n                const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;\n                if (keepOnSplit) {\n                    this.splittableMarks.push(extension.name);\n                }\n            }\n            const onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);\n            const onCreate = getExtensionField(extension, 'onCreate', context);\n            const onUpdate = getExtensionField(extension, 'onUpdate', context);\n            const onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);\n            const onTransaction = getExtensionField(extension, 'onTransaction', context);\n            const onFocus = getExtensionField(extension, 'onFocus', context);\n            const onBlur = getExtensionField(extension, 'onBlur', context);\n            const onDestroy = getExtensionField(extension, 'onDestroy', context);\n            if (onBeforeCreate) {\n                this.editor.on('beforeCreate', onBeforeCreate);\n            }\n            if (onCreate) {\n                this.editor.on('create', onCreate);\n            }\n            if (onUpdate) {\n                this.editor.on('update', onUpdate);\n            }\n            if (onSelectionUpdate) {\n                this.editor.on('selectionUpdate', onSelectionUpdate);\n            }\n            if (onTransaction) {\n                this.editor.on('transaction', onTransaction);\n            }\n            if (onFocus) {\n                this.editor.on('focus', onFocus);\n            }\n            if (onBlur) {\n                this.editor.on('blur', onBlur);\n            }\n            if (onDestroy) {\n                this.editor.on('destroy', onDestroy);\n            }\n        });\n    }\n}\n\n// see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts\nfunction getType(value) {\n    return Object.prototype.toString.call(value).slice(8, -1);\n}\nfunction isPlainObject(value) {\n    if (getType(value) !== 'Object') {\n        return false;\n    }\n    return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;\n}\n\nfunction mergeDeep(target, source) {\n    const output = { ...target };\n    if (isPlainObject(target) && isPlainObject(source)) {\n        Object.keys(source).forEach(key => {\n            if (isPlainObject(source[key]) && isPlainObject(target[key])) {\n                output[key] = mergeDeep(target[key], source[key]);\n            }\n            else {\n                output[key] = source[key];\n            }\n        });\n    }\n    return output;\n}\n\n/**\n * The Extension class is the base class for all extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nclass Extension {\n    constructor(config = {}) {\n        this.type = 'extension';\n        this.name = 'extension';\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {},\n        };\n        this.config = {\n            ...this.config,\n            ...config,\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n                name: this.name,\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n            name: this.name,\n            options: this.options,\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Extension(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend({\n            ...this.config,\n            addOptions: () => {\n                return mergeDeep(this.options, options);\n            },\n        });\n        // Always preserve the current name\n        extension.name = this.name;\n        // Set the parent to be our parent\n        extension.parent = this.parent;\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Extension({ ...this.config, ...extendedConfig });\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n            name: extension.name,\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n            name: extension.name,\n            options: extension.options,\n        }));\n        return extension;\n    }\n}\n\n/**\n * Gets the text between two positions in a Prosemirror node\n * and serializes it using the given text serializers and block separator (see getText)\n * @param startNode The Prosemirror node to start from\n * @param range The range of the text to get\n * @param options Options for the text serializer & block separator\n * @returns The text between the two positions\n */\nfunction getTextBetween(startNode, range, options) {\n    const { from, to } = range;\n    const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {};\n    let text = '';\n    startNode.nodesBetween(from, to, (node, pos, parent, index) => {\n        var _a;\n        if (node.isBlock && pos > from) {\n            text += blockSeparator;\n        }\n        const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];\n        if (textSerializer) {\n            if (parent) {\n                text += textSerializer({\n                    node,\n                    pos,\n                    parent,\n                    index,\n                    range,\n                });\n            }\n            // do not descend into child nodes when there exists a serializer\n            return false;\n        }\n        if (node.isText) {\n            text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line\n        }\n    });\n    return text;\n}\n\n/**\n * Find text serializers `toText` in a Prosemirror schema\n * @param schema The Prosemirror schema to search in\n * @returns A record of text serializers by node name\n */\nfunction getTextSerializersFromSchema(schema) {\n    return Object.fromEntries(Object.entries(schema.nodes)\n        .filter(([, node]) => node.spec.toText)\n        .map(([name, node]) => [name, node.spec.toText]));\n}\n\nconst ClipboardTextSerializer = Extension.create({\n    name: 'clipboardTextSerializer',\n    addOptions() {\n        return {\n            blockSeparator: undefined,\n        };\n    },\n    addProseMirrorPlugins() {\n        return [\n            new Plugin({\n                key: new PluginKey('clipboardTextSerializer'),\n                props: {\n                    clipboardTextSerializer: () => {\n                        const { editor } = this;\n                        const { state, schema } = editor;\n                        const { doc, selection } = state;\n                        const { ranges } = selection;\n                        const from = Math.min(...ranges.map(range => range.$from.pos));\n                        const to = Math.max(...ranges.map(range => range.$to.pos));\n                        const textSerializers = getTextSerializersFromSchema(schema);\n                        const range = { from, to };\n                        return getTextBetween(doc, range, {\n                            ...(this.options.blockSeparator !== undefined\n                                ? { blockSeparator: this.options.blockSeparator }\n                                : {}),\n                            textSerializers,\n                        });\n                    },\n                },\n            }),\n        ];\n    },\n});\n\nconst blur = () => ({ editor, view }) => {\n    requestAnimationFrame(() => {\n        var _a;\n        if (!editor.isDestroyed) {\n            view.dom.blur();\n            // Browsers should remove the caret on blur but safari does not.\n            // See: https://github.com/ueberdosis/tiptap/issues/2405\n            (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();\n        }\n    });\n    return true;\n};\n\nconst clearContent = (emitUpdate = false) => ({ commands }) => {\n    return commands.setContent('', emitUpdate);\n};\n\nconst clearNodes = () => ({ state, tr, dispatch }) => {\n    const { selection } = tr;\n    const { ranges } = selection;\n    if (!dispatch) {\n        return true;\n    }\n    ranges.forEach(({ $from, $to }) => {\n        state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {\n            if (node.type.isText) {\n                return;\n            }\n            const { doc, mapping } = tr;\n            const $mappedFrom = doc.resolve(mapping.map(pos));\n            const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));\n            const nodeRange = $mappedFrom.blockRange($mappedTo);\n            if (!nodeRange) {\n                return;\n            }\n            const targetLiftDepth = liftTarget(nodeRange);\n            if (node.type.isTextblock) {\n                const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());\n                tr.setNodeMarkup(nodeRange.start, defaultType);\n            }\n            if (targetLiftDepth || targetLiftDepth === 0) {\n                tr.lift(nodeRange, targetLiftDepth);\n            }\n        });\n    });\n    return true;\n};\n\nconst command = fn => props => {\n    return fn(props);\n};\n\nconst createParagraphNear = () => ({ state, dispatch }) => {\n    return createParagraphNear$1(state, dispatch);\n};\n\nconst cut = (originRange, targetPos) => ({ editor, tr }) => {\n    const { state } = editor;\n    const contentSlice = state.doc.slice(originRange.from, originRange.to);\n    tr.deleteRange(originRange.from, originRange.to);\n    const newPos = tr.mapping.map(targetPos);\n    tr.insert(newPos, contentSlice.content);\n    tr.setSelection(new TextSelection(tr.doc.resolve(newPos - 1)));\n    return true;\n};\n\nconst deleteCurrentNode = () => ({ tr, dispatch }) => {\n    const { selection } = tr;\n    const currentNode = selection.$anchor.node();\n    // if there is content inside the current node, break out of this command\n    if (currentNode.content.size > 0) {\n        return false;\n    }\n    const $pos = tr.selection.$anchor;\n    for (let depth = $pos.depth; depth > 0; depth -= 1) {\n        const node = $pos.node(depth);\n        if (node.type === currentNode.type) {\n            if (dispatch) {\n                const from = $pos.before(depth);\n                const to = $pos.after(depth);\n                tr.delete(from, to).scrollIntoView();\n            }\n            return true;\n        }\n    }\n    return false;\n};\n\nconst deleteNode = typeOrName => ({ tr, state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    const $pos = tr.selection.$anchor;\n    for (let depth = $pos.depth; depth > 0; depth -= 1) {\n        const node = $pos.node(depth);\n        if (node.type === type) {\n            if (dispatch) {\n                const from = $pos.before(depth);\n                const to = $pos.after(depth);\n                tr.delete(from, to).scrollIntoView();\n            }\n            return true;\n        }\n    }\n    return false;\n};\n\nconst deleteRange = range => ({ tr, dispatch }) => {\n    const { from, to } = range;\n    if (dispatch) {\n        tr.delete(from, to);\n    }\n    return true;\n};\n\nconst deleteSelection = () => ({ state, dispatch }) => {\n    return deleteSelection$1(state, dispatch);\n};\n\nconst enter = () => ({ commands }) => {\n    return commands.keyboardShortcut('Enter');\n};\n\nconst exitCode = () => ({ state, dispatch }) => {\n    return exitCode$1(state, dispatch);\n};\n\n/**\n * Check if object1 includes object2\n * @param object1 Object\n * @param object2 Object\n */\nfunction objectIncludes(object1, object2, options = { strict: true }) {\n    const keys = Object.keys(object2);\n    if (!keys.length) {\n        return true;\n    }\n    return keys.every(key => {\n        if (options.strict) {\n            return object2[key] === object1[key];\n        }\n        if (isRegExp(object2[key])) {\n            return object2[key].test(object1[key]);\n        }\n        return object2[key] === object1[key];\n    });\n}\n\nfunction findMarkInSet(marks, type, attributes = {}) {\n    return marks.find(item => {\n        return item.type === type && objectIncludes(item.attrs, attributes);\n    });\n}\nfunction isMarkInSet(marks, type, attributes = {}) {\n    return !!findMarkInSet(marks, type, attributes);\n}\nfunction getMarkRange($pos, type, attributes = {}) {\n    if (!$pos || !type) {\n        return;\n    }\n    let start = $pos.parent.childAfter($pos.parentOffset);\n    if ($pos.parentOffset === start.offset && start.offset !== 0) {\n        start = $pos.parent.childBefore($pos.parentOffset);\n    }\n    if (!start.node) {\n        return;\n    }\n    const mark = findMarkInSet([...start.node.marks], type, attributes);\n    if (!mark) {\n        return;\n    }\n    let startIndex = start.index;\n    let startPos = $pos.start() + start.offset;\n    let endIndex = startIndex + 1;\n    let endPos = startPos + start.node.nodeSize;\n    findMarkInSet([...start.node.marks], type, attributes);\n    while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {\n        startIndex -= 1;\n        startPos -= $pos.parent.child(startIndex).nodeSize;\n    }\n    while (endIndex < $pos.parent.childCount\n        && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {\n        endPos += $pos.parent.child(endIndex).nodeSize;\n        endIndex += 1;\n    }\n    return {\n        from: startPos,\n        to: endPos,\n    };\n}\n\nfunction getMarkType(nameOrType, schema) {\n    if (typeof nameOrType === 'string') {\n        if (!schema.marks[nameOrType]) {\n            throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);\n        }\n        return schema.marks[nameOrType];\n    }\n    return nameOrType;\n}\n\nconst extendMarkRange = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n    const type = getMarkType(typeOrName, state.schema);\n    const { doc, selection } = tr;\n    const { $from, from, to } = selection;\n    if (dispatch) {\n        const range = getMarkRange($from, type, attributes);\n        if (range && range.from <= from && range.to >= to) {\n            const newSelection = TextSelection.create(doc, range.from, range.to);\n            tr.setSelection(newSelection);\n        }\n    }\n    return true;\n};\n\nconst first = commands => props => {\n    const items = typeof commands === 'function'\n        ? commands(props)\n        : commands;\n    for (let i = 0; i < items.length; i += 1) {\n        if (items[i](props)) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction isTextSelection(value) {\n    return value instanceof TextSelection;\n}\n\nfunction minMax(value = 0, min = 0, max = 0) {\n    return Math.min(Math.max(value, min), max);\n}\n\nfunction resolveFocusPosition(doc, position = null) {\n    if (!position) {\n        return null;\n    }\n    const selectionAtStart = Selection.atStart(doc);\n    const selectionAtEnd = Selection.atEnd(doc);\n    if (position === 'start' || position === true) {\n        return selectionAtStart;\n    }\n    if (position === 'end') {\n        return selectionAtEnd;\n    }\n    const minPos = selectionAtStart.from;\n    const maxPos = selectionAtEnd.to;\n    if (position === 'all') {\n        return TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));\n    }\n    return TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));\n}\n\nfunction isiOS() {\n    return [\n        'iPad Simulator',\n        'iPhone Simulator',\n        'iPod Simulator',\n        'iPad',\n        'iPhone',\n        'iPod',\n    ].includes(navigator.platform)\n        // iPad on iOS 13 detection\n        || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);\n}\n\nconst focus = (position = null, options = {}) => ({ editor, view, tr, dispatch, }) => {\n    options = {\n        scrollIntoView: true,\n        ...options,\n    };\n    const delayedFocus = () => {\n        // focus within `requestAnimationFrame` breaks focus on iOS\n        // so we have to call this\n        if (isiOS()) {\n            view.dom.focus();\n        }\n        // For React we have to focus asynchronously. Otherwise wild things happen.\n        // see: https://github.com/ueberdosis/tiptap/issues/1520\n        requestAnimationFrame(() => {\n            if (!editor.isDestroyed) {\n                view.focus();\n                if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {\n                    editor.commands.scrollIntoView();\n                }\n            }\n        });\n    };\n    if ((view.hasFocus() && position === null) || position === false) {\n        return true;\n    }\n    // we don’t try to resolve a NodeSelection or CellSelection\n    if (dispatch && position === null && !isTextSelection(editor.state.selection)) {\n        delayedFocus();\n        return true;\n    }\n    // pass through tr.doc instead of editor.state.doc\n    // since transactions could change the editors state before this command has been run\n    const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;\n    const isSameSelection = editor.state.selection.eq(selection);\n    if (dispatch) {\n        if (!isSameSelection) {\n            tr.setSelection(selection);\n        }\n        // `tr.setSelection` resets the stored marks\n        // so we’ll restore them if the selection is the same as before\n        if (isSameSelection && tr.storedMarks) {\n            tr.setStoredMarks(tr.storedMarks);\n        }\n        delayedFocus();\n    }\n    return true;\n};\n\nconst forEach = (items, fn) => props => {\n    return items.every((item, index) => fn(item, { ...props, index }));\n};\n\nconst insertContent = (value, options) => ({ tr, commands }) => {\n    return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options);\n};\n\nconst removeWhitespaces = (node) => {\n    const children = node.childNodes;\n    for (let i = children.length - 1; i >= 0; i -= 1) {\n        const child = children[i];\n        if (child.nodeType === 3 && child.nodeValue && /^(\\n\\s\\s|\\n)$/.test(child.nodeValue)) {\n            node.removeChild(child);\n        }\n        else if (child.nodeType === 1) {\n            removeWhitespaces(child);\n        }\n    }\n    return node;\n};\nfunction elementFromString(value) {\n    // add a wrapper to preserve leading and trailing whitespace\n    const wrappedValue = `<body>${value}</body>`;\n    const html = new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;\n    return removeWhitespaces(html);\n}\n\n/**\n * Takes a JSON or HTML content and creates a Prosemirror node or fragment from it.\n * @param content The JSON or HTML content to create the node from\n * @param schema The Prosemirror schema to use for the node\n * @param options Options for the parser\n * @returns The created Prosemirror node or fragment\n */\nfunction createNodeFromContent(content, schema, options) {\n    options = {\n        slice: true,\n        parseOptions: {},\n        ...options,\n    };\n    const isJSONContent = typeof content === 'object' && content !== null;\n    const isTextContent = typeof content === 'string';\n    if (isJSONContent) {\n        try {\n            const isArrayContent = Array.isArray(content) && content.length > 0;\n            // if the JSON Content is an array of nodes, create a fragment for each node\n            if (isArrayContent) {\n                return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)));\n            }\n            return schema.nodeFromJSON(content);\n        }\n        catch (error) {\n            if (options.errorOnInvalidContent) {\n                throw new Error('[tiptap error]: Invalid JSON content', { cause: error });\n            }\n            console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);\n            return createNodeFromContent('', schema, options);\n        }\n    }\n    if (isTextContent) {\n        // Check for invalid content\n        if (options.errorOnInvalidContent) {\n            let hasInvalidContent = false;\n            let invalidContent = '';\n            // A copy of the current schema with a catch-all node at the end\n            const contentCheckSchema = new Schema({\n                topNode: schema.spec.topNode,\n                marks: schema.spec.marks,\n                // Prosemirror's schemas are executed such that: the last to execute, matches last\n                // This means that we can add a catch-all node at the end of the schema to catch any content that we don't know how to handle\n                nodes: schema.spec.nodes.append({\n                    __tiptap__private__unknown__catch__all__node: {\n                        content: 'inline*',\n                        group: 'block',\n                        parseDOM: [\n                            {\n                                tag: '*',\n                                getAttrs: e => {\n                                    // If this is ever called, we know that the content has something that we don't know how to handle in the schema\n                                    hasInvalidContent = true;\n                                    // Try to stringify the element for a more helpful error message\n                                    invalidContent = typeof e === 'string' ? e : e.outerHTML;\n                                    return null;\n                                },\n                            },\n                        ],\n                    },\n                }),\n            });\n            if (options.slice) {\n                DOMParser.fromSchema(contentCheckSchema).parseSlice(elementFromString(content), options.parseOptions);\n            }\n            else {\n                DOMParser.fromSchema(contentCheckSchema).parse(elementFromString(content), options.parseOptions);\n            }\n            if (options.errorOnInvalidContent && hasInvalidContent) {\n                throw new Error('[tiptap error]: Invalid HTML content', { cause: new Error(`Invalid element found: ${invalidContent}`) });\n            }\n        }\n        const parser = DOMParser.fromSchema(schema);\n        if (options.slice) {\n            return parser.parseSlice(elementFromString(content), options.parseOptions).content;\n        }\n        return parser.parse(elementFromString(content), options.parseOptions);\n    }\n    return createNodeFromContent('', schema, options);\n}\n\n// source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n    const last = tr.steps.length - 1;\n    if (last < startLen) {\n        return;\n    }\n    const step = tr.steps[last];\n    if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {\n        return;\n    }\n    const map = tr.mapping.maps[last];\n    let end = 0;\n    map.forEach((_from, _to, _newFrom, newTo) => {\n        if (end === 0) {\n            end = newTo;\n        }\n    });\n    tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\n\nconst isFragment = (nodeOrFragment) => {\n    return !('type' in nodeOrFragment);\n};\nconst insertContentAt = (position, value, options) => ({ tr, dispatch, editor }) => {\n    var _a;\n    if (dispatch) {\n        options = {\n            parseOptions: {},\n            updateSelection: true,\n            applyInputRules: false,\n            applyPasteRules: false,\n            ...options,\n        };\n        let content;\n        try {\n            content = createNodeFromContent(value, editor.schema, {\n                parseOptions: {\n                    preserveWhitespace: 'full',\n                    ...options.parseOptions,\n                },\n                errorOnInvalidContent: (_a = options.errorOnInvalidContent) !== null && _a !== void 0 ? _a : editor.options.enableContentCheck,\n            });\n        }\n        catch (e) {\n            editor.emit('contentError', {\n                editor,\n                error: e,\n                disableCollaboration: () => {\n                    console.error('[tiptap error]: Unable to disable collaboration at this point in time');\n                },\n            });\n            return false;\n        }\n        let { from, to } = typeof position === 'number' ? { from: position, to: position } : { from: position.from, to: position.to };\n        let isOnlyTextContent = true;\n        let isOnlyBlockContent = true;\n        const nodes = isFragment(content) ? content : [content];\n        nodes.forEach(node => {\n            // check if added node is valid\n            node.check();\n            isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;\n            isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;\n        });\n        // check if we can replace the wrapping node by\n        // the newly inserted content\n        // example:\n        // replace an empty paragraph by an inserted image\n        // instead of inserting the image below the paragraph\n        if (from === to && isOnlyBlockContent) {\n            const { parent } = tr.doc.resolve(from);\n            const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;\n            if (isEmptyTextBlock) {\n                from -= 1;\n                to += 1;\n            }\n        }\n        let newContent;\n        // if there is only plain text we have to use `insertText`\n        // because this will keep the current marks\n        if (isOnlyTextContent) {\n            // if value is string, we can use it directly\n            // otherwise if it is an array, we have to join it\n            if (Array.isArray(value)) {\n                newContent = value.map(v => v.text || '').join('');\n            }\n            else if (typeof value === 'object' && !!value && !!value.text) {\n                newContent = value.text;\n            }\n            else {\n                newContent = value;\n            }\n            tr.insertText(newContent, from, to);\n        }\n        else {\n            newContent = content;\n            tr.replaceWith(from, to, newContent);\n        }\n        // set cursor at end of inserted content\n        if (options.updateSelection) {\n            selectionToInsertionEnd(tr, tr.steps.length - 1, -1);\n        }\n        if (options.applyInputRules) {\n            tr.setMeta('applyInputRules', { from, text: newContent });\n        }\n        if (options.applyPasteRules) {\n            tr.setMeta('applyPasteRules', { from, text: newContent });\n        }\n    }\n    return true;\n};\n\nconst joinUp = () => ({ state, dispatch }) => {\n    return joinUp$1(state, dispatch);\n};\nconst joinDown = () => ({ state, dispatch }) => {\n    return joinDown$1(state, dispatch);\n};\nconst joinBackward = () => ({ state, dispatch }) => {\n    return joinBackward$1(state, dispatch);\n};\nconst joinForward = () => ({ state, dispatch }) => {\n    return joinForward$1(state, dispatch);\n};\n\nconst joinItemBackward = () => ({ state, dispatch, tr, }) => {\n    try {\n        const point = joinPoint(state.doc, state.selection.$from.pos, -1);\n        if (point === null || point === undefined) {\n            return false;\n        }\n        tr.join(point, 2);\n        if (dispatch) {\n            dispatch(tr);\n        }\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\n\nconst joinItemForward = () => ({ state, dispatch, tr, }) => {\n    try {\n        const point = joinPoint(state.doc, state.selection.$from.pos, +1);\n        if (point === null || point === undefined) {\n            return false;\n        }\n        tr.join(point, 2);\n        if (dispatch) {\n            dispatch(tr);\n        }\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\n\nconst joinTextblockBackward = () => ({ state, dispatch }) => {\n    return joinTextblockBackward$1(state, dispatch);\n};\n\nconst joinTextblockForward = () => ({ state, dispatch }) => {\n    return joinTextblockForward$1(state, dispatch);\n};\n\nfunction isMacOS() {\n    return typeof navigator !== 'undefined'\n        ? /Mac/.test(navigator.platform)\n        : false;\n}\n\nfunction normalizeKeyName(name) {\n    const parts = name.split(/-(?!$)/);\n    let result = parts[parts.length - 1];\n    if (result === 'Space') {\n        result = ' ';\n    }\n    let alt;\n    let ctrl;\n    let shift;\n    let meta;\n    for (let i = 0; i < parts.length - 1; i += 1) {\n        const mod = parts[i];\n        if (/^(cmd|meta|m)$/i.test(mod)) {\n            meta = true;\n        }\n        else if (/^a(lt)?$/i.test(mod)) {\n            alt = true;\n        }\n        else if (/^(c|ctrl|control)$/i.test(mod)) {\n            ctrl = true;\n        }\n        else if (/^s(hift)?$/i.test(mod)) {\n            shift = true;\n        }\n        else if (/^mod$/i.test(mod)) {\n            if (isiOS() || isMacOS()) {\n                meta = true;\n            }\n            else {\n                ctrl = true;\n            }\n        }\n        else {\n            throw new Error(`Unrecognized modifier name: ${mod}`);\n        }\n    }\n    if (alt) {\n        result = `Alt-${result}`;\n    }\n    if (ctrl) {\n        result = `Ctrl-${result}`;\n    }\n    if (meta) {\n        result = `Meta-${result}`;\n    }\n    if (shift) {\n        result = `Shift-${result}`;\n    }\n    return result;\n}\nconst keyboardShortcut = name => ({ editor, view, tr, dispatch, }) => {\n    const keys = normalizeKeyName(name).split(/-(?!$)/);\n    const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item));\n    const event = new KeyboardEvent('keydown', {\n        key: key === 'Space'\n            ? ' '\n            : key,\n        altKey: keys.includes('Alt'),\n        ctrlKey: keys.includes('Ctrl'),\n        metaKey: keys.includes('Meta'),\n        shiftKey: keys.includes('Shift'),\n        bubbles: true,\n        cancelable: true,\n    });\n    const capturedTransaction = editor.captureTransaction(() => {\n        view.someProp('handleKeyDown', f => f(view, event));\n    });\n    capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(step => {\n        const newStep = step.map(tr.mapping);\n        if (newStep && dispatch) {\n            tr.maybeStep(newStep);\n        }\n    });\n    return true;\n};\n\nfunction isNodeActive(state, typeOrName, attributes = {}) {\n    const { from, to, empty } = state.selection;\n    const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;\n    const nodeRanges = [];\n    state.doc.nodesBetween(from, to, (node, pos) => {\n        if (node.isText) {\n            return;\n        }\n        const relativeFrom = Math.max(from, pos);\n        const relativeTo = Math.min(to, pos + node.nodeSize);\n        nodeRanges.push({\n            node,\n            from: relativeFrom,\n            to: relativeTo,\n        });\n    });\n    const selectionRange = to - from;\n    const matchedNodeRanges = nodeRanges\n        .filter(nodeRange => {\n        if (!type) {\n            return true;\n        }\n        return type.name === nodeRange.node.type.name;\n    })\n        .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }));\n    if (empty) {\n        return !!matchedNodeRanges.length;\n    }\n    const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);\n    return range >= selectionRange;\n}\n\nconst lift = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    const isActive = isNodeActive(state, type, attributes);\n    if (!isActive) {\n        return false;\n    }\n    return lift$1(state, dispatch);\n};\n\nconst liftEmptyBlock = () => ({ state, dispatch }) => {\n    return liftEmptyBlock$1(state, dispatch);\n};\n\nconst liftListItem = typeOrName => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    return liftListItem$1(type)(state, dispatch);\n};\n\nconst newlineInCode = () => ({ state, dispatch }) => {\n    return newlineInCode$1(state, dispatch);\n};\n\n/**\n * Get the type of a schema item by its name.\n * @param name The name of the schema item\n * @param schema The Prosemiror schema to search in\n * @returns The type of the schema item (`node` or `mark`), or null if it doesn't exist\n */\nfunction getSchemaTypeNameByName(name, schema) {\n    if (schema.nodes[name]) {\n        return 'node';\n    }\n    if (schema.marks[name]) {\n        return 'mark';\n    }\n    return null;\n}\n\n/**\n * Remove a property or an array of properties from an object\n * @param obj Object\n * @param key Key to remove\n */\nfunction deleteProps(obj, propOrProps) {\n    const props = typeof propOrProps === 'string'\n        ? [propOrProps]\n        : propOrProps;\n    return Object\n        .keys(obj)\n        .reduce((newObj, prop) => {\n        if (!props.includes(prop)) {\n            newObj[prop] = obj[prop];\n        }\n        return newObj;\n    }, {});\n}\n\nconst resetAttributes = (typeOrName, attributes) => ({ tr, state, dispatch }) => {\n    let nodeType = null;\n    let markType = null;\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (!schemaType) {\n        return false;\n    }\n    if (schemaType === 'node') {\n        nodeType = getNodeType(typeOrName, state.schema);\n    }\n    if (schemaType === 'mark') {\n        markType = getMarkType(typeOrName, state.schema);\n    }\n    if (dispatch) {\n        tr.selection.ranges.forEach(range => {\n            state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {\n                if (nodeType && nodeType === node.type) {\n                    tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));\n                }\n                if (markType && node.marks.length) {\n                    node.marks.forEach(mark => {\n                        if (markType === mark.type) {\n                            tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));\n                        }\n                    });\n                }\n            });\n        });\n    }\n    return true;\n};\n\nconst scrollIntoView = () => ({ tr, dispatch }) => {\n    if (dispatch) {\n        tr.scrollIntoView();\n    }\n    return true;\n};\n\nconst selectAll = () => ({ tr, commands }) => {\n    return commands.setTextSelection({\n        from: 0,\n        to: tr.doc.content.size,\n    });\n};\n\nconst selectNodeBackward = () => ({ state, dispatch }) => {\n    return selectNodeBackward$1(state, dispatch);\n};\n\nconst selectNodeForward = () => ({ state, dispatch }) => {\n    return selectNodeForward$1(state, dispatch);\n};\n\nconst selectParentNode = () => ({ state, dispatch }) => {\n    return selectParentNode$1(state, dispatch);\n};\n\n// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nconst selectTextblockEnd = () => ({ state, dispatch }) => {\n    return selectTextblockEnd$1(state, dispatch);\n};\n\n// @ts-ignore\n// TODO: add types to @types/prosemirror-commands\nconst selectTextblockStart = () => ({ state, dispatch }) => {\n    return selectTextblockStart$1(state, dispatch);\n};\n\n/**\n * Create a new Prosemirror document node from content.\n * @param content The JSON or HTML content to create the document from\n * @param schema The Prosemirror schema to use for the document\n * @param parseOptions Options for the parser\n * @returns The created Prosemirror document node\n */\nfunction createDocument(content, schema, parseOptions = {}, options = {}) {\n    return createNodeFromContent(content, schema, {\n        slice: false,\n        parseOptions,\n        errorOnInvalidContent: options.errorOnInvalidContent,\n    });\n}\n\nconst setContent = (content, emitUpdate = false, parseOptions = {}, options = {}) => ({ editor, tr, dispatch, commands, }) => {\n    var _a, _b;\n    const { doc } = tr;\n    // This is to keep backward compatibility with the previous behavior\n    // TODO remove this in the next major version\n    if (parseOptions.preserveWhitespace !== 'full') {\n        const document = createDocument(content, editor.schema, parseOptions, {\n            errorOnInvalidContent: (_a = options.errorOnInvalidContent) !== null && _a !== void 0 ? _a : editor.options.enableContentCheck,\n        });\n        if (dispatch) {\n            tr.replaceWith(0, doc.content.size, document).setMeta('preventUpdate', !emitUpdate);\n        }\n        return true;\n    }\n    if (dispatch) {\n        tr.setMeta('preventUpdate', !emitUpdate);\n    }\n    return commands.insertContentAt({ from: 0, to: doc.content.size }, content, {\n        parseOptions,\n        errorOnInvalidContent: (_b = options.errorOnInvalidContent) !== null && _b !== void 0 ? _b : editor.options.enableContentCheck,\n    });\n};\n\nfunction getMarkAttributes(state, typeOrName) {\n    const type = getMarkType(typeOrName, state.schema);\n    const { from, to, empty } = state.selection;\n    const marks = [];\n    if (empty) {\n        if (state.storedMarks) {\n            marks.push(...state.storedMarks);\n        }\n        marks.push(...state.selection.$head.marks());\n    }\n    else {\n        state.doc.nodesBetween(from, to, node => {\n            marks.push(...node.marks);\n        });\n    }\n    const mark = marks.find(markItem => markItem.type.name === type.name);\n    if (!mark) {\n        return {};\n    }\n    return { ...mark.attrs };\n}\n\n/**\n * Returns a new `Transform` based on all steps of the passed transactions.\n * @param oldDoc The Prosemirror node to start from\n * @param transactions The transactions to combine\n * @returns A new `Transform` with all steps of the passed transactions\n */\nfunction combineTransactionSteps(oldDoc, transactions) {\n    const transform = new Transform(oldDoc);\n    transactions.forEach(transaction => {\n        transaction.steps.forEach(step => {\n            transform.step(step);\n        });\n    });\n    return transform;\n}\n\n/**\n * Gets the default block type at a given match\n * @param match The content match to get the default block type from\n * @returns The default block type or null\n */\nfunction defaultBlockAt(match) {\n    for (let i = 0; i < match.edgeCount; i += 1) {\n        const { type } = match.edge(i);\n        if (type.isTextblock && !type.hasRequiredAttrs()) {\n            return type;\n        }\n    }\n    return null;\n}\n\n/**\n * Find children inside a Prosemirror node that match a predicate.\n * @param node The Prosemirror node to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nfunction findChildren(node, predicate) {\n    const nodesWithPos = [];\n    node.descendants((child, pos) => {\n        if (predicate(child)) {\n            nodesWithPos.push({\n                node: child,\n                pos,\n            });\n        }\n    });\n    return nodesWithPos;\n}\n\n/**\n * Same as `findChildren` but searches only within a `range`.\n * @param node The Prosemirror node to search in\n * @param range The range to search in\n * @param predicate The predicate to match\n * @returns An array of nodes with their positions\n */\nfunction findChildrenInRange(node, range, predicate) {\n    const nodesWithPos = [];\n    // if (range.from === range.to) {\n    //   const nodeAt = node.nodeAt(range.from)\n    //   if (nodeAt) {\n    //     nodesWithPos.push({\n    //       node: nodeAt,\n    //       pos: range.from,\n    //     })\n    //   }\n    // }\n    node.nodesBetween(range.from, range.to, (child, pos) => {\n        if (predicate(child)) {\n            nodesWithPos.push({\n                node: child,\n                pos,\n            });\n        }\n    });\n    return nodesWithPos;\n}\n\n/**\n * Finds the closest parent node to a resolved position that matches a predicate.\n * @param $pos The resolved position to search from\n * @param predicate The predicate to match\n * @returns The closest parent node to the resolved position that matches the predicate\n * @example ```js\n * findParentNodeClosestToPos($from, node => node.type.name === 'paragraph')\n * ```\n */\nfunction findParentNodeClosestToPos($pos, predicate) {\n    for (let i = $pos.depth; i > 0; i -= 1) {\n        const node = $pos.node(i);\n        if (predicate(node)) {\n            return {\n                pos: i > 0 ? $pos.before(i) : 0,\n                start: $pos.start(i),\n                depth: i,\n                node,\n            };\n        }\n    }\n}\n\n/**\n * Finds the closest parent node to the current selection that matches a predicate.\n * @param predicate The predicate to match\n * @returns A command that finds the closest parent node to the current selection that matches the predicate\n * @example ```js\n * findParentNode(node => node.type.name === 'paragraph')\n * ```\n */\nfunction findParentNode(predicate) {\n    return (selection) => findParentNodeClosestToPos(selection.$from, predicate);\n}\n\nfunction getHTMLFromFragment(fragment, schema) {\n    const documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment);\n    const temporaryDocument = document.implementation.createHTMLDocument();\n    const container = temporaryDocument.createElement('div');\n    container.appendChild(documentFragment);\n    return container.innerHTML;\n}\n\nfunction getSchema(extensions, editor) {\n    const resolvedExtensions = ExtensionManager.resolve(extensions);\n    return getSchemaByResolvedExtensions(resolvedExtensions, editor);\n}\n\n/**\n * Generate HTML from a JSONContent\n * @param doc The JSONContent to generate HTML from\n * @param extensions The extensions to use for the schema\n * @returns The generated HTML\n */\nfunction generateHTML(doc, extensions) {\n    const schema = getSchema(extensions);\n    const contentNode = Node$1.fromJSON(schema, doc);\n    return getHTMLFromFragment(contentNode.content, schema);\n}\n\n/**\n * Generate JSONContent from HTML\n * @param html The HTML to generate JSONContent from\n * @param extensions The extensions to use for the schema\n * @returns The generated JSONContent\n */\nfunction generateJSON(html, extensions) {\n    const schema = getSchema(extensions);\n    const dom = elementFromString(html);\n    return DOMParser.fromSchema(schema).parse(dom).toJSON();\n}\n\n/**\n * Gets the text of a Prosemirror node\n * @param node The Prosemirror node\n * @param options Options for the text serializer & block separator\n * @returns The text of the node\n * @example ```js\n * const text = getText(node, { blockSeparator: '\\n' })\n * ```\n */\nfunction getText(node, options) {\n    const range = {\n        from: 0,\n        to: node.content.size,\n    };\n    return getTextBetween(node, range, options);\n}\n\n/**\n * Generate raw text from a JSONContent\n * @param doc The JSONContent to generate text from\n * @param extensions The extensions to use for the schema\n * @param options Options for the text generation f.e. blockSeparator or textSerializers\n * @returns The generated text\n */\nfunction generateText(doc, extensions, options) {\n    const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {};\n    const schema = getSchema(extensions);\n    const contentNode = Node$1.fromJSON(schema, doc);\n    return getText(contentNode, {\n        blockSeparator,\n        textSerializers: {\n            ...getTextSerializersFromSchema(schema),\n            ...textSerializers,\n        },\n    });\n}\n\nfunction getNodeAttributes(state, typeOrName) {\n    const type = getNodeType(typeOrName, state.schema);\n    const { from, to } = state.selection;\n    const nodes = [];\n    state.doc.nodesBetween(from, to, node => {\n        nodes.push(node);\n    });\n    const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name);\n    if (!node) {\n        return {};\n    }\n    return { ...node.attrs };\n}\n\n/**\n * Get node or mark attributes by type or name on the current editor state\n * @param state The current editor state\n * @param typeOrName The node or mark type or name\n * @returns The attributes of the node or mark or an empty object\n */\nfunction getAttributes(state, typeOrName) {\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (schemaType === 'node') {\n        return getNodeAttributes(state, typeOrName);\n    }\n    if (schemaType === 'mark') {\n        return getMarkAttributes(state, typeOrName);\n    }\n    return {};\n}\n\n/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nfunction removeDuplicates(array, by = JSON.stringify) {\n    const seen = {};\n    return array.filter(item => {\n        const key = by(item);\n        return Object.prototype.hasOwnProperty.call(seen, key)\n            ? false\n            : (seen[key] = true);\n    });\n}\n\n/**\n * Removes duplicated ranges and ranges that are\n * fully captured by other ranges.\n */\nfunction simplifyChangedRanges(changes) {\n    const uniqueChanges = removeDuplicates(changes);\n    return uniqueChanges.length === 1\n        ? uniqueChanges\n        : uniqueChanges.filter((change, index) => {\n            const rest = uniqueChanges.filter((_, i) => i !== index);\n            return !rest.some(otherChange => {\n                return change.oldRange.from >= otherChange.oldRange.from\n                    && change.oldRange.to <= otherChange.oldRange.to\n                    && change.newRange.from >= otherChange.newRange.from\n                    && change.newRange.to <= otherChange.newRange.to;\n            });\n        });\n}\n/**\n * Returns a list of changed ranges\n * based on the first and last state of all steps.\n */\nfunction getChangedRanges(transform) {\n    const { mapping, steps } = transform;\n    const changes = [];\n    mapping.maps.forEach((stepMap, index) => {\n        const ranges = [];\n        // This accounts for step changes where no range was actually altered\n        // e.g. when setting a mark, node attribute, etc.\n        // @ts-ignore\n        if (!stepMap.ranges.length) {\n            const { from, to } = steps[index];\n            if (from === undefined || to === undefined) {\n                return;\n            }\n            ranges.push({ from, to });\n        }\n        else {\n            stepMap.forEach((from, to) => {\n                ranges.push({ from, to });\n            });\n        }\n        ranges.forEach(({ from, to }) => {\n            const newStart = mapping.slice(index).map(from, -1);\n            const newEnd = mapping.slice(index).map(to);\n            const oldStart = mapping.invert().map(newStart, -1);\n            const oldEnd = mapping.invert().map(newEnd);\n            changes.push({\n                oldRange: {\n                    from: oldStart,\n                    to: oldEnd,\n                },\n                newRange: {\n                    from: newStart,\n                    to: newEnd,\n                },\n            });\n        });\n    });\n    return simplifyChangedRanges(changes);\n}\n\nfunction getDebugJSON(node, startOffset = 0) {\n    const isTopNode = node.type === node.type.schema.topNodeType;\n    const increment = isTopNode ? 0 : 1;\n    const from = startOffset;\n    const to = from + node.nodeSize;\n    const marks = node.marks.map(mark => {\n        const output = {\n            type: mark.type.name,\n        };\n        if (Object.keys(mark.attrs).length) {\n            output.attrs = { ...mark.attrs };\n        }\n        return output;\n    });\n    const attrs = { ...node.attrs };\n    const output = {\n        type: node.type.name,\n        from,\n        to,\n    };\n    if (Object.keys(attrs).length) {\n        output.attrs = attrs;\n    }\n    if (marks.length) {\n        output.marks = marks;\n    }\n    if (node.content.childCount) {\n        output.content = [];\n        node.forEach((child, offset) => {\n            var _a;\n            (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));\n        });\n    }\n    if (node.text) {\n        output.text = node.text;\n    }\n    return output;\n}\n\nfunction getMarksBetween(from, to, doc) {\n    const marks = [];\n    // get all inclusive marks on empty selection\n    if (from === to) {\n        doc\n            .resolve(from)\n            .marks()\n            .forEach(mark => {\n            const $pos = doc.resolve(from);\n            const range = getMarkRange($pos, mark.type);\n            if (!range) {\n                return;\n            }\n            marks.push({\n                mark,\n                ...range,\n            });\n        });\n    }\n    else {\n        doc.nodesBetween(from, to, (node, pos) => {\n            if (!node || (node === null || node === void 0 ? void 0 : node.nodeSize) === undefined) {\n                return;\n            }\n            marks.push(...node.marks.map(mark => ({\n                from: pos,\n                to: pos + node.nodeSize,\n                mark,\n            })));\n        });\n    }\n    return marks;\n}\n\n/**\n * Finds the first node of a given type or name in the current selection.\n * @param state The editor state.\n * @param typeOrName The node type or name.\n * @param pos The position to start searching from.\n * @param maxDepth The maximum depth to search.\n * @returns The node and the depth as an array.\n */\nconst getNodeAtPosition = (state, typeOrName, pos, maxDepth = 20) => {\n    const $pos = state.doc.resolve(pos);\n    let currentDepth = maxDepth;\n    let node = null;\n    while (currentDepth > 0 && node === null) {\n        const currentNode = $pos.node(currentDepth);\n        if ((currentNode === null || currentNode === void 0 ? void 0 : currentNode.type.name) === typeOrName) {\n            node = currentNode;\n        }\n        else {\n            currentDepth -= 1;\n        }\n    }\n    return [node, currentDepth];\n};\n\n/**\n * Return attributes of an extension that should be splitted by keepOnSplit flag\n * @param extensionAttributes Array of extension attributes\n * @param typeName The type of the extension\n * @param attributes The attributes of the extension\n * @returns The splitted attributes\n */\nfunction getSplittedAttributes(extensionAttributes, typeName, attributes) {\n    return Object.fromEntries(Object\n        .entries(attributes)\n        .filter(([name]) => {\n        const extensionAttribute = extensionAttributes.find(item => {\n            return item.type === typeName && item.name === name;\n        });\n        if (!extensionAttribute) {\n            return false;\n        }\n        return extensionAttribute.attribute.keepOnSplit;\n    }));\n}\n\nfunction isMarkActive(state, typeOrName, attributes = {}) {\n    const { empty, ranges } = state.selection;\n    const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;\n    if (empty) {\n        return !!(state.storedMarks || state.selection.$from.marks())\n            .filter(mark => {\n            if (!type) {\n                return true;\n            }\n            return type.name === mark.type.name;\n        })\n            .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }));\n    }\n    let selectionRange = 0;\n    const markRanges = [];\n    ranges.forEach(({ $from, $to }) => {\n        const from = $from.pos;\n        const to = $to.pos;\n        state.doc.nodesBetween(from, to, (node, pos) => {\n            if (!node.isText && !node.marks.length) {\n                return;\n            }\n            const relativeFrom = Math.max(from, pos);\n            const relativeTo = Math.min(to, pos + node.nodeSize);\n            const range = relativeTo - relativeFrom;\n            selectionRange += range;\n            markRanges.push(...node.marks.map(mark => ({\n                mark,\n                from: relativeFrom,\n                to: relativeTo,\n            })));\n        });\n    });\n    if (selectionRange === 0) {\n        return false;\n    }\n    // calculate range of matched mark\n    const matchedRange = markRanges\n        .filter(markRange => {\n        if (!type) {\n            return true;\n        }\n        return type.name === markRange.mark.type.name;\n    })\n        .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))\n        .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\n    // calculate range of marks that excludes the searched mark\n    // for example `code` doesn’t allow any other marks\n    const excludedRange = markRanges\n        .filter(markRange => {\n        if (!type) {\n            return true;\n        }\n        return markRange.mark.type !== type && markRange.mark.type.excludes(type);\n    })\n        .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);\n    // we only include the result of `excludedRange`\n    // if there is a match at all\n    const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;\n    return range >= selectionRange;\n}\n\nfunction isActive(state, name, attributes = {}) {\n    if (!name) {\n        return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);\n    }\n    const schemaType = getSchemaTypeNameByName(name, state.schema);\n    if (schemaType === 'node') {\n        return isNodeActive(state, name, attributes);\n    }\n    if (schemaType === 'mark') {\n        return isMarkActive(state, name, attributes);\n    }\n    return false;\n}\n\nconst isAtEndOfNode = (state, nodeType) => {\n    const { $from, $to, $anchor } = state.selection;\n    if (nodeType) {\n        const parentNode = findParentNode(node => node.type.name === nodeType)(state.selection);\n        if (!parentNode) {\n            return false;\n        }\n        const $parentPos = state.doc.resolve(parentNode.pos + 1);\n        if ($anchor.pos + 1 === $parentPos.end()) {\n            return true;\n        }\n        return false;\n    }\n    if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {\n        return false;\n    }\n    return true;\n};\n\nconst isAtStartOfNode = (state) => {\n    const { $from, $to } = state.selection;\n    if ($from.parentOffset > 0 || $from.pos !== $to.pos) {\n        return false;\n    }\n    return true;\n};\n\nfunction isList(name, extensions) {\n    const { nodeExtensions } = splitExtensions(extensions);\n    const extension = nodeExtensions.find(item => item.name === name);\n    if (!extension) {\n        return false;\n    }\n    const context = {\n        name: extension.name,\n        options: extension.options,\n        storage: extension.storage,\n    };\n    const group = callOrReturn(getExtensionField(extension, 'group', context));\n    if (typeof group !== 'string') {\n        return false;\n    }\n    return group.split(' ').includes('list');\n}\n\n/**\n * Returns true if the given prosemirror node is empty.\n */\nfunction isNodeEmpty(node, { checkChildren = true, ignoreWhitespace = false, } = {}) {\n    var _a;\n    if (ignoreWhitespace) {\n        if (node.type.name === 'hardBreak') {\n            // Hard breaks are considered empty\n            return true;\n        }\n        if (node.isText) {\n            return /^\\s*$/m.test((_a = node.text) !== null && _a !== void 0 ? _a : '');\n        }\n    }\n    if (node.isText) {\n        return !node.text;\n    }\n    if (node.isAtom || node.isLeaf) {\n        return false;\n    }\n    if (node.content.childCount === 0) {\n        return true;\n    }\n    if (checkChildren) {\n        let isContentEmpty = true;\n        node.content.forEach(childNode => {\n            if (isContentEmpty === false) {\n                // Exit early for perf\n                return;\n            }\n            if (!isNodeEmpty(childNode, { ignoreWhitespace, checkChildren })) {\n                isContentEmpty = false;\n            }\n        });\n        return isContentEmpty;\n    }\n    return false;\n}\n\nfunction isNodeSelection(value) {\n    return value instanceof NodeSelection;\n}\n\nfunction posToDOMRect(view, from, to) {\n    const minPos = 0;\n    const maxPos = view.state.doc.content.size;\n    const resolvedFrom = minMax(from, minPos, maxPos);\n    const resolvedEnd = minMax(to, minPos, maxPos);\n    const start = view.coordsAtPos(resolvedFrom);\n    const end = view.coordsAtPos(resolvedEnd, -1);\n    const top = Math.min(start.top, end.top);\n    const bottom = Math.max(start.bottom, end.bottom);\n    const left = Math.min(start.left, end.left);\n    const right = Math.max(start.right, end.right);\n    const width = right - left;\n    const height = bottom - top;\n    const x = left;\n    const y = top;\n    const data = {\n        top,\n        bottom,\n        left,\n        right,\n        width,\n        height,\n        x,\n        y,\n    };\n    return {\n        ...data,\n        toJSON: () => data,\n    };\n}\n\nfunction canSetMark(state, tr, newMarkType) {\n    var _a;\n    const { selection } = tr;\n    let cursor = null;\n    if (isTextSelection(selection)) {\n        cursor = selection.$cursor;\n    }\n    if (cursor) {\n        const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();\n        // There can be no current marks that exclude the new mark\n        return (!!newMarkType.isInSet(currentMarks)\n            || !currentMarks.some(mark => mark.type.excludes(newMarkType)));\n    }\n    const { ranges } = selection;\n    return ranges.some(({ $from, $to }) => {\n        let someNodeSupportsMark = $from.depth === 0\n            ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType)\n            : false;\n        state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {\n            // If we already found a mark that we can enable, return false to bypass the remaining search\n            if (someNodeSupportsMark) {\n                return false;\n            }\n            if (node.isInline) {\n                const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);\n                const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks)\n                    || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType));\n                someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;\n            }\n            return !someNodeSupportsMark;\n        });\n        return someNodeSupportsMark;\n    });\n}\nconst setMark = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n    const { selection } = tr;\n    const { empty, ranges } = selection;\n    const type = getMarkType(typeOrName, state.schema);\n    if (dispatch) {\n        if (empty) {\n            const oldAttributes = getMarkAttributes(state, type);\n            tr.addStoredMark(type.create({\n                ...oldAttributes,\n                ...attributes,\n            }));\n        }\n        else {\n            ranges.forEach(range => {\n                const from = range.$from.pos;\n                const to = range.$to.pos;\n                state.doc.nodesBetween(from, to, (node, pos) => {\n                    const trimmedFrom = Math.max(pos, from);\n                    const trimmedTo = Math.min(pos + node.nodeSize, to);\n                    const someHasMark = node.marks.find(mark => mark.type === type);\n                    // if there is already a mark of this type\n                    // we know that we have to merge its attributes\n                    // otherwise we add a fresh new mark\n                    if (someHasMark) {\n                        node.marks.forEach(mark => {\n                            if (type === mark.type) {\n                                tr.addMark(trimmedFrom, trimmedTo, type.create({\n                                    ...mark.attrs,\n                                    ...attributes,\n                                }));\n                            }\n                        });\n                    }\n                    else {\n                        tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));\n                    }\n                });\n            });\n        }\n    }\n    return canSetMark(state, tr, type);\n};\n\nconst setMeta = (key, value) => ({ tr }) => {\n    tr.setMeta(key, value);\n    return true;\n};\n\nconst setNode = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    // TODO: use a fallback like insertContent?\n    if (!type.isTextblock) {\n        console.warn('[tiptap warn]: Currently \"setNode()\" only supports text block nodes.');\n        return false;\n    }\n    return (chain()\n        // try to convert node to default node if needed\n        .command(({ commands }) => {\n        const canSetBlock = setBlockType(type, attributes)(state);\n        if (canSetBlock) {\n            return true;\n        }\n        return commands.clearNodes();\n    })\n        .command(({ state: updatedState }) => {\n        return setBlockType(type, attributes)(updatedState, dispatch);\n    })\n        .run());\n};\n\nconst setNodeSelection = position => ({ tr, dispatch }) => {\n    if (dispatch) {\n        const { doc } = tr;\n        const from = minMax(position, 0, doc.content.size);\n        const selection = NodeSelection.create(doc, from);\n        tr.setSelection(selection);\n    }\n    return true;\n};\n\nconst setTextSelection = position => ({ tr, dispatch }) => {\n    if (dispatch) {\n        const { doc } = tr;\n        const { from, to } = typeof position === 'number' ? { from: position, to: position } : position;\n        const minPos = TextSelection.atStart(doc).from;\n        const maxPos = TextSelection.atEnd(doc).to;\n        const resolvedFrom = minMax(from, minPos, maxPos);\n        const resolvedEnd = minMax(to, minPos, maxPos);\n        const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd);\n        tr.setSelection(selection);\n    }\n    return true;\n};\n\nconst sinkListItem = typeOrName => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    return sinkListItem$1(type)(state, dispatch);\n};\n\nfunction ensureMarks(state, splittableMarks) {\n    const marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());\n    if (marks) {\n        const filteredMarks = marks.filter(mark => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));\n        state.tr.ensureMarks(filteredMarks);\n    }\n}\nconst splitBlock = ({ keepMarks = true } = {}) => ({ tr, state, dispatch, editor, }) => {\n    const { selection, doc } = tr;\n    const { $from, $to } = selection;\n    const extensionAttributes = editor.extensionManager.attributes;\n    const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);\n    if (selection instanceof NodeSelection && selection.node.isBlock) {\n        if (!$from.parentOffset || !canSplit(doc, $from.pos)) {\n            return false;\n        }\n        if (dispatch) {\n            if (keepMarks) {\n                ensureMarks(state, editor.extensionManager.splittableMarks);\n            }\n            tr.split($from.pos).scrollIntoView();\n        }\n        return true;\n    }\n    if (!$from.parent.isBlock) {\n        return false;\n    }\n    const atEnd = $to.parentOffset === $to.parent.content.size;\n    const deflt = $from.depth === 0\n        ? undefined\n        : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));\n    let types = atEnd && deflt\n        ? [\n            {\n                type: deflt,\n                attrs: newAttributes,\n            },\n        ]\n        : undefined;\n    let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);\n    if (!types\n        && !can\n        && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {\n        can = true;\n        types = deflt\n            ? [\n                {\n                    type: deflt,\n                    attrs: newAttributes,\n                },\n            ]\n            : undefined;\n    }\n    if (dispatch) {\n        if (can) {\n            if (selection instanceof TextSelection) {\n                tr.deleteSelection();\n            }\n            tr.split(tr.mapping.map($from.pos), 1, types);\n            if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {\n                const first = tr.mapping.map($from.before());\n                const $first = tr.doc.resolve(first);\n                if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {\n                    tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);\n                }\n            }\n        }\n        if (keepMarks) {\n            ensureMarks(state, editor.extensionManager.splittableMarks);\n        }\n        tr.scrollIntoView();\n    }\n    return can;\n};\n\nconst splitListItem = (typeOrName, overrideAttrs = {}) => ({ tr, state, dispatch, editor, }) => {\n    var _a;\n    const type = getNodeType(typeOrName, state.schema);\n    const { $from, $to } = state.selection;\n    // @ts-ignore\n    // eslint-disable-next-line\n    const node = state.selection.node;\n    if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {\n        return false;\n    }\n    const grandParent = $from.node(-1);\n    if (grandParent.type !== type) {\n        return false;\n    }\n    const extensionAttributes = editor.extensionManager.attributes;\n    if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {\n        // In an empty block. If this is a nested list, the wrapping\n        // list item should be split. Otherwise, bail out and let next\n        // command handle lifting.\n        if ($from.depth === 2\n            || $from.node(-3).type !== type\n            || $from.index(-2) !== $from.node(-2).childCount - 1) {\n            return false;\n        }\n        if (dispatch) {\n            let wrap = Fragment.empty;\n            // eslint-disable-next-line\n            const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;\n            // Build a fragment containing empty versions of the structure\n            // from the outer list item to the parent node of the cursor\n            for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {\n                wrap = Fragment.from($from.node(d).copy(wrap));\n            }\n            // eslint-disable-next-line\n            const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;\n            // Add a second list item with an empty default start node\n            const newNextTypeAttributes = {\n                ...getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs),\n                ...overrideAttrs,\n            };\n            const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;\n            wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined));\n            const start = $from.before($from.depth - (depthBefore - 1));\n            tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));\n            let sel = -1;\n            tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {\n                if (sel > -1) {\n                    return false;\n                }\n                if (n.isTextblock && n.content.size === 0) {\n                    sel = pos + 1;\n                }\n            });\n            if (sel > -1) {\n                tr.setSelection(TextSelection.near(tr.doc.resolve(sel)));\n            }\n            tr.scrollIntoView();\n        }\n        return true;\n    }\n    const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;\n    const newTypeAttributes = {\n        ...getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs),\n        ...overrideAttrs,\n    };\n    const newNextTypeAttributes = {\n        ...getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs),\n        ...overrideAttrs,\n    };\n    tr.delete($from.pos, $to.pos);\n    const types = nextType\n        ? [\n            { type, attrs: newTypeAttributes },\n            { type: nextType, attrs: newNextTypeAttributes },\n        ]\n        : [{ type, attrs: newTypeAttributes }];\n    if (!canSplit(tr.doc, $from.pos, 2)) {\n        return false;\n    }\n    if (dispatch) {\n        const { selection, storedMarks } = state;\n        const { splittableMarks } = editor.extensionManager;\n        const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());\n        tr.split($from.pos, 2, types).scrollIntoView();\n        if (!marks || !dispatch) {\n            return true;\n        }\n        const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n        tr.ensureMarks(filteredMarks);\n    }\n    return true;\n};\n\nconst joinListBackwards = (tr, listType) => {\n    const list = findParentNode(node => node.type === listType)(tr.selection);\n    if (!list) {\n        return true;\n    }\n    const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);\n    if (before === undefined) {\n        return true;\n    }\n    const nodeBefore = tr.doc.nodeAt(before);\n    const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && canJoin(tr.doc, list.pos);\n    if (!canJoinBackwards) {\n        return true;\n    }\n    tr.join(list.pos);\n    return true;\n};\nconst joinListForwards = (tr, listType) => {\n    const list = findParentNode(node => node.type === listType)(tr.selection);\n    if (!list) {\n        return true;\n    }\n    const after = tr.doc.resolve(list.start).after(list.depth);\n    if (after === undefined) {\n        return true;\n    }\n    const nodeAfter = tr.doc.nodeAt(after);\n    const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && canJoin(tr.doc, after);\n    if (!canJoinForwards) {\n        return true;\n    }\n    tr.join(after);\n    return true;\n};\nconst toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({ editor, tr, state, dispatch, chain, commands, can, }) => {\n    const { extensions, splittableMarks } = editor.extensionManager;\n    const listType = getNodeType(listTypeOrName, state.schema);\n    const itemType = getNodeType(itemTypeOrName, state.schema);\n    const { selection, storedMarks } = state;\n    const { $from, $to } = selection;\n    const range = $from.blockRange($to);\n    const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());\n    if (!range) {\n        return false;\n    }\n    const parentList = findParentNode(node => isList(node.type.name, extensions))(selection);\n    if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {\n        // remove list\n        if (parentList.node.type === listType) {\n            return commands.liftListItem(itemType);\n        }\n        // change list type\n        if (isList(parentList.node.type.name, extensions)\n            && listType.validContent(parentList.node.content)\n            && dispatch) {\n            return chain()\n                .command(() => {\n                tr.setNodeMarkup(parentList.pos, listType);\n                return true;\n            })\n                .command(() => joinListBackwards(tr, listType))\n                .command(() => joinListForwards(tr, listType))\n                .run();\n        }\n    }\n    if (!keepMarks || !marks || !dispatch) {\n        return chain()\n            // try to convert node to default node if needed\n            .command(() => {\n            const canWrapInList = can().wrapInList(listType, attributes);\n            if (canWrapInList) {\n                return true;\n            }\n            return commands.clearNodes();\n        })\n            .wrapInList(listType, attributes)\n            .command(() => joinListBackwards(tr, listType))\n            .command(() => joinListForwards(tr, listType))\n            .run();\n    }\n    return (chain()\n        // try to convert node to default node if needed\n        .command(() => {\n        const canWrapInList = can().wrapInList(listType, attributes);\n        const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n        tr.ensureMarks(filteredMarks);\n        if (canWrapInList) {\n            return true;\n        }\n        return commands.clearNodes();\n    })\n        .wrapInList(listType, attributes)\n        .command(() => joinListBackwards(tr, listType))\n        .command(() => joinListForwards(tr, listType))\n        .run());\n};\n\nconst toggleMark = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {\n    const { extendEmptyMarkRange = false } = options;\n    const type = getMarkType(typeOrName, state.schema);\n    const isActive = isMarkActive(state, type, attributes);\n    if (isActive) {\n        return commands.unsetMark(type, { extendEmptyMarkRange });\n    }\n    return commands.setMark(type, attributes);\n};\n\nconst toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    const toggleType = getNodeType(toggleTypeOrName, state.schema);\n    const isActive = isNodeActive(state, type, attributes);\n    if (isActive) {\n        return commands.setNode(toggleType);\n    }\n    return commands.setNode(type, attributes);\n};\n\nconst toggleWrap = (typeOrName, attributes = {}) => ({ state, commands }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    const isActive = isNodeActive(state, type, attributes);\n    if (isActive) {\n        return commands.lift(type);\n    }\n    return commands.wrapIn(type, attributes);\n};\n\nconst undoInputRule = () => ({ state, dispatch }) => {\n    const plugins = state.plugins;\n    for (let i = 0; i < plugins.length; i += 1) {\n        const plugin = plugins[i];\n        let undoable;\n        // @ts-ignore\n        // eslint-disable-next-line\n        if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {\n            if (dispatch) {\n                const tr = state.tr;\n                const toUndo = undoable.transform;\n                for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {\n                    tr.step(toUndo.steps[j].invert(toUndo.docs[j]));\n                }\n                if (undoable.text) {\n                    const marks = tr.doc.resolve(undoable.from).marks();\n                    tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));\n                }\n                else {\n                    tr.delete(undoable.from, undoable.to);\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n};\n\nconst unsetAllMarks = () => ({ tr, dispatch }) => {\n    const { selection } = tr;\n    const { empty, ranges } = selection;\n    if (empty) {\n        return true;\n    }\n    if (dispatch) {\n        ranges.forEach(range => {\n            tr.removeMark(range.$from.pos, range.$to.pos);\n        });\n    }\n    return true;\n};\n\nconst unsetMark = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {\n    var _a;\n    const { extendEmptyMarkRange = false } = options;\n    const { selection } = tr;\n    const type = getMarkType(typeOrName, state.schema);\n    const { $from, empty, ranges } = selection;\n    if (!dispatch) {\n        return true;\n    }\n    if (empty && extendEmptyMarkRange) {\n        let { from, to } = selection;\n        const attrs = (_a = $from.marks().find(mark => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;\n        const range = getMarkRange($from, type, attrs);\n        if (range) {\n            from = range.from;\n            to = range.to;\n        }\n        tr.removeMark(from, to, type);\n    }\n    else {\n        ranges.forEach(range => {\n            tr.removeMark(range.$from.pos, range.$to.pos, type);\n        });\n    }\n    tr.removeStoredMark(type);\n    return true;\n};\n\nconst updateAttributes = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {\n    let nodeType = null;\n    let markType = null;\n    const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);\n    if (!schemaType) {\n        return false;\n    }\n    if (schemaType === 'node') {\n        nodeType = getNodeType(typeOrName, state.schema);\n    }\n    if (schemaType === 'mark') {\n        markType = getMarkType(typeOrName, state.schema);\n    }\n    if (dispatch) {\n        tr.selection.ranges.forEach(range => {\n            const from = range.$from.pos;\n            const to = range.$to.pos;\n            state.doc.nodesBetween(from, to, (node, pos) => {\n                if (nodeType && nodeType === node.type) {\n                    tr.setNodeMarkup(pos, undefined, {\n                        ...node.attrs,\n                        ...attributes,\n                    });\n                }\n                if (markType && node.marks.length) {\n                    node.marks.forEach(mark => {\n                        if (markType === mark.type) {\n                            const trimmedFrom = Math.max(pos, from);\n                            const trimmedTo = Math.min(pos + node.nodeSize, to);\n                            tr.addMark(trimmedFrom, trimmedTo, markType.create({\n                                ...mark.attrs,\n                                ...attributes,\n                            }));\n                        }\n                    });\n                }\n            });\n        });\n    }\n    return true;\n};\n\nconst wrapIn = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    return wrapIn$1(type, attributes)(state, dispatch);\n};\n\nconst wrapInList = (typeOrName, attributes = {}) => ({ state, dispatch }) => {\n    const type = getNodeType(typeOrName, state.schema);\n    return wrapInList$1(type, attributes)(state, dispatch);\n};\n\nvar commands = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  blur: blur,\n  clearContent: clearContent,\n  clearNodes: clearNodes,\n  command: command,\n  createParagraphNear: createParagraphNear,\n  cut: cut,\n  deleteCurrentNode: deleteCurrentNode,\n  deleteNode: deleteNode,\n  deleteRange: deleteRange,\n  deleteSelection: deleteSelection,\n  enter: enter,\n  exitCode: exitCode,\n  extendMarkRange: extendMarkRange,\n  first: first,\n  focus: focus,\n  forEach: forEach,\n  insertContent: insertContent,\n  insertContentAt: insertContentAt,\n  joinBackward: joinBackward,\n  joinDown: joinDown,\n  joinForward: joinForward,\n  joinItemBackward: joinItemBackward,\n  joinItemForward: joinItemForward,\n  joinTextblockBackward: joinTextblockBackward,\n  joinTextblockForward: joinTextblockForward,\n  joinUp: joinUp,\n  keyboardShortcut: keyboardShortcut,\n  lift: lift,\n  liftEmptyBlock: liftEmptyBlock,\n  liftListItem: liftListItem,\n  newlineInCode: newlineInCode,\n  resetAttributes: resetAttributes,\n  scrollIntoView: scrollIntoView,\n  selectAll: selectAll,\n  selectNodeBackward: selectNodeBackward,\n  selectNodeForward: selectNodeForward,\n  selectParentNode: selectParentNode,\n  selectTextblockEnd: selectTextblockEnd,\n  selectTextblockStart: selectTextblockStart,\n  setContent: setContent,\n  setMark: setMark,\n  setMeta: setMeta,\n  setNode: setNode,\n  setNodeSelection: setNodeSelection,\n  setTextSelection: setTextSelection,\n  sinkListItem: sinkListItem,\n  splitBlock: splitBlock,\n  splitListItem: splitListItem,\n  toggleList: toggleList,\n  toggleMark: toggleMark,\n  toggleNode: toggleNode,\n  toggleWrap: toggleWrap,\n  undoInputRule: undoInputRule,\n  unsetAllMarks: unsetAllMarks,\n  unsetMark: unsetMark,\n  updateAttributes: updateAttributes,\n  wrapIn: wrapIn,\n  wrapInList: wrapInList\n});\n\nconst Commands = Extension.create({\n    name: 'commands',\n    addCommands() {\n        return {\n            ...commands,\n        };\n    },\n});\n\nconst Editable = Extension.create({\n    name: 'editable',\n    addProseMirrorPlugins() {\n        return [\n            new Plugin({\n                key: new PluginKey('editable'),\n                props: {\n                    editable: () => this.editor.options.editable,\n                },\n            }),\n        ];\n    },\n});\n\nconst FocusEvents = Extension.create({\n    name: 'focusEvents',\n    addProseMirrorPlugins() {\n        const { editor } = this;\n        return [\n            new Plugin({\n                key: new PluginKey('focusEvents'),\n                props: {\n                    handleDOMEvents: {\n                        focus: (view, event) => {\n                            editor.isFocused = true;\n                            const transaction = editor.state.tr\n                                .setMeta('focus', { event })\n                                .setMeta('addToHistory', false);\n                            view.dispatch(transaction);\n                            return false;\n                        },\n                        blur: (view, event) => {\n                            editor.isFocused = false;\n                            const transaction = editor.state.tr\n                                .setMeta('blur', { event })\n                                .setMeta('addToHistory', false);\n                            view.dispatch(transaction);\n                            return false;\n                        },\n                    },\n                },\n            }),\n        ];\n    },\n});\n\nconst Keymap = Extension.create({\n    name: 'keymap',\n    addKeyboardShortcuts() {\n        const handleBackspace = () => this.editor.commands.first(({ commands }) => [\n            () => commands.undoInputRule(),\n            // maybe convert first text block node to default node\n            () => commands.command(({ tr }) => {\n                const { selection, doc } = tr;\n                const { empty, $anchor } = selection;\n                const { pos, parent } = $anchor;\n                const $parentPos = $anchor.parent.isTextblock && pos > 0 ? tr.doc.resolve(pos - 1) : $anchor;\n                const parentIsIsolating = $parentPos.parent.type.spec.isolating;\n                const parentPos = $anchor.pos - $anchor.parentOffset;\n                const isAtStart = (parentIsIsolating && $parentPos.parent.childCount === 1)\n                    ? parentPos === $anchor.pos\n                    : Selection.atStart(doc).from === pos;\n                if (!empty\n                    || !parent.type.isTextblock\n                    || parent.textContent.length\n                    || !isAtStart\n                    || (isAtStart && $anchor.parent.type.name === 'paragraph') // prevent clearNodes when no nodes to clear, otherwise history stack is appended\n                ) {\n                    return false;\n                }\n                return commands.clearNodes();\n            }),\n            () => commands.deleteSelection(),\n            () => commands.joinBackward(),\n            () => commands.selectNodeBackward(),\n        ]);\n        const handleDelete = () => this.editor.commands.first(({ commands }) => [\n            () => commands.deleteSelection(),\n            () => commands.deleteCurrentNode(),\n            () => commands.joinForward(),\n            () => commands.selectNodeForward(),\n        ]);\n        const handleEnter = () => this.editor.commands.first(({ commands }) => [\n            () => commands.newlineInCode(),\n            () => commands.createParagraphNear(),\n            () => commands.liftEmptyBlock(),\n            () => commands.splitBlock(),\n        ]);\n        const baseKeymap = {\n            Enter: handleEnter,\n            'Mod-Enter': () => this.editor.commands.exitCode(),\n            Backspace: handleBackspace,\n            'Mod-Backspace': handleBackspace,\n            'Shift-Backspace': handleBackspace,\n            Delete: handleDelete,\n            'Mod-Delete': handleDelete,\n            'Mod-a': () => this.editor.commands.selectAll(),\n        };\n        const pcKeymap = {\n            ...baseKeymap,\n        };\n        const macKeymap = {\n            ...baseKeymap,\n            'Ctrl-h': handleBackspace,\n            'Alt-Backspace': handleBackspace,\n            'Ctrl-d': handleDelete,\n            'Ctrl-Alt-Backspace': handleDelete,\n            'Alt-Delete': handleDelete,\n            'Alt-d': handleDelete,\n            'Ctrl-a': () => this.editor.commands.selectTextblockStart(),\n            'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),\n        };\n        if (isiOS() || isMacOS()) {\n            return macKeymap;\n        }\n        return pcKeymap;\n    },\n    addProseMirrorPlugins() {\n        return [\n            // With this plugin we check if the whole document was selected and deleted.\n            // In this case we will additionally call `clearNodes()` to convert e.g. a heading\n            // to a paragraph if necessary.\n            // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well\n            // with many other commands.\n            new Plugin({\n                key: new PluginKey('clearDocument'),\n                appendTransaction: (transactions, oldState, newState) => {\n                    const docChanges = transactions.some(transaction => transaction.docChanged)\n                        && !oldState.doc.eq(newState.doc);\n                    if (!docChanges) {\n                        return;\n                    }\n                    const { empty, from, to } = oldState.selection;\n                    const allFrom = Selection.atStart(oldState.doc).from;\n                    const allEnd = Selection.atEnd(oldState.doc).to;\n                    const allWasSelected = from === allFrom && to === allEnd;\n                    if (empty || !allWasSelected) {\n                        return;\n                    }\n                    const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0;\n                    if (!isEmpty) {\n                        return;\n                    }\n                    const tr = newState.tr;\n                    const state = createChainableState({\n                        state: newState,\n                        transaction: tr,\n                    });\n                    const { commands } = new CommandManager({\n                        editor: this.editor,\n                        state,\n                    });\n                    commands.clearNodes();\n                    if (!tr.steps.length) {\n                        return;\n                    }\n                    return tr;\n                },\n            }),\n        ];\n    },\n});\n\nconst Tabindex = Extension.create({\n    name: 'tabindex',\n    addProseMirrorPlugins() {\n        return [\n            new Plugin({\n                key: new PluginKey('tabindex'),\n                props: {\n                    attributes: () => (this.editor.isEditable ? { tabindex: '0' } : {}),\n                },\n            }),\n        ];\n    },\n});\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ClipboardTextSerializer: ClipboardTextSerializer,\n  Commands: Commands,\n  Editable: Editable,\n  FocusEvents: FocusEvents,\n  Keymap: Keymap,\n  Tabindex: Tabindex\n});\n\nclass NodePos {\n    get name() {\n        return this.node.type.name;\n    }\n    constructor(pos, editor, isBlock = false, node = null) {\n        this.currentNode = null;\n        this.actualDepth = null;\n        this.isBlock = isBlock;\n        this.resolvedPos = pos;\n        this.editor = editor;\n        this.currentNode = node;\n    }\n    get node() {\n        return this.currentNode || this.resolvedPos.node();\n    }\n    get element() {\n        return this.editor.view.domAtPos(this.pos).node;\n    }\n    get depth() {\n        var _a;\n        return (_a = this.actualDepth) !== null && _a !== void 0 ? _a : this.resolvedPos.depth;\n    }\n    get pos() {\n        return this.resolvedPos.pos;\n    }\n    get content() {\n        return this.node.content;\n    }\n    set content(content) {\n        let from = this.from;\n        let to = this.to;\n        if (this.isBlock) {\n            if (this.content.size === 0) {\n                console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);\n                return;\n            }\n            from = this.from + 1;\n            to = this.to - 1;\n        }\n        this.editor.commands.insertContentAt({ from, to }, content);\n    }\n    get attributes() {\n        return this.node.attrs;\n    }\n    get textContent() {\n        return this.node.textContent;\n    }\n    get size() {\n        return this.node.nodeSize;\n    }\n    get from() {\n        if (this.isBlock) {\n            return this.pos;\n        }\n        return this.resolvedPos.start(this.resolvedPos.depth);\n    }\n    get range() {\n        return {\n            from: this.from,\n            to: this.to,\n        };\n    }\n    get to() {\n        if (this.isBlock) {\n            return this.pos + this.size;\n        }\n        return this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);\n    }\n    get parent() {\n        if (this.depth === 0) {\n            return null;\n        }\n        const parentPos = this.resolvedPos.start(this.resolvedPos.depth - 1);\n        const $pos = this.resolvedPos.doc.resolve(parentPos);\n        return new NodePos($pos, this.editor);\n    }\n    get before() {\n        let $pos = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));\n        if ($pos.depth !== this.depth) {\n            $pos = this.resolvedPos.doc.resolve(this.from - 3);\n        }\n        return new NodePos($pos, this.editor);\n    }\n    get after() {\n        let $pos = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));\n        if ($pos.depth !== this.depth) {\n            $pos = this.resolvedPos.doc.resolve(this.to + 3);\n        }\n        return new NodePos($pos, this.editor);\n    }\n    get children() {\n        const children = [];\n        this.node.content.forEach((node, offset) => {\n            const isBlock = node.isBlock && !node.isTextblock;\n            const targetPos = this.pos + offset + 1;\n            const $pos = this.resolvedPos.doc.resolve(targetPos);\n            if (!isBlock && $pos.depth <= this.depth) {\n                return;\n            }\n            const childNodePos = new NodePos($pos, this.editor, isBlock, isBlock ? node : null);\n            if (isBlock) {\n                childNodePos.actualDepth = this.depth + 1;\n            }\n            children.push(new NodePos($pos, this.editor, isBlock, isBlock ? node : null));\n        });\n        return children;\n    }\n    get firstChild() {\n        return this.children[0] || null;\n    }\n    get lastChild() {\n        const children = this.children;\n        return children[children.length - 1] || null;\n    }\n    closest(selector, attributes = {}) {\n        let node = null;\n        let currentNode = this.parent;\n        while (currentNode && !node) {\n            if (currentNode.node.type.name === selector) {\n                if (Object.keys(attributes).length > 0) {\n                    const nodeAttributes = currentNode.node.attrs;\n                    const attrKeys = Object.keys(attributes);\n                    for (let index = 0; index < attrKeys.length; index += 1) {\n                        const key = attrKeys[index];\n                        if (nodeAttributes[key] !== attributes[key]) {\n                            break;\n                        }\n                    }\n                }\n                else {\n                    node = currentNode;\n                }\n            }\n            currentNode = currentNode.parent;\n        }\n        return node;\n    }\n    querySelector(selector, attributes = {}) {\n        return this.querySelectorAll(selector, attributes, true)[0] || null;\n    }\n    querySelectorAll(selector, attributes = {}, firstItemOnly = false) {\n        let nodes = [];\n        if (!this.children || this.children.length === 0) {\n            return nodes;\n        }\n        const attrKeys = Object.keys(attributes);\n        /**\n         * Finds all children recursively that match the selector and attributes\n         * If firstItemOnly is true, it will return the first item found\n         */\n        this.children.forEach(childPos => {\n            // If we already found a node and we only want the first item, we dont need to keep going\n            if (firstItemOnly && nodes.length > 0) {\n                return;\n            }\n            if (childPos.node.type.name === selector) {\n                const doesAllAttributesMatch = attrKeys.every(key => attributes[key] === childPos.node.attrs[key]);\n                if (doesAllAttributesMatch) {\n                    nodes.push(childPos);\n                }\n            }\n            // If we already found a node and we only want the first item, we can stop here and skip the recursion\n            if (firstItemOnly && nodes.length > 0) {\n                return;\n            }\n            nodes = nodes.concat(childPos.querySelectorAll(selector, attributes, firstItemOnly));\n        });\n        return nodes;\n    }\n    setAttribute(attributes) {\n        const oldSelection = this.editor.state.selection;\n        this.editor.chain().setTextSelection(this.from).updateAttributes(this.node.type.name, attributes).setTextSelection(oldSelection.from)\n            .run();\n    }\n}\n\nconst style = `.ProseMirror {\n  position: relative;\n}\n\n.ProseMirror {\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  white-space: break-spaces;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  font-feature-settings: \"liga\" 0; /* the above doesn't seem to work in Edge */\n}\n\n.ProseMirror [contenteditable=\"false\"] {\n  white-space: normal;\n}\n\n.ProseMirror [contenteditable=\"false\"] [contenteditable=\"true\"] {\n  white-space: pre-wrap;\n}\n\n.ProseMirror pre {\n  white-space: pre-wrap;\n}\n\nimg.ProseMirror-separator {\n  display: inline !important;\n  border: none !important;\n  margin: 0 !important;\n  width: 0 !important;\n  height: 0 !important;\n}\n\n.ProseMirror-gapcursor {\n  display: none;\n  pointer-events: none;\n  position: absolute;\n  margin: 0;\n}\n\n.ProseMirror-gapcursor:after {\n  content: \"\";\n  display: block;\n  position: absolute;\n  top: -2px;\n  width: 20px;\n  border-top: 1px solid black;\n  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;\n}\n\n@keyframes ProseMirror-cursor-blink {\n  to {\n    visibility: hidden;\n  }\n}\n\n.ProseMirror-hideselection *::selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection *::-moz-selection {\n  background: transparent;\n}\n\n.ProseMirror-hideselection * {\n  caret-color: transparent;\n}\n\n.ProseMirror-focused .ProseMirror-gapcursor {\n  display: block;\n}\n\n.tippy-box[data-animation=fade][data-state=hidden] {\n  opacity: 0\n}`;\n\nfunction createStyleTag(style, nonce, suffix) {\n    const tiptapStyleTag = document.querySelector(`style[data-tiptap-style${suffix ? `-${suffix}` : ''}]`);\n    if (tiptapStyleTag !== null) {\n        return tiptapStyleTag;\n    }\n    const styleNode = document.createElement('style');\n    if (nonce) {\n        styleNode.setAttribute('nonce', nonce);\n    }\n    styleNode.setAttribute(`data-tiptap-style${suffix ? `-${suffix}` : ''}`, '');\n    styleNode.innerHTML = style;\n    document.getElementsByTagName('head')[0].appendChild(styleNode);\n    return styleNode;\n}\n\nclass Editor extends EventEmitter {\n    constructor(options = {}) {\n        super();\n        this.isFocused = false;\n        /**\n         * The editor is considered initialized after the `create` event has been emitted.\n         */\n        this.isInitialized = false;\n        this.extensionStorage = {};\n        this.options = {\n            element: document.createElement('div'),\n            content: '',\n            injectCSS: true,\n            injectNonce: undefined,\n            extensions: [],\n            autofocus: false,\n            editable: true,\n            editorProps: {},\n            parseOptions: {},\n            coreExtensionOptions: {},\n            enableInputRules: true,\n            enablePasteRules: true,\n            enableCoreExtensions: true,\n            enableContentCheck: false,\n            onBeforeCreate: () => null,\n            onCreate: () => null,\n            onUpdate: () => null,\n            onSelectionUpdate: () => null,\n            onTransaction: () => null,\n            onFocus: () => null,\n            onBlur: () => null,\n            onDestroy: () => null,\n            onContentError: ({ error }) => { throw error; },\n        };\n        this.isCapturingTransaction = false;\n        this.capturedTransaction = null;\n        this.setOptions(options);\n        this.createExtensionManager();\n        this.createCommandManager();\n        this.createSchema();\n        this.on('beforeCreate', this.options.onBeforeCreate);\n        this.emit('beforeCreate', { editor: this });\n        this.on('contentError', this.options.onContentError);\n        this.createView();\n        this.injectCSS();\n        this.on('create', this.options.onCreate);\n        this.on('update', this.options.onUpdate);\n        this.on('selectionUpdate', this.options.onSelectionUpdate);\n        this.on('transaction', this.options.onTransaction);\n        this.on('focus', this.options.onFocus);\n        this.on('blur', this.options.onBlur);\n        this.on('destroy', this.options.onDestroy);\n        window.setTimeout(() => {\n            if (this.isDestroyed) {\n                return;\n            }\n            this.commands.focus(this.options.autofocus);\n            this.emit('create', { editor: this });\n            this.isInitialized = true;\n        }, 0);\n    }\n    /**\n     * Returns the editor storage.\n     */\n    get storage() {\n        return this.extensionStorage;\n    }\n    /**\n     * An object of all registered commands.\n     */\n    get commands() {\n        return this.commandManager.commands;\n    }\n    /**\n     * Create a command chain to call multiple commands at once.\n     */\n    chain() {\n        return this.commandManager.chain();\n    }\n    /**\n     * Check if a command or a command chain can be executed. Without executing it.\n     */\n    can() {\n        return this.commandManager.can();\n    }\n    /**\n     * Inject CSS styles.\n     */\n    injectCSS() {\n        if (this.options.injectCSS && document) {\n            this.css = createStyleTag(style, this.options.injectNonce);\n        }\n    }\n    /**\n     * Update editor options.\n     *\n     * @param options A list of options\n     */\n    setOptions(options = {}) {\n        this.options = {\n            ...this.options,\n            ...options,\n        };\n        if (!this.view || !this.state || this.isDestroyed) {\n            return;\n        }\n        if (this.options.editorProps) {\n            this.view.setProps(this.options.editorProps);\n        }\n        this.view.updateState(this.state);\n    }\n    /**\n     * Update editable state of the editor.\n     */\n    setEditable(editable, emitUpdate = true) {\n        this.setOptions({ editable });\n        if (emitUpdate) {\n            this.emit('update', { editor: this, transaction: this.state.tr });\n        }\n    }\n    /**\n     * Returns whether the editor is editable.\n     */\n    get isEditable() {\n        // since plugins are applied after creating the view\n        // `editable` is always `true` for one tick.\n        // that’s why we also have to check for `options.editable`\n        return this.options.editable && this.view && this.view.editable;\n    }\n    /**\n     * Returns the editor state.\n     */\n    get state() {\n        return this.view.state;\n    }\n    /**\n     * Register a ProseMirror plugin.\n     *\n     * @param plugin A ProseMirror plugin\n     * @param handlePlugins Control how to merge the plugin into the existing plugins.\n     */\n    registerPlugin(plugin, handlePlugins) {\n        const plugins = isFunction(handlePlugins)\n            ? handlePlugins(plugin, [...this.state.plugins])\n            : [...this.state.plugins, plugin];\n        const state = this.state.reconfigure({ plugins });\n        this.view.updateState(state);\n    }\n    /**\n     * Unregister a ProseMirror plugin.\n     *\n     * @param nameOrPluginKey The plugins name\n     */\n    unregisterPlugin(nameOrPluginKey) {\n        if (this.isDestroyed) {\n            return;\n        }\n        // @ts-ignore\n        const name = typeof nameOrPluginKey === 'string' ? `${nameOrPluginKey}$` : nameOrPluginKey.key;\n        const state = this.state.reconfigure({\n            // @ts-ignore\n            plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),\n        });\n        this.view.updateState(state);\n    }\n    /**\n     * Creates an extension manager.\n     */\n    createExtensionManager() {\n        var _a, _b;\n        const coreExtensions = this.options.enableCoreExtensions ? [\n            Editable,\n            ClipboardTextSerializer.configure({\n                blockSeparator: (_b = (_a = this.options.coreExtensionOptions) === null || _a === void 0 ? void 0 : _a.clipboardTextSerializer) === null || _b === void 0 ? void 0 : _b.blockSeparator,\n            }),\n            Commands,\n            FocusEvents,\n            Keymap,\n            Tabindex,\n        ] : [];\n        const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {\n            return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);\n        });\n        this.extensionManager = new ExtensionManager(allExtensions, this);\n    }\n    /**\n     * Creates an command manager.\n     */\n    createCommandManager() {\n        this.commandManager = new CommandManager({\n            editor: this,\n        });\n    }\n    /**\n     * Creates a ProseMirror schema.\n     */\n    createSchema() {\n        this.schema = this.extensionManager.schema;\n    }\n    /**\n     * Creates a ProseMirror view.\n     */\n    createView() {\n        let doc;\n        try {\n            doc = createDocument(this.options.content, this.schema, this.options.parseOptions, { errorOnInvalidContent: this.options.enableContentCheck });\n        }\n        catch (e) {\n            if (!(e instanceof Error) || !['[tiptap error]: Invalid JSON content', '[tiptap error]: Invalid HTML content'].includes(e.message)) {\n                // Not the content error we were expecting\n                throw e;\n            }\n            this.emit('contentError', {\n                editor: this,\n                error: e,\n                disableCollaboration: () => {\n                    // To avoid syncing back invalid content, reinitialize the extensions without the collaboration extension\n                    this.options.extensions = this.options.extensions.filter(extension => extension.name !== 'collaboration');\n                    // Restart the initialization process by recreating the extension manager with the new set of extensions\n                    this.createExtensionManager();\n                },\n            });\n            // Content is invalid, but attempt to create it anyway, stripping out the invalid parts\n            doc = createDocument(this.options.content, this.schema, this.options.parseOptions, { errorOnInvalidContent: false });\n        }\n        const selection = resolveFocusPosition(doc, this.options.autofocus);\n        this.view = new EditorView(this.options.element, {\n            ...this.options.editorProps,\n            dispatchTransaction: this.dispatchTransaction.bind(this),\n            state: EditorState.create({\n                doc,\n                selection: selection || undefined,\n            }),\n        });\n        // `editor.view` is not yet available at this time.\n        // Therefore we will add all plugins and node views directly afterwards.\n        const newState = this.state.reconfigure({\n            plugins: this.extensionManager.plugins,\n        });\n        this.view.updateState(newState);\n        this.createNodeViews();\n        this.prependClass();\n        // Let’s store the editor instance in the DOM element.\n        // So we’ll have access to it for tests.\n        // @ts-ignore\n        const dom = this.view.dom;\n        dom.editor = this;\n    }\n    /**\n     * Creates all node views.\n     */\n    createNodeViews() {\n        if (this.view.isDestroyed) {\n            return;\n        }\n        this.view.setProps({\n            nodeViews: this.extensionManager.nodeViews,\n        });\n    }\n    /**\n     * Prepend class name to element.\n     */\n    prependClass() {\n        this.view.dom.className = `tiptap ${this.view.dom.className}`;\n    }\n    captureTransaction(fn) {\n        this.isCapturingTransaction = true;\n        fn();\n        this.isCapturingTransaction = false;\n        const tr = this.capturedTransaction;\n        this.capturedTransaction = null;\n        return tr;\n    }\n    /**\n     * The callback over which to send transactions (state updates) produced by the view.\n     *\n     * @param transaction An editor state transaction\n     */\n    dispatchTransaction(transaction) {\n        // if the editor / the view of the editor was destroyed\n        // the transaction should not be dispatched as there is no view anymore.\n        if (this.view.isDestroyed) {\n            return;\n        }\n        if (this.isCapturingTransaction) {\n            if (!this.capturedTransaction) {\n                this.capturedTransaction = transaction;\n                return;\n            }\n            transaction.steps.forEach(step => { var _a; return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step); });\n            return;\n        }\n        const state = this.state.apply(transaction);\n        const selectionHasChanged = !this.state.selection.eq(state.selection);\n        this.emit('beforeTransaction', {\n            editor: this,\n            transaction,\n            nextState: state,\n        });\n        this.view.updateState(state);\n        this.emit('transaction', {\n            editor: this,\n            transaction,\n        });\n        if (selectionHasChanged) {\n            this.emit('selectionUpdate', {\n                editor: this,\n                transaction,\n            });\n        }\n        const focus = transaction.getMeta('focus');\n        const blur = transaction.getMeta('blur');\n        if (focus) {\n            this.emit('focus', {\n                editor: this,\n                event: focus.event,\n                transaction,\n            });\n        }\n        if (blur) {\n            this.emit('blur', {\n                editor: this,\n                event: blur.event,\n                transaction,\n            });\n        }\n        if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {\n            return;\n        }\n        this.emit('update', {\n            editor: this,\n            transaction,\n        });\n    }\n    /**\n     * Get attributes of the currently selected node or mark.\n     */\n    getAttributes(nameOrType) {\n        return getAttributes(this.state, nameOrType);\n    }\n    isActive(nameOrAttributes, attributesOrUndefined) {\n        const name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null;\n        const attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes;\n        return isActive(this.state, name, attributes);\n    }\n    /**\n     * Get the document as JSON.\n     */\n    getJSON() {\n        return this.state.doc.toJSON();\n    }\n    /**\n     * Get the document as HTML.\n     */\n    getHTML() {\n        return getHTMLFromFragment(this.state.doc.content, this.schema);\n    }\n    /**\n     * Get the document as text.\n     */\n    getText(options) {\n        const { blockSeparator = '\\n\\n', textSerializers = {} } = options || {};\n        return getText(this.state.doc, {\n            blockSeparator,\n            textSerializers: {\n                ...getTextSerializersFromSchema(this.schema),\n                ...textSerializers,\n            },\n        });\n    }\n    /**\n     * Check if there is no content.\n     */\n    get isEmpty() {\n        return isNodeEmpty(this.state.doc);\n    }\n    /**\n     * Get the number of characters for the current document.\n     *\n     * @deprecated\n     */\n    getCharacterCount() {\n        console.warn('[tiptap warn]: \"editor.getCharacterCount()\" is deprecated. Please use \"editor.storage.characterCount.characters()\" instead.');\n        return this.state.doc.content.size - 2;\n    }\n    /**\n     * Destroy the editor.\n     */\n    destroy() {\n        this.emit('destroy');\n        if (this.view) {\n            this.view.destroy();\n        }\n        this.removeAllListeners();\n    }\n    /**\n     * Check if the editor is already destroyed.\n     */\n    get isDestroyed() {\n        var _a;\n        // @ts-ignore\n        return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);\n    }\n    $node(selector, attributes) {\n        var _a;\n        return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelector(selector, attributes)) || null;\n    }\n    $nodes(selector, attributes) {\n        var _a;\n        return ((_a = this.$doc) === null || _a === void 0 ? void 0 : _a.querySelectorAll(selector, attributes)) || null;\n    }\n    $pos(pos) {\n        const $pos = this.state.doc.resolve(pos);\n        return new NodePos($pos, this);\n    }\n    get $doc() {\n        return this.$pos(0);\n    }\n}\n\n/**\n * Build an input rule that adds a mark when the\n * matched text is typed into it.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction markInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            const attributes = callOrReturn(config.getAttributes, undefined, match);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const { tr } = state;\n            const captureGroup = match[match.length - 1];\n            const fullMatch = match[0];\n            if (captureGroup) {\n                const startSpaces = fullMatch.search(/\\S/);\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\n                const textEnd = textStart + captureGroup.length;\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n                    .filter(item => {\n                    // @ts-ignore\n                    const excluded = item.mark.type.excluded;\n                    return excluded.find(type => type === config.type && type !== item.mark.type);\n                })\n                    .filter(item => item.to > textStart);\n                if (excludedMarks.length) {\n                    return null;\n                }\n                if (textEnd < range.to) {\n                    tr.delete(textEnd, range.to);\n                }\n                if (textStart > range.from) {\n                    tr.delete(range.from + startSpaces, textStart);\n                }\n                const markEnd = range.from + startSpaces + captureGroup.length;\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n                tr.removeStoredMark(config.type);\n            }\n        },\n    });\n}\n\n/**\n * Build an input rule that adds a node when the\n * matched text is typed into it.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction nodeInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            const { tr } = state;\n            const start = range.from;\n            let end = range.to;\n            const newNode = config.type.create(attributes);\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                let matchStart = start + offset;\n                if (matchStart > end) {\n                    matchStart = end;\n                }\n                else {\n                    end = matchStart + match[1].length;\n                }\n                // insert last typed character\n                const lastChar = match[0][match[0].length - 1];\n                tr.insertText(lastChar, start + match[0].length - 1);\n                // insert node from input rule\n                tr.replaceWith(matchStart, end, newNode);\n            }\n            else if (match[0]) {\n                const insertionStart = config.type.isInline ? start : start - 1;\n                tr.insert(insertionStart, config.type.create(attributes)).delete(tr.mapping.map(start), tr.mapping.map(end));\n            }\n            tr.scrollIntoView();\n        },\n    });\n}\n\n/**\n * Build an input rule that changes the type of a textblock when the\n * matched text is typed into it. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction textblockTypeInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            const $start = state.doc.resolve(range.from);\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {\n                return null;\n            }\n            state.tr\n                .delete(range.from, range.to)\n                .setBlockType(range.from, range.from, config.type, attributes);\n        },\n    });\n}\n\n/**\n * Build an input rule that replaces text when the\n * matched text is typed into it.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction textInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            let insert = config.replace;\n            let start = range.from;\n            const end = range.to;\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                insert += match[0].slice(offset + match[1].length);\n                start += offset;\n                const cutOff = start - end;\n                if (cutOff > 0) {\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\n                    start = end;\n                }\n            }\n            state.tr.insertText(insert, start, end);\n        },\n    });\n}\n\n/**\n * Build an input rule for automatically wrapping a textblock when a\n * given string is typed. When using a regular expresion you’ll\n * probably want the regexp to start with `^`, so that the pattern can\n * only occur at the start of a textblock.\n *\n * `type` is the type of node to wrap in.\n *\n * By default, if there’s a node with the same type above the newly\n * wrapped node, the rule will try to join those\n * two nodes. You can pass a join predicate, which takes a regular\n * expression match and the node before the wrapped node, and can\n * return a boolean to indicate whether a join should happen.\n * @see https://tiptap.dev/guide/custom-extensions/#input-rules\n */\nfunction wrappingInputRule(config) {\n    return new InputRule({\n        find: config.find,\n        handler: ({ state, range, match, chain, }) => {\n            const attributes = callOrReturn(config.getAttributes, undefined, match) || {};\n            const tr = state.tr.delete(range.from, range.to);\n            const $start = tr.doc.resolve(range.from);\n            const blockRange = $start.blockRange();\n            const wrapping = blockRange && findWrapping(blockRange, config.type, attributes);\n            if (!wrapping) {\n                return null;\n            }\n            tr.wrap(blockRange, wrapping);\n            if (config.keepMarks && config.editor) {\n                const { selection, storedMarks } = state;\n                const { splittableMarks } = config.editor.extensionManager;\n                const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());\n                if (marks) {\n                    const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));\n                    tr.ensureMarks(filteredMarks);\n                }\n            }\n            if (config.keepAttributes) {\n                /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */\n                const nodeType = config.type.name === 'bulletList' || config.type.name === 'orderedList' ? 'listItem' : 'taskList';\n                chain().updateAttributes(nodeType, attributes).run();\n            }\n            const before = tr.doc.resolve(range.from - 1).nodeBefore;\n            if (before\n                && before.type === config.type\n                && canJoin(tr.doc, range.from - 1)\n                && (!config.joinPredicate || config.joinPredicate(match, before))) {\n                tr.join(range.from - 1);\n            }\n        },\n    });\n}\n\n/**\n * The Mark class is used to create custom mark extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nclass Mark {\n    constructor(config = {}) {\n        this.type = 'mark';\n        this.name = 'mark';\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {},\n        };\n        this.config = {\n            ...this.config,\n            ...config,\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n                name: this.name,\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n            name: this.name,\n            options: this.options,\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Mark(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend({\n            ...this.config,\n            addOptions: () => {\n                return mergeDeep(this.options, options);\n            },\n        });\n        // Always preserve the current name\n        extension.name = this.name;\n        // Set the parent to be our parent\n        extension.parent = this.parent;\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Mark(extendedConfig);\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n            name: extension.name,\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n            name: extension.name,\n            options: extension.options,\n        }));\n        return extension;\n    }\n    static handleExit({ editor, mark }) {\n        const { tr } = editor.state;\n        const currentPos = editor.state.selection.$from;\n        const isAtEnd = currentPos.pos === currentPos.end();\n        if (isAtEnd) {\n            const currentMarks = currentPos.marks();\n            const isInMark = !!currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n            if (!isInMark) {\n                return false;\n            }\n            const removeMark = currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);\n            if (removeMark) {\n                tr.removeStoredMark(removeMark);\n            }\n            tr.insertText(' ', currentPos.pos);\n            editor.view.dispatch(tr);\n            return true;\n        }\n        return false;\n    }\n}\n\n/**\n * The Node class is used to create custom node extensions.\n * @see https://tiptap.dev/api/extensions#create-a-new-extension\n */\nclass Node {\n    constructor(config = {}) {\n        this.type = 'node';\n        this.name = 'node';\n        this.parent = null;\n        this.child = null;\n        this.config = {\n            name: this.name,\n            defaultOptions: {},\n        };\n        this.config = {\n            ...this.config,\n            ...config,\n        };\n        this.name = this.config.name;\n        if (config.defaultOptions && Object.keys(config.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${this.name}\".`);\n        }\n        // TODO: remove `addOptions` fallback\n        this.options = this.config.defaultOptions;\n        if (this.config.addOptions) {\n            this.options = callOrReturn(getExtensionField(this, 'addOptions', {\n                name: this.name,\n            }));\n        }\n        this.storage = callOrReturn(getExtensionField(this, 'addStorage', {\n            name: this.name,\n            options: this.options,\n        })) || {};\n    }\n    static create(config = {}) {\n        return new Node(config);\n    }\n    configure(options = {}) {\n        // return a new instance so we can use the same extension\n        // with different calls of `configure`\n        const extension = this.extend({\n            ...this.config,\n            addOptions: () => {\n                return mergeDeep(this.options, options);\n            },\n        });\n        // Always preserve the current name\n        extension.name = this.name;\n        // Set the parent to be our parent\n        extension.parent = this.parent;\n        return extension;\n    }\n    extend(extendedConfig = {}) {\n        const extension = new Node(extendedConfig);\n        extension.parent = this;\n        this.child = extension;\n        extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;\n        if (extendedConfig.defaultOptions && Object.keys(extendedConfig.defaultOptions).length > 0) {\n            console.warn(`[tiptap warn]: BREAKING CHANGE: \"defaultOptions\" is deprecated. Please use \"addOptions\" instead. Found in extension: \"${extension.name}\".`);\n        }\n        extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {\n            name: extension.name,\n        }));\n        extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {\n            name: extension.name,\n            options: extension.options,\n        }));\n        return extension;\n    }\n}\n\nfunction isAndroid() {\n    return navigator.platform === 'Android' || /android/i.test(navigator.userAgent);\n}\n\n/**\n * Node views are used to customize the rendered DOM structure of a node.\n * @see https://tiptap.dev/guide/node-views\n */\nclass NodeView {\n    constructor(component, props, options) {\n        this.isDragging = false;\n        this.component = component;\n        this.editor = props.editor;\n        this.options = {\n            stopEvent: null,\n            ignoreMutation: null,\n            ...options,\n        };\n        this.extension = props.extension;\n        this.node = props.node;\n        this.decorations = props.decorations;\n        this.getPos = props.getPos;\n        this.mount();\n    }\n    mount() {\n        // eslint-disable-next-line\n        return;\n    }\n    get dom() {\n        return this.editor.view.dom;\n    }\n    get contentDOM() {\n        return null;\n    }\n    onDragStart(event) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        const { view } = this.editor;\n        const target = event.target;\n        // get the drag handle element\n        // `closest` is not available for text nodes so we may have to use its parent\n        const dragHandle = target.nodeType === 3\n            ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]')\n            : target.closest('[data-drag-handle]');\n        if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {\n            return;\n        }\n        let x = 0;\n        let y = 0;\n        // calculate offset for drag element if we use a different drag handle element\n        if (this.dom !== dragHandle) {\n            const domBox = this.dom.getBoundingClientRect();\n            const handleBox = dragHandle.getBoundingClientRect();\n            // In React, we have to go through nativeEvent to reach offsetX/offsetY.\n            const offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;\n            const offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;\n            x = handleBox.x - domBox.x + offsetX;\n            y = handleBox.y - domBox.y + offsetY;\n        }\n        (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);\n        // we need to tell ProseMirror that we want to move the whole node\n        // so we create a NodeSelection\n        const selection = NodeSelection.create(view.state.doc, this.getPos());\n        const transaction = view.state.tr.setSelection(selection);\n        view.dispatch(transaction);\n    }\n    stopEvent(event) {\n        var _a;\n        if (!this.dom) {\n            return false;\n        }\n        if (typeof this.options.stopEvent === 'function') {\n            return this.options.stopEvent({ event });\n        }\n        const target = event.target;\n        const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));\n        // any event from child nodes should be handled by ProseMirror\n        if (!isInElement) {\n            return false;\n        }\n        const isDragEvent = event.type.startsWith('drag');\n        const isDropEvent = event.type === 'drop';\n        const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable;\n        // any input event within node views should be ignored by ProseMirror\n        if (isInput && !isDropEvent && !isDragEvent) {\n            return true;\n        }\n        const { isEditable } = this.editor;\n        const { isDragging } = this;\n        const isDraggable = !!this.node.type.spec.draggable;\n        const isSelectable = NodeSelection.isSelectable(this.node);\n        const isCopyEvent = event.type === 'copy';\n        const isPasteEvent = event.type === 'paste';\n        const isCutEvent = event.type === 'cut';\n        const isClickEvent = event.type === 'mousedown';\n        // ProseMirror tries to drag selectable nodes\n        // even if `draggable` is set to `false`\n        // this fix prevents that\n        if (!isDraggable && isSelectable && isDragEvent) {\n            event.preventDefault();\n        }\n        if (isDraggable && isDragEvent && !isDragging) {\n            event.preventDefault();\n            return false;\n        }\n        // we have to store that dragging started\n        if (isDraggable && isEditable && !isDragging && isClickEvent) {\n            const dragHandle = target.closest('[data-drag-handle]');\n            const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));\n            if (isValidDragHandle) {\n                this.isDragging = true;\n                document.addEventListener('dragend', () => {\n                    this.isDragging = false;\n                }, { once: true });\n                document.addEventListener('drop', () => {\n                    this.isDragging = false;\n                }, { once: true });\n                document.addEventListener('mouseup', () => {\n                    this.isDragging = false;\n                }, { once: true });\n            }\n        }\n        // these events are handled by prosemirror\n        if (isDragging\n            || isDropEvent\n            || isCopyEvent\n            || isPasteEvent\n            || isCutEvent\n            || (isClickEvent && isSelectable)) {\n            return false;\n        }\n        return true;\n    }\n    ignoreMutation(mutation) {\n        if (!this.dom || !this.contentDOM) {\n            return true;\n        }\n        if (typeof this.options.ignoreMutation === 'function') {\n            return this.options.ignoreMutation({ mutation });\n        }\n        // a leaf/atom node is like a black box for ProseMirror\n        // and should be fully handled by the node view\n        if (this.node.isLeaf || this.node.isAtom) {\n            return true;\n        }\n        // ProseMirror should handle any selections\n        if (mutation.type === 'selection') {\n            return false;\n        }\n        // try to prevent a bug on iOS and Android that will break node views on enter\n        // this is because ProseMirror can’t preventDispatch on enter\n        // this will lead to a re-render of the node view on enter\n        // see: https://github.com/ueberdosis/tiptap/issues/1214\n        // see: https://github.com/ueberdosis/tiptap/issues/2534\n        if (this.dom.contains(mutation.target)\n            && mutation.type === 'childList'\n            && (isiOS() || isAndroid())\n            && this.editor.isFocused) {\n            const changedNodes = [\n                ...Array.from(mutation.addedNodes),\n                ...Array.from(mutation.removedNodes),\n            ];\n            // we’ll check if every changed node is contentEditable\n            // to make sure it’s probably mutated by ProseMirror\n            if (changedNodes.every(node => node.isContentEditable)) {\n                return false;\n            }\n        }\n        // we will allow mutation contentDOM with attributes\n        // so we can for example adding classes within our node view\n        if (this.contentDOM === mutation.target && mutation.type === 'attributes') {\n            return true;\n        }\n        // ProseMirror should handle any changes within contentDOM\n        if (this.contentDOM.contains(mutation.target)) {\n            return false;\n        }\n        return true;\n    }\n    updateAttributes(attributes) {\n        this.editor.commands.command(({ tr }) => {\n            const pos = this.getPos();\n            tr.setNodeMarkup(pos, undefined, {\n                ...this.node.attrs,\n                ...attributes,\n            });\n            return true;\n        });\n    }\n    deleteNode() {\n        const from = this.getPos();\n        const to = from + this.node.nodeSize;\n        this.editor.commands.deleteRange({ from, to });\n    }\n}\n\n/**\n * Build an paste rule that adds a mark when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nfunction markPasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler: ({ state, range, match, pasteEvent, }) => {\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const { tr } = state;\n            const captureGroup = match[match.length - 1];\n            const fullMatch = match[0];\n            let markEnd = range.to;\n            if (captureGroup) {\n                const startSpaces = fullMatch.search(/\\S/);\n                const textStart = range.from + fullMatch.indexOf(captureGroup);\n                const textEnd = textStart + captureGroup.length;\n                const excludedMarks = getMarksBetween(range.from, range.to, state.doc)\n                    .filter(item => {\n                    // @ts-ignore\n                    const excluded = item.mark.type.excluded;\n                    return excluded.find(type => type === config.type && type !== item.mark.type);\n                })\n                    .filter(item => item.to > textStart);\n                if (excludedMarks.length) {\n                    return null;\n                }\n                if (textEnd < range.to) {\n                    tr.delete(textEnd, range.to);\n                }\n                if (textStart > range.from) {\n                    tr.delete(range.from + startSpaces, textStart);\n                }\n                markEnd = range.from + startSpaces + captureGroup.length;\n                tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));\n                tr.removeStoredMark(config.type);\n            }\n        },\n    });\n}\n\n// source: https://stackoverflow.com/a/6969486\nfunction escapeForRegEx(string) {\n    return string.replace(/[-/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n}\n\nfunction isString(value) {\n    return typeof value === 'string';\n}\n\n/**\n * Build an paste rule that adds a node when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nfunction nodePasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler({ match, chain, range, pasteEvent, }) {\n            const attributes = callOrReturn(config.getAttributes, undefined, match, pasteEvent);\n            const content = callOrReturn(config.getContent, undefined, attributes);\n            if (attributes === false || attributes === null) {\n                return null;\n            }\n            const node = { type: config.type.name, attrs: attributes };\n            if (content) {\n                node.content = content;\n            }\n            if (match.input) {\n                chain().deleteRange(range).insertContentAt(range.from, node);\n            }\n        },\n    });\n}\n\n/**\n * Build an paste rule that replaces text when the\n * matched text is pasted into it.\n * @see https://tiptap.dev/guide/custom-extensions/#paste-rules\n */\nfunction textPasteRule(config) {\n    return new PasteRule({\n        find: config.find,\n        handler: ({ state, range, match }) => {\n            let insert = config.replace;\n            let start = range.from;\n            const end = range.to;\n            if (match[1]) {\n                const offset = match[0].lastIndexOf(match[1]);\n                insert += match[0].slice(offset + match[1].length);\n                start += offset;\n                const cutOff = start - end;\n                if (cutOff > 0) {\n                    insert = match[0].slice(offset - cutOff, offset) + insert;\n                    start = end;\n                }\n            }\n            state.tr.insertText(insert, start, end);\n        },\n    });\n}\n\nclass Tracker {\n    constructor(transaction) {\n        this.transaction = transaction;\n        this.currentStep = this.transaction.steps.length;\n    }\n    map(position) {\n        let deleted = false;\n        const mappedPosition = this.transaction.steps\n            .slice(this.currentStep)\n            .reduce((newPosition, step) => {\n            const mapResult = step.getMap().mapResult(newPosition);\n            if (mapResult.deleted) {\n                deleted = true;\n            }\n            return mapResult.pos;\n        }, position);\n        return {\n            position: mappedPosition,\n            deleted,\n        };\n    }\n}\n\nexport { CommandManager, Editor, Extension, InputRule, Mark, Node, NodePos, NodeView, PasteRule, Tracker, callOrReturn, combineTransactionSteps, createChainableState, createDocument, createNodeFromContent, createStyleTag, defaultBlockAt, deleteProps, elementFromString, escapeForRegEx, index as extensions, findChildren, findChildrenInRange, findDuplicates, findParentNode, findParentNodeClosestToPos, fromString, generateHTML, generateJSON, generateText, getAttributes, getAttributesFromExtensions, getChangedRanges, getDebugJSON, getExtensionField, getHTMLFromFragment, getMarkAttributes, getMarkRange, getMarkType, getMarksBetween, getNodeAtPosition, getNodeAttributes, getNodeType, getRenderedAttributes, getSchema, getSchemaByResolvedExtensions, getSchemaTypeByName, getSchemaTypeNameByName, getSplittedAttributes, getText, getTextBetween, getTextContentFromNodes, getTextSerializersFromSchema, injectExtensionAttributesToParseRule, inputRulesPlugin, isActive, isAtEndOfNode, isAtStartOfNode, isEmptyObject, isExtensionRulesEnabled, isFunction, isList, isMacOS, isMarkActive, isNodeActive, isNodeEmpty, isNodeSelection, isNumber, isPlainObject, isRegExp, isString, isTextSelection, isiOS, markInputRule, markPasteRule, mergeAttributes, mergeDeep, minMax, nodeInputRule, nodePasteRule, objectIncludes, pasteRulesPlugin, posToDOMRect, removeDuplicates, resolveFocusPosition, selectionToInsertionEnd, splitExtensions, textInputRule, textPasteRule, textblockTypeInputRule, wrappingInputRule };\n//# sourceMappingURL=index.js.map\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}