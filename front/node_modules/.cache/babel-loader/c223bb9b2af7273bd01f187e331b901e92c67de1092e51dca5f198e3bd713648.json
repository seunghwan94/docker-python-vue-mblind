{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createBlock as _createBlock, createVNode as _createVNode, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4abee8a4\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"d-flex flex-column\"\n};\nconst _hoisted_2 = {\n  class: \"category-buttons\",\n  style: {\n    \"margin\": \"10px\"\n  }\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 1\n};\nconst _hoisted_5 = {\n  class: \"d-flex justify-content-end\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_BoardWrite = _resolveComponent(\"BoardWrite\");\n  const _component_BoardList = _resolveComponent(\"BoardList\");\n  const _component_Pagintion = _resolveComponent(\"Pagintion\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.categories, (value, key) => {\n    return _openBlock(), _createElementBlock(\"button\", {\n      type: \"button\",\n      class: _normalizeClass([\"btn btn-outline-primary m-2\", {\n        active: $data.selectedCategory === key\n      }]),\n      key: key,\n      onClick: $event => $options.selectCategory(key)\n    }, _toDisplayString(value), 11 /* TEXT, CLASS, PROPS */, _hoisted_3);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 글쓰기 \"), $data.postting ? (_openBlock(), _createBlock(_component_BoardWrite, {\n    key: 0\n  })) : (_openBlock(), _createElementBlock(\"div\", _hoisted_4, [_createCommentVNode(\" 게시판 목록 \"), _createVNode(_component_BoardList, {\n    posts: $data.posts,\n    selectedCategory: $data.selectedCategory\n  }, null, 8 /* PROPS */, [\"posts\", \"selectedCategory\"]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"button\", {\n    type: \"button\",\n    class: \"btn btn-outline-primary m-2\",\n    onClick: _cache[0] || (_cache[0] = $event => $data.postting = true)\n  }, \"글쓰기\")]), _createCommentVNode(\" 페이징 \"), _createTextVNode(\" \" + _toDisplayString($data.totalPosts) + \" \" + _toDisplayString($data.currentPage) + \" \" + _toDisplayString($data.perPage) + \" \", 1 /* TEXT */), _createVNode(_component_Pagintion, {\n    totalPosts: $data.totalPosts,\n    currentPage: $data.currentPage,\n    perPage: $data.perPage,\n    onUpdatePage: $options.updatePage\n  }, null, 8 /* PROPS */, [\"totalPosts\", \"currentPage\", \"perPage\", \"onUpdatePage\"])]))]);\n}","map":{"version":3,"names":["class","style","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$data","categories","value","type","_normalizeClass","active","selectedCategory","onClick","$event","$options","selectCategory","_hoisted_3","_createCommentVNode","postting","_createBlock","_component_BoardWrite","_hoisted_4","_createVNode","_component_BoardList","posts","_hoisted_5","_cache","_createTextVNode","_toDisplayString","totalPosts","currentPage","perPage","_component_Pagintion","onUpdatePage","updatePage"],"sources":["/var/www/front/src/components/Board/MainBoard.vue"],"sourcesContent":["<template>\n    <div class=\"d-flex flex-column\">\n      <div class=\"category-buttons\" style=\"margin:10px\">\n        <button\n          type=\"button\"\n          class=\"btn btn-outline-primary m-2\"\n          :class=\"{ active: selectedCategory === key }\"\n          v-for=\"(value, key) in categories\"\n          :key=\"key\"\n          @click=\"selectCategory(key)\"\n          >\n          {{ value }}\n        </button>\n      </div>\n      <!-- 글쓰기 -->\n      <BoardWrite v-if=\"postting\"/>\n      <div v-else> \n        <!-- 게시판 목록 -->\n        <BoardList \n          :posts=\"posts\"\n          :selectedCategory=\"selectedCategory\"\n        />\n        <div class=\"d-flex justify-content-end\">\n          <button type=\"button\" class=\"btn btn-outline-primary m-2\" @click=\"postting=true\">글쓰기</button>\n        </div>\n        <!-- 페이징 -->\n         {{ totalPosts }}\n         {{ currentPage }}\n         {{ perPage }}\n        <Pagintion\n          :totalPosts=\"totalPosts\"\n          :currentPage=\"currentPage\"\n          :perPage=\"perPage\"\n          @updatePage=\"updatePage\"\n          />\n      </div>\n    </div>\n  </template>\n  \n  <script>\n  import axios from 'axios';\n  import BoardList from './BoardList.vue';\n  import BoardWrite from './BoardWrite.vue';\n  import Pagintion from '../Pagintion.vue';\n  \n  export default {\n    data() {\n      return {\n        selectedCategory: '1',\n        categories: {},\n        posts: [],\n        totalPosts: 0,\n        currentPage: 1,\n        perPage: 10,\n        postting: false,\n      }\n    },\n    created() {\n      this.fetchCategories();\n      this.fetchPosts();\n    },\n    watch: {\n        // Watcher for selectedCategory\n        selectedCategory(newCategory, oldCategory) {\n            if (newCategory !== oldCategory) {\n                this.currentPage = 1; // Reset to the first page when category changes\n                this.posts = [],\n                this.fetchPosts(); // Fetch posts for the new category\n            }\n        }\n    },\n    methods: {\n      async fetchCategories() {\n        try {\n          console.log(`${this.$BackURL}/category`);\n          const response = await axios.get(`${this.$BackURL}/category`);\n          if (response.data.status === 'success') {\n            this.categories = response.data.res.reduce((acc, category) => {\n              acc[category.id] = category.name;\n              return acc;\n            }, {});\n          } else {\n            console.error('Failed to fetch categories:', response.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching categories:', error);\n        }\n      },\n      async fetchPosts(page = this.currentPage) {\n        try {\n          // Fetch posts\n          const postsResponse = await axios.get(`${this.$BackURL}/boardList`, {\n            params: {\n              category_id: this.selectedCategory,\n              page: page,\n              per_page: this.perPage\n            }\n          });\n          if (postsResponse.data.status === 'success') {\n            this.posts = postsResponse.data.res;\n          } else {\n            console.error('Failed to fetch posts:', postsResponse.data.message);\n          }\n  \n          // Fetch total posts\n          const totalPostsResponse = await axios.get(`${this.$BackURL}/boardListPage`, {\n            params: {\n              category_id: this.selectedCategory\n            }\n          });\n          if (totalPostsResponse.data.status === 'success') {\n            if (totalPostsResponse.data.res[0].total_posts == 0){\n              this.totalPosts = 1;\n            }else{\n              this.totalPosts = totalPostsResponse.data.res[0].total_posts;\n            }\n          } else {\n            console.error('Failed to fetch total posts:', totalPostsResponse.data.message);\n          }\n        } catch (error) {\n          console.error('Error fetching posts or total posts:', error);\n        }\n      },\n      selectCategory(key) {\n        this.selectedCategory = key;\n        this.currentPage = 1; // Reset to the first page when category changes\n        this.postting = false;\n        this.fetchPosts();\n      },\n      updatePage(page) {\n        this.currentPage = page;\n        this.fetchPosts(page);\n      },\n      setActiveTab(tab) {\n        // Implement tab switching logic if needed\n        console.log('Tab switched to:', tab);\n      }\n    },\n    components: {\n      BoardList,\n      BoardWrite,\n      Pagintion,\n    }\n  }\n  </script>\n  \n  <style scoped>\n  .container {\n    padding: 20px;\n  }\n  .category-buttons {\n    margin-bottom: 20px;\n  }\n  </style>\n  "],"mappings":";;;EACSA,KAAK,EAAC;AAAoB;;EACxBA,KAAK,EAAC,kBAAkB;EAACC,KAAmB,EAAnB;IAAA;EAAA;;mBAFpC;;EAAAC,GAAA;AAAA;;EAsBaF,KAAK,EAAC;AAA4B;;;;;uBArB3CG,mBAAA,CAmCM,OAnCNC,UAmCM,GAlCJC,mBAAA,CAWM,OAXNC,UAWM,I,kBAVJH,mBAAA,CASSI,SAAA,QAZjBC,WAAA,CAOiCC,KAAA,CAAAC,UAAU,EAP3C,CAOkBC,KAAK,EAAET,GAAG;yBAJpBC,mBAAA,CASS;MARPS,IAAI,EAAC,QAAQ;MACbZ,KAAK,EALfa,eAAA,EAKgB,6BAA6B;QAAAC,MAAA,EACjBL,KAAA,CAAAM,gBAAgB,KAAKb;MAAG;MAEzCA,GAAG,EAAEA,GAAG;MACRc,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,cAAc,CAACjB,GAAG;wBAEvBS,KAAK,gCAXlBS,UAAA;oCAcMC,mBAAA,SAAY,EACMZ,KAAA,CAAAa,QAAQ,I,cAA1BC,YAAA,CAA6BC,qBAAA;IAfnCtB,GAAA;EAAA,O,cAgBMC,mBAAA,CAmBM,OAnCZsB,UAAA,GAiBQJ,mBAAA,YAAe,EACfK,YAAA,CAGEC,oBAAA;IAFCC,KAAK,EAAEnB,KAAA,CAAAmB,KAAK;IACZb,gBAAgB,EAAEN,KAAA,CAAAM;0DAErBV,mBAAA,CAEM,OAFNwB,UAEM,GADJxB,mBAAA,CAA6F;IAArFO,IAAI,EAAC,QAAQ;IAACZ,KAAK,EAAC,6BAA6B;IAAEgB,OAAK,EAAAc,MAAA,QAAAA,MAAA,MAAAb,MAAA,IAAER,KAAA,CAAAa,QAAQ;KAAO,KAAG,E,GAEtFD,mBAAA,SAAY,EAzBpBU,gBAAA,CAyBoB,GACX,GAAAC,gBAAA,CAAGvB,KAAA,CAAAwB,UAAU,IAAG,GAChB,GAAAD,gBAAA,CAAGvB,KAAA,CAAAyB,WAAW,IAAG,GACjB,GAAAF,gBAAA,CAAGvB,KAAA,CAAA0B,OAAO,IAAG,GACd,iBAAAT,YAAA,CAKIU,oBAAA;IAJDH,UAAU,EAAExB,KAAA,CAAAwB,UAAU;IACtBC,WAAW,EAAEzB,KAAA,CAAAyB,WAAW;IACxBC,OAAO,EAAE1B,KAAA,CAAA0B,OAAO;IAChBE,YAAU,EAAEnB,QAAA,CAAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}